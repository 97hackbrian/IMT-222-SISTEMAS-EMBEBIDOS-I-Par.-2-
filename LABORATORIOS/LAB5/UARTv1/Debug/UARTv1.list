
UARTv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e04  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004018  08004018  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004020  08004020  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08004034  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004034  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb17  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019af  00000000  00000000  0002bb53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b00  00000000  00000000  0002d508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a28  00000000  00000000  0002e008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000209f4  00000000  00000000  0002ea30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a42  00000000  00000000  0004f424  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cccdc  00000000  00000000  00057e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124b42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db8  00000000  00000000  00124bc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003f78 	.word	0x08003f78

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003f78 	.word	0x08003f78

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 faf2 	bl	8000aba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f849 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f96b 	bl	80007b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004de:	f000 f94b 	bl	8000778 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f919 	bl	8000718 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e6:	f000 f8b3 	bl	8000650 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t Prueba [] = "Distancia: " ;
 80004ea:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <main+0x8c>)
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80004f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  uint8_t Prueba2 [] = " voltaje\r\n" ;
 80004f6:	4a19      	ldr	r2, [pc, #100]	; (800055c <main+0x90>)
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80004fe:	c303      	stmia	r3!, {r0, r1}
 8000500:	801a      	strh	r2, [r3, #0]
 8000502:	3302      	adds	r3, #2
 8000504:	0c12      	lsrs	r2, r2, #16
 8000506:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 8000508:	4815      	ldr	r0, [pc, #84]	; (8000560 <main+0x94>)
 800050a:	f000 fe67 	bl	80011dc <HAL_ADC_Start>
	  //HAL_ADC_PollForConversion(&hadc1,1000);
	  readValue=HAL_ADC_GetValue(&hadc1);
 800050e:	4814      	ldr	r0, [pc, #80]	; (8000560 <main+0x94>)
 8000510:	f000 fec7 	bl	80012a2 <HAL_ADC_GetValue>
 8000514:	4602      	mov	r2, r0
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <main+0x98>)
 8000518:	601a      	str	r2, [r3, #0]

      //calcVoltage=readValue*(3.3/4096)*2;
	  //readValue=(0.17*calcVoltage-0.1)*1000;

	  uint8_t sen [3];
	  itoa(readValue,sen,10);
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <main+0x98>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	1d39      	adds	r1, r7, #4
 8000520:	220a      	movs	r2, #10
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fce0 	bl	8003ee8 <itoa>
	  HAL_UART_Transmit (&huart2 , Prueba, sizeof (Prueba), 20 );
 8000528:	f107 0114 	add.w	r1, r7, #20
 800052c:	2314      	movs	r3, #20
 800052e:	220c      	movs	r2, #12
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <main+0x9c>)
 8000532:	f003 f897 	bl	8003664 <HAL_UART_Transmit>
	  HAL_UART_Transmit (&huart2 , sen, sizeof (sen), 3 );
 8000536:	1d39      	adds	r1, r7, #4
 8000538:	2303      	movs	r3, #3
 800053a:	2203      	movs	r2, #3
 800053c:	480a      	ldr	r0, [pc, #40]	; (8000568 <main+0x9c>)
 800053e:	f003 f891 	bl	8003664 <HAL_UART_Transmit>
	  HAL_UART_Transmit (&huart2 , Prueba2, sizeof (Prueba2), 13 );
 8000542:	f107 0108 	add.w	r1, r7, #8
 8000546:	230d      	movs	r3, #13
 8000548:	220b      	movs	r2, #11
 800054a:	4807      	ldr	r0, [pc, #28]	; (8000568 <main+0x9c>)
 800054c:	f003 f88a 	bl	8003664 <HAL_UART_Transmit>
	  HAL_Delay ( 100 );
 8000550:	2064      	movs	r0, #100	; 0x64
 8000552:	f000 fb27 	bl	8000ba4 <HAL_Delay>
  {
 8000556:	e7c8      	b.n	80004ea <main+0x1e>
 8000558:	08003f90 	.word	0x08003f90
 800055c:	08003f9c 	.word	0x08003f9c
 8000560:	20000028 	.word	0x20000028
 8000564:	200000d8 	.word	0x200000d8
 8000568:	200000dc 	.word	0x200000dc

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b0ac      	sub	sp, #176	; 0xb0
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fcb6 	bl	8003eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2254      	movs	r2, #84	; 0x54
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fca8 	bl	8003eec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800059c:	2310      	movs	r3, #16
 800059e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ac:	2360      	movs	r3, #96	; 0x60
 80005ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fefd 	bl	80023bc <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x60>
  {
    Error_Handler();
 80005c8:	f000 f90c 	bl	80007e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fb08 	bl	8002bfc <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005f2:	f000 f8f7 	bl	80007e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80005f6:	f244 0302 	movw	r3, #16386	; 0x4002
 80005fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000606:	2301      	movs	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800060e:	2308      	movs	r3, #8
 8000610:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000612:	2307      	movs	r3, #7
 8000614:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800061e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000622:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fcec 	bl	8003004 <HAL_RCCEx_PeriphCLKConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000632:	f000 f8d7 	bl	80007e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000636:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063a:	f001 fe69 	bl	8002310 <HAL_PWREx_ControlVoltageScaling>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000644:	f000 f8ce 	bl	80007e4 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	37b0      	adds	r7, #176	; 0xb0
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
 8000664:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <MX_ADC1_Init+0xbc>)
 8000668:	4a29      	ldr	r2, [pc, #164]	; (8000710 <MX_ADC1_Init+0xc0>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <MX_ADC1_Init+0xbc>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_ADC1_Init+0xbc>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <MX_ADC1_Init+0xbc>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_ADC1_Init+0xbc>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_ADC1_Init+0xbc>)
 8000686:	2204      	movs	r2, #4
 8000688:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <MX_ADC1_Init+0xbc>)
 800068c:	2200      	movs	r2, #0
 800068e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_ADC1_Init+0xbc>)
 8000692:	2200      	movs	r2, #0
 8000694:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_ADC1_Init+0xbc>)
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_ADC1_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ADC1_Init+0xbc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_ADC1_Init+0xbc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_ADC1_Init+0xbc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_ADC1_Init+0xbc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_ADC1_Init+0xbc>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c6:	4811      	ldr	r0, [pc, #68]	; (800070c <MX_ADC1_Init+0xbc>)
 80006c8:	f000 fc42 	bl	8000f50 <HAL_ADC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006d2:	f000 f887 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_ADC1_Init+0xc4>)
 80006d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006da:	2306      	movs	r3, #6
 80006dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006e2:	237f      	movs	r3, #127	; 0x7f
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e6:	2304      	movs	r3, #4
 80006e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_ADC1_Init+0xbc>)
 80006f4:	f000 fde2 	bl	80012bc <HAL_ADC_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006fe:	f000 f871 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000028 	.word	0x20000028
 8000710:	50040000 	.word	0x50040000
 8000714:	2a000400 	.word	0x2a000400

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART2_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000724:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800075c:	f002 ff34 	bl	80035c8 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f83d 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000dc 	.word	0x200000dc
 8000774:	40004400 	.word	0x40004400

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_DMA_Init+0x38>)
 8000780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <MX_DMA_Init+0x38>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6493      	str	r3, [r2, #72]	; 0x48
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_DMA_Init+0x38>)
 800078c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	200b      	movs	r0, #11
 800079c:	f001 faa1 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a0:	200b      	movs	r0, #11
 80007a2:	f001 faba 	bl	8001d1a <HAL_NVIC_EnableIRQ>

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_GPIO_Init+0x2c>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <MX_GPIO_Init+0x2c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x2c>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ea:	e7fe      	b.n	80007ea <Error_Handler+0x6>

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	; 0x60
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	; 0x58
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a2b      	ldr	r2, [pc, #172]	; (8000900 <HAL_ADC_MspInit+0xcc>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d14f      	bne.n	80008f6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <HAL_ADC_MspInit+0xd0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <HAL_ADC_MspInit+0xd0>)
 800085c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <HAL_ADC_MspInit+0xd0>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <HAL_ADC_MspInit+0xd0>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a24      	ldr	r2, [pc, #144]	; (8000904 <HAL_ADC_MspInit+0xd0>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <HAL_ADC_MspInit+0xd0>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000886:	2320      	movs	r3, #32
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800088a:	230b      	movs	r3, #11
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f001 fbc0 	bl	8002020 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008a2:	4a1a      	ldr	r2, [pc, #104]	; (800090c <HAL_ADC_MspInit+0xd8>)
 80008a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008dc:	f001 fa38 	bl	8001d50 <HAL_DMA_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80008e6:	f7ff ff7d 	bl	80007e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80008f0:	4a05      	ldr	r2, [pc, #20]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	50040000 	.word	0x50040000
 8000904:	40021000 	.word	0x40021000
 8000908:	2000008c 	.word	0x2000008c
 800090c:	40020008 	.word	0x40020008

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a17      	ldr	r2, [pc, #92]	; (800098c <HAL_UART_MspInit+0x7c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d128      	bne.n	8000984 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_UART_MspInit+0x80>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <HAL_UART_MspInit+0x80>)
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_UART_MspInit+0x80>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_UART_MspInit+0x80>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <HAL_UART_MspInit+0x80>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_UART_MspInit+0x80>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000962:	230c      	movs	r3, #12
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000972:	2307      	movs	r3, #7
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f001 fb4e 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40004400 	.word	0x40004400
 8000990:	40021000 	.word	0x40021000

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f8c0 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <DMA1_Channel1_IRQHandler+0x10>)
 80009ee:	f001 fa67 	bl	8001ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000008c 	.word	0x2000008c

080009fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <SystemInit+0x64>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <SystemInit+0x64>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <SystemInit+0x68>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <SystemInit+0x68>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <SystemInit+0x68>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <SystemInit+0x68>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <SystemInit+0x68>)
 8000a28:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a2c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <SystemInit+0x68>)
 8000a34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a38:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <SystemInit+0x68>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <SystemInit+0x68>)
 8000a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <SystemInit+0x68>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SystemInit+0x64>)
 8000a4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a52:	609a      	str	r2, [r3, #8]
#endif
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	40021000 	.word	0x40021000

08000a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a6c:	f7ff ffc6 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a72:	e003      	b.n	8000a7c <LoopCopyDataInit>

08000a74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a7a:	3104      	adds	r1, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a84:	d3f6      	bcc.n	8000a74 <CopyDataInit>
	ldr	r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a88:	e002      	b.n	8000a90 <LoopFillZerobss>

08000a8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a8c:	f842 3b04 	str.w	r3, [r2], #4

08000a90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <LoopForever+0x16>)
	cmp	r2, r3
 8000a92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a94:	d3f9      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f003 f9eb 	bl	8003e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9a:	f7ff fd17 	bl	80004cc <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000aa4:	08004028 	.word	0x08004028
	ldr	r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000aac:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ab0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ab4:	20000160 	.word	0x20000160

08000ab8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_IRQHandler>

08000aba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f001 f901 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f80e 	bl	8000aec <HAL_InitTick>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d002      	beq.n	8000adc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	e001      	b.n	8000ae0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000adc:	f7ff fe86 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_InitTick+0x6c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d023      	beq.n	8000b48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_InitTick+0x70>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <HAL_InitTick+0x6c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f90d 	bl	8001d36 <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10f      	bne.n	8000b42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d809      	bhi.n	8000b3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f001 f8d7 	bl	8001ce2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_InitTick+0x74>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e007      	b.n	8000b4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e004      	b.n	8000b4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e001      	b.n	8000b4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	2000015c 	.word	0x2000015c

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2000015c 	.word	0x2000015c

08000ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff ffee 	bl	8000b8c <HAL_GetTick>
 8000bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbc:	d005      	beq.n	8000bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_Delay+0x40>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bca:	bf00      	nop
 8000bcc:	f7ff ffde 	bl	8000b8c <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8f7      	bhi.n	8000bcc <HAL_Delay+0x28>
  {
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000008 	.word	0x20000008

08000be8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	609a      	str	r2, [r3, #8]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	609a      	str	r2, [r3, #8]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3360      	adds	r3, #96	; 0x60
 8000c62:	461a      	mov	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <LL_ADC_SetOffset+0x44>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c88:	bf00      	nop
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	03fff000 	.word	0x03fff000

08000c98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3360      	adds	r3, #96	; 0x60
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3360      	adds	r3, #96	; 0x60
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000cee:	bf00      	nop
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b087      	sub	sp, #28
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	3330      	adds	r3, #48	; 0x30
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	0a1b      	lsrs	r3, r3, #8
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	4413      	add	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	f003 031f 	and.w	r3, r3, #31
 8000d24:	211f      	movs	r1, #31
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	0e9b      	lsrs	r3, r3, #26
 8000d32:	f003 011f 	and.w	r1, r3, #31
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	f003 031f 	and.w	r3, r3, #31
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	431a      	orrs	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d46:	bf00      	nop
 8000d48:	371c      	adds	r7, #28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b087      	sub	sp, #28
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3314      	adds	r3, #20
 8000d62:	461a      	mov	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	0e5b      	lsrs	r3, r3, #25
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	4413      	add	r3, r2
 8000d70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	0d1b      	lsrs	r3, r3, #20
 8000d7a:	f003 031f 	and.w	r3, r3, #31
 8000d7e:	2107      	movs	r1, #7
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	401a      	ands	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	0d1b      	lsrs	r3, r3, #20
 8000d8c:	f003 031f 	and.w	r3, r3, #31
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	431a      	orrs	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0318 	and.w	r3, r3, #24
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <LL_ADC_SetChannelSingleDiff+0x44>)
 8000dcc:	40d9      	lsrs	r1, r3
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	400b      	ands	r3, r1
 8000dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	0007ffff 	.word	0x0007ffff

08000df0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	6093      	str	r3, [r2, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e28:	d101      	bne.n	8000e2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000e4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e78:	d101      	bne.n	8000e7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ea0:	f043 0201 	orr.w	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d101      	bne.n	8000ecc <LL_ADC_IsEnabled+0x18>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <LL_ADC_IsEnabled+0x1a>
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000eea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eee:	f043 0204 	orr.w	r2, r3, #4
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d101      	bne.n	8000f1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d101      	bne.n	8000f40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e12a      	b.n	80011c0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d109      	bne.n	8000f8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fc5b 	bl	8000834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff3f 	bl	8000e14 <LL_ADC_IsDeepPowerDownEnabled>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff25 	bl	8000df0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff5a 	bl	8000e64 <LL_ADC_IsInternalRegulatorEnabled>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d113      	bne.n	8000fde <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff3e 	bl	8000e3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fc0:	4b81      	ldr	r3, [pc, #516]	; (80011c8 <HAL_ADC_Init+0x278>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	099b      	lsrs	r3, r3, #6
 8000fc6:	4a81      	ldr	r2, [pc, #516]	; (80011cc <HAL_ADC_Init+0x27c>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	099b      	lsrs	r3, r3, #6
 8000fce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fd0:	e002      	b.n	8000fd8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f9      	bne.n	8000fd2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff3e 	bl	8000e64 <LL_ADC_IsInternalRegulatorEnabled>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10d      	bne.n	800100a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff2:	f043 0210 	orr.w	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff77 	bl	8000f02 <LL_ADC_REG_IsConversionOngoing>
 8001014:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 80c5 	bne.w	80011ae <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 80c1 	bne.w	80011ae <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001030:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001034:	f043 0202 	orr.w	r2, r3, #2
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff37 	bl	8000eb4 <LL_ADC_IsEnabled>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10b      	bne.n	8001064 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800104c:	4860      	ldr	r0, [pc, #384]	; (80011d0 <HAL_ADC_Init+0x280>)
 800104e:	f7ff ff31 	bl	8000eb4 <LL_ADC_IsEnabled>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d105      	bne.n	8001064 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4619      	mov	r1, r3
 800105e:	485d      	ldr	r0, [pc, #372]	; (80011d4 <HAL_ADC_Init+0x284>)
 8001060:	f7ff fdc2 	bl	8000be8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7e5b      	ldrb	r3, [r3, #25]
 8001068:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800106e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001074:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800107a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001082:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d106      	bne.n	80010a0 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	3b01      	subs	r3, #1
 8001098:	045b      	lsls	r3, r3, #17
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d009      	beq.n	80010bc <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	4b45      	ldr	r3, [pc, #276]	; (80011d8 <HAL_ADC_Init+0x288>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	430b      	orrs	r3, r1
 80010ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff14 	bl	8000f02 <LL_ADC_REG_IsConversionOngoing>
 80010da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff21 	bl	8000f28 <LL_ADC_INJ_IsConversionOngoing>
 80010e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d13d      	bne.n	800116a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d13a      	bne.n	800116a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80010f8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001100:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001110:	f023 0302 	bic.w	r3, r3, #2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	69b9      	ldr	r1, [r7, #24]
 800111a:	430b      	orrs	r3, r1
 800111c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001124:	2b01      	cmp	r3, #1
 8001126:	d118      	bne.n	800115a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001132:	f023 0304 	bic.w	r3, r3, #4
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800113e:	4311      	orrs	r1, r2
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001144:	4311      	orrs	r1, r2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800114a:	430a      	orrs	r2, r1
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	e007      	b.n	800116a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0201 	bic.w	r2, r2, #1
 8001168:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d10c      	bne.n	800118c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f023 010f 	bic.w	r1, r3, #15
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	1e5a      	subs	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
 800118a:	e007      	b.n	800119c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 020f 	bic.w	r2, r2, #15
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a0:	f023 0303 	bic.w	r3, r3, #3
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	655a      	str	r2, [r3, #84]	; 0x54
 80011ac:	e007      	b.n	80011be <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b2:	f043 0210 	orr.w	r2, r3, #16
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80011be:	7ffb      	ldrb	r3, [r7, #31]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	053e2d63 	.word	0x053e2d63
 80011d0:	50040000 	.word	0x50040000
 80011d4:	50040300 	.word	0x50040300
 80011d8:	fff0c007 	.word	0xfff0c007

080011dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fe8a 	bl	8000f02 <LL_ADC_REG_IsConversionOngoing>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d14f      	bne.n	8001294 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_Start+0x26>
 80011fe:	2302      	movs	r3, #2
 8001200:	e04b      	b.n	800129a <HAL_ADC_Start+0xbe>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fc34 	bl	8001a78 <ADC_Enable>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d137      	bne.n	800128a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800123a:	d106      	bne.n	800124a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001240:	f023 0206 	bic.w	r2, r3, #6
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	659a      	str	r2, [r3, #88]	; 0x58
 8001248:	e002      	b.n	8001250 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	221c      	movs	r2, #28
 8001256:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001276:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fe29 	bl	8000eda <LL_ADC_REG_StartConversion>
 8001288:	e006      	b.n	8001298 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001292:	e001      	b.n	8001298 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001294:	2302      	movs	r3, #2
 8001296:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0b6      	sub	sp, #216	; 0xd8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <HAL_ADC_ConfigChannel+0x22>
 80012da:	2302      	movs	r3, #2
 80012dc:	e3b8      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x794>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fe09 	bl	8000f02 <LL_ADC_REG_IsConversionOngoing>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 839d 	bne.w	8001a32 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d824      	bhi.n	800134a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	3b02      	subs	r3, #2
 8001306:	2b03      	cmp	r3, #3
 8001308:	d81b      	bhi.n	8001342 <HAL_ADC_ConfigChannel+0x86>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <HAL_ADC_ConfigChannel+0x54>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	08001321 	.word	0x08001321
 8001314:	08001329 	.word	0x08001329
 8001318:	08001331 	.word	0x08001331
 800131c:	08001339 	.word	0x08001339
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	220c      	movs	r2, #12
 8001324:	605a      	str	r2, [r3, #4]
          break;
 8001326:	e011      	b.n	800134c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2212      	movs	r2, #18
 800132c:	605a      	str	r2, [r3, #4]
          break;
 800132e:	e00d      	b.n	800134c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2218      	movs	r2, #24
 8001334:	605a      	str	r2, [r3, #4]
          break;
 8001336:	e009      	b.n	800134c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800133e:	605a      	str	r2, [r3, #4]
          break;
 8001340:	e004      	b.n	800134c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2206      	movs	r2, #6
 8001346:	605a      	str	r2, [r3, #4]
          break;
 8001348:	e000      	b.n	800134c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800134a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	f7ff fcce 	bl	8000cfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fdcd 	bl	8000f02 <LL_ADC_REG_IsConversionOngoing>
 8001368:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fdd9 	bl	8000f28 <LL_ADC_INJ_IsConversionOngoing>
 8001376:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800137a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 81a6 	bne.w	80016d0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001388:	2b00      	cmp	r3, #0
 800138a:	f040 81a1 	bne.w	80016d0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	6819      	ldr	r1, [r3, #0]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	461a      	mov	r2, r3
 800139c:	f7ff fcd9 	bl	8000d52 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d00a      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	6919      	ldr	r1, [r3, #16]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80013d2:	f7ff fc3d 	bl	8000c50 <LL_ADC_SetOffset>
 80013d6:	e17b      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fc5a 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10a      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x148>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fc4f 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	0e9b      	lsrs	r3, r3, #26
 80013fe:	f003 021f 	and.w	r2, r3, #31
 8001402:	e01e      	b.n	8001442 <HAL_ADC_ConfigChannel+0x186>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fc44 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001426:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800142a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001432:	2320      	movs	r3, #32
 8001434:	e004      	b.n	8001440 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <HAL_ADC_ConfigChannel+0x19e>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0e9b      	lsrs	r3, r3, #26
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	e018      	b.n	800148c <HAL_ADC_ConfigChannel+0x1d0>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800146e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001476:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800147e:	2320      	movs	r3, #32
 8001480:	e004      	b.n	800148c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001486:	fab3 f383 	clz	r3, r3
 800148a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800148c:	429a      	cmp	r2, r3
 800148e:	d106      	bne.n	800149e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fc13 	bl	8000cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2101      	movs	r1, #1
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fbf7 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10a      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x20e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fbec 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	0e9b      	lsrs	r3, r3, #26
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	e01e      	b.n	8001508 <HAL_ADC_ConfigChannel+0x24c>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2101      	movs	r1, #1
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fbe1 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80014e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80014f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80014f8:	2320      	movs	r3, #32
 80014fa:	e004      	b.n	8001506 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80014fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001500:	fab3 f383 	clz	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x264>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0e9b      	lsrs	r3, r3, #26
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	e018      	b.n	8001552 <HAL_ADC_ConfigChannel+0x296>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800152c:	fa93 f3a3 	rbit	r3, r3
 8001530:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001534:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800153c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001544:	2320      	movs	r3, #32
 8001546:	e004      	b.n	8001552 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800154c:	fab3 f383 	clz	r3, r3
 8001550:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001552:	429a      	cmp	r2, r3
 8001554:	d106      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fbb0 	bl	8000cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fb94 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10a      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x2d4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2102      	movs	r1, #2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fb89 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	0e9b      	lsrs	r3, r3, #26
 800158a:	f003 021f 	and.w	r2, r3, #31
 800158e:	e01e      	b.n	80015ce <HAL_ADC_ConfigChannel+0x312>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2102      	movs	r1, #2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fb7e 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80015ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80015b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80015be:	2320      	movs	r3, #32
 80015c0:	e004      	b.n	80015cc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80015c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x32a>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	0e9b      	lsrs	r3, r3, #26
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	e016      	b.n	8001614 <HAL_ADC_ConfigChannel+0x358>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80015f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80015fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001606:	2320      	movs	r3, #32
 8001608:	e004      	b.n	8001614 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800160a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001614:	429a      	cmp	r2, r3
 8001616:	d106      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	2102      	movs	r1, #2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fb4f 	bl	8000cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2103      	movs	r1, #3
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fb33 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10a      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x396>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2103      	movs	r1, #3
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fb28 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	0e9b      	lsrs	r3, r3, #26
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	e017      	b.n	8001682 <HAL_ADC_ConfigChannel+0x3c6>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2103      	movs	r1, #3
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fb1d 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800166a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800166c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800166e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001674:	2320      	movs	r3, #32
 8001676:	e003      	b.n	8001680 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168a:	2b00      	cmp	r3, #0
 800168c:	d105      	bne.n	800169a <HAL_ADC_ConfigChannel+0x3de>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	0e9b      	lsrs	r3, r3, #26
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	e011      	b.n	80016be <HAL_ADC_ConfigChannel+0x402>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80016a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80016ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80016b2:	2320      	movs	r3, #32
 80016b4:	e003      	b.n	80016be <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80016b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016be:	429a      	cmp	r2, r3
 80016c0:	d106      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	2103      	movs	r1, #3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fafa 	bl	8000cc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fbed 	bl	8000eb4 <LL_ADC_IsEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f040 813f 	bne.w	8001960 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	6819      	ldr	r1, [r3, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	461a      	mov	r2, r3
 80016f0:	f7ff fb5a 	bl	8000da8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a8e      	ldr	r2, [pc, #568]	; (8001934 <HAL_ADC_ConfigChannel+0x678>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	f040 8130 	bne.w	8001960 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10b      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x46c>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0e9b      	lsrs	r3, r3, #26
 8001716:	3301      	adds	r3, #1
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	2b09      	cmp	r3, #9
 800171e:	bf94      	ite	ls
 8001720:	2301      	movls	r3, #1
 8001722:	2300      	movhi	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	e019      	b.n	800175c <HAL_ADC_ConfigChannel+0x4a0>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001738:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800173a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001740:	2320      	movs	r3, #32
 8001742:	e003      	b.n	800174c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	2b09      	cmp	r3, #9
 8001754:	bf94      	ite	ls
 8001756:	2301      	movls	r3, #1
 8001758:	2300      	movhi	r3, #0
 800175a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800175c:	2b00      	cmp	r3, #0
 800175e:	d079      	beq.n	8001854 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001768:	2b00      	cmp	r3, #0
 800176a:	d107      	bne.n	800177c <HAL_ADC_ConfigChannel+0x4c0>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0e9b      	lsrs	r3, r3, #26
 8001772:	3301      	adds	r3, #1
 8001774:	069b      	lsls	r3, r3, #26
 8001776:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800177a:	e015      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x4ec>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800178a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800178e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001794:	2320      	movs	r3, #32
 8001796:	e003      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	069b      	lsls	r3, r3, #26
 80017a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x50c>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0e9b      	lsrs	r3, r3, #26
 80017ba:	3301      	adds	r3, #1
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	e017      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x53c>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80017d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80017da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80017e0:	2320      	movs	r3, #32
 80017e2:	e003      	b.n	80017ec <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80017e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3301      	adds	r3, #1
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	ea42 0103 	orr.w	r1, r2, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10a      	bne.n	800181e <HAL_ADC_ConfigChannel+0x562>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0e9b      	lsrs	r3, r3, #26
 800180e:	3301      	adds	r3, #1
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	051b      	lsls	r3, r3, #20
 800181c:	e018      	b.n	8001850 <HAL_ADC_ConfigChannel+0x594>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001836:	2320      	movs	r3, #32
 8001838:	e003      	b.n	8001842 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800183a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	3301      	adds	r3, #1
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001850:	430b      	orrs	r3, r1
 8001852:	e080      	b.n	8001956 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x5b4>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0e9b      	lsrs	r3, r3, #26
 8001866:	3301      	adds	r3, #1
 8001868:	069b      	lsls	r3, r3, #26
 800186a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800186e:	e015      	b.n	800189c <HAL_ADC_ConfigChannel+0x5e0>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001888:	2320      	movs	r3, #32
 800188a:	e003      	b.n	8001894 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3301      	adds	r3, #1
 8001896:	069b      	lsls	r3, r3, #26
 8001898:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x600>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0e9b      	lsrs	r3, r3, #26
 80018ae:	3301      	adds	r3, #1
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	2101      	movs	r1, #1
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	e017      	b.n	80018ec <HAL_ADC_ConfigChannel+0x630>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	61fb      	str	r3, [r7, #28]
  return result;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80018d4:	2320      	movs	r3, #32
 80018d6:	e003      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	f003 031f 	and.w	r3, r3, #31
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	ea42 0103 	orr.w	r1, r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10d      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x65c>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0e9b      	lsrs	r3, r3, #26
 8001902:	3301      	adds	r3, #1
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	3b1e      	subs	r3, #30
 8001910:	051b      	lsls	r3, r3, #20
 8001912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001916:	e01d      	b.n	8001954 <HAL_ADC_ConfigChannel+0x698>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	613b      	str	r3, [r7, #16]
  return result;
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001930:	2320      	movs	r3, #32
 8001932:	e005      	b.n	8001940 <HAL_ADC_ConfigChannel+0x684>
 8001934:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	3301      	adds	r3, #1
 8001942:	f003 021f 	and.w	r2, r3, #31
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	3b1e      	subs	r3, #30
 800194e:	051b      	lsls	r3, r3, #20
 8001950:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001954:	430b      	orrs	r3, r1
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	6892      	ldr	r2, [r2, #8]
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f9f9 	bl	8000d52 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <HAL_ADC_ConfigChannel+0x79c>)
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d06b      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800196c:	483b      	ldr	r0, [pc, #236]	; (8001a5c <HAL_ADC_ConfigChannel+0x7a0>)
 800196e:	f7ff f961 	bl	8000c34 <LL_ADC_GetCommonPathInternalCh>
 8001972:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a39      	ldr	r2, [pc, #228]	; (8001a60 <HAL_ADC_ConfigChannel+0x7a4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d126      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001980:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d120      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a34      	ldr	r2, [pc, #208]	; (8001a64 <HAL_ADC_ConfigChannel+0x7a8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d156      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800199a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800199e:	4619      	mov	r1, r3
 80019a0:	482e      	ldr	r0, [pc, #184]	; (8001a5c <HAL_ADC_ConfigChannel+0x7a0>)
 80019a2:	f7ff f934 	bl	8000c0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_ADC_ConfigChannel+0x7ac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	4a2f      	ldr	r2, [pc, #188]	; (8001a6c <HAL_ADC_ConfigChannel+0x7b0>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	099a      	lsrs	r2, r3, #6
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019be:	e002      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f9      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019cc:	e03a      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <HAL_ADC_ConfigChannel+0x7b4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d113      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x744>
 80019d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10d      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <HAL_ADC_ConfigChannel+0x7a8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d12a      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f6:	4619      	mov	r1, r3
 80019f8:	4818      	ldr	r0, [pc, #96]	; (8001a5c <HAL_ADC_ConfigChannel+0x7a0>)
 80019fa:	f7ff f908 	bl	8000c0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019fe:	e021      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_ADC_ConfigChannel+0x7b8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d11c      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d116      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <HAL_ADC_ConfigChannel+0x7a8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d111      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <HAL_ADC_ConfigChannel+0x7a0>)
 8001a2c:	f7ff f8ef 	bl	8000c0e <LL_ADC_SetCommonPathInternalCh>
 8001a30:	e008      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	f043 0220 	orr.w	r2, r3, #32
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	37d8      	adds	r7, #216	; 0xd8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	80080000 	.word	0x80080000
 8001a5c:	50040300 	.word	0x50040300
 8001a60:	c7520000 	.word	0xc7520000
 8001a64:	50040000 	.word	0x50040000
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	053e2d63 	.word	0x053e2d63
 8001a70:	cb840000 	.word	0xcb840000
 8001a74:	80000001 	.word	0x80000001

08001a78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fa15 	bl	8000eb4 <LL_ADC_IsEnabled>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d146      	bne.n	8001b1e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <ADC_Enable+0xb0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00d      	beq.n	8001aba <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa2:	f043 0210 	orr.w	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e032      	b.n	8001b20 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f9e4 	bl	8000e8c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f862 	bl	8000b8c <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001aca:	e021      	b.n	8001b10 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f9ef 	bl	8000eb4 <LL_ADC_IsEnabled>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d104      	bne.n	8001ae6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f9d3 	bl	8000e8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ae6:	f7ff f851 	bl	8000b8c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d90d      	bls.n	8001b10 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	f043 0210 	orr.w	r2, r3, #16
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e007      	b.n	8001b20 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d1d6      	bne.n	8001acc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	8000003f 	.word	0x8000003f

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	; (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	; (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff8e 	bl	8001bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff29 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff3e 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff8e 	bl	8001c20 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5d 	bl	8001bcc <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff31 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e098      	b.n	8001e94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <HAL_DMA_Init+0x150>)
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d80f      	bhi.n	8001d8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <HAL_DMA_Init+0x154>)
 8001d76:	4413      	add	r3, r2
 8001d78:	4a4b      	ldr	r2, [pc, #300]	; (8001ea8 <HAL_DMA_Init+0x158>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	009a      	lsls	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_DMA_Init+0x15c>)
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d8c:	e00e      	b.n	8001dac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_DMA_Init+0x160>)
 8001d96:	4413      	add	r3, r2
 8001d98:	4a43      	ldr	r2, [pc, #268]	; (8001ea8 <HAL_DMA_Init+0x158>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	009a      	lsls	r2, r3, #2
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a42      	ldr	r2, [pc, #264]	; (8001eb4 <HAL_DMA_Init+0x164>)
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e06:	d039      	beq.n	8001e7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a27      	ldr	r2, [pc, #156]	; (8001eac <HAL_DMA_Init+0x15c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d11a      	bne.n	8001e48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e12:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_DMA_Init+0x168>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f003 031c 	and.w	r3, r3, #28
 8001e1e:	210f      	movs	r1, #15
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4924      	ldr	r1, [pc, #144]	; (8001eb8 <HAL_DMA_Init+0x168>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e2c:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <HAL_DMA_Init+0x168>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	f003 031c 	and.w	r3, r3, #28
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	491d      	ldr	r1, [pc, #116]	; (8001eb8 <HAL_DMA_Init+0x168>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
 8001e46:	e019      	b.n	8001e7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <HAL_DMA_Init+0x16c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	f003 031c 	and.w	r3, r3, #28
 8001e54:	210f      	movs	r1, #15
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	4917      	ldr	r1, [pc, #92]	; (8001ebc <HAL_DMA_Init+0x16c>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_DMA_Init+0x16c>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f003 031c 	and.w	r3, r3, #28
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	4911      	ldr	r1, [pc, #68]	; (8001ebc <HAL_DMA_Init+0x16c>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40020407 	.word	0x40020407
 8001ea4:	bffdfff8 	.word	0xbffdfff8
 8001ea8:	cccccccd 	.word	0xcccccccd
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	bffdfbf8 	.word	0xbffdfbf8
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	400200a8 	.word	0x400200a8
 8001ebc:	400204a8 	.word	0x400204a8

08001ec0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	f003 031c 	and.w	r3, r3, #28
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d026      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x7a>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d021      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0204 	bic.w	r2, r2, #4
 8001f12:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	f003 021c 	and.w	r2, r3, #28
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	2104      	movs	r1, #4
 8001f22:	fa01 f202 	lsl.w	r2, r1, r2
 8001f26:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d071      	beq.n	8002014 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001f38:	e06c      	b.n	8002014 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f003 031c 	and.w	r3, r3, #28
 8001f42:	2202      	movs	r2, #2
 8001f44:	409a      	lsls	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d02e      	beq.n	8001fac <HAL_DMA_IRQHandler+0xec>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d029      	beq.n	8001fac <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10b      	bne.n	8001f7e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 020a 	bic.w	r2, r2, #10
 8001f74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f003 021c 	and.w	r2, r3, #28
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d038      	beq.n	8002014 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001faa:	e033      	b.n	8002014 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	f003 031c 	and.w	r3, r3, #28
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d02a      	beq.n	8002016 <HAL_DMA_IRQHandler+0x156>
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d025      	beq.n	8002016 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 020e 	bic.w	r2, r2, #14
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f003 021c 	and.w	r2, r3, #28
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002014:	bf00      	nop
 8002016:	bf00      	nop
}
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	e148      	b.n	80022c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 813a 	beq.w	80022bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d00b      	beq.n	8002068 <HAL_GPIO_Init+0x48>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d007      	beq.n	8002068 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800205c:	2b11      	cmp	r3, #17
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b12      	cmp	r3, #18
 8002066:	d130      	bne.n	80020ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800209e:	2201      	movs	r2, #1
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f003 0201 	and.w	r2, r3, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0xea>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b12      	cmp	r3, #18
 8002108:	d123      	bne.n	8002152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	08da      	lsrs	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3208      	adds	r2, #8
 800214c:	6939      	ldr	r1, [r7, #16]
 800214e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0203 	and.w	r2, r3, #3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8094 	beq.w	80022bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002194:	4b52      	ldr	r3, [pc, #328]	; (80022e0 <HAL_GPIO_Init+0x2c0>)
 8002196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002198:	4a51      	ldr	r2, [pc, #324]	; (80022e0 <HAL_GPIO_Init+0x2c0>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6613      	str	r3, [r2, #96]	; 0x60
 80021a0:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <HAL_GPIO_Init+0x2c0>)
 80021a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021ac:	4a4d      	ldr	r2, [pc, #308]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021d6:	d00d      	beq.n	80021f4 <HAL_GPIO_Init+0x1d4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a43      	ldr	r2, [pc, #268]	; (80022e8 <HAL_GPIO_Init+0x2c8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d007      	beq.n	80021f0 <HAL_GPIO_Init+0x1d0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a42      	ldr	r2, [pc, #264]	; (80022ec <HAL_GPIO_Init+0x2cc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_GPIO_Init+0x1cc>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e004      	b.n	80021f6 <HAL_GPIO_Init+0x1d6>
 80021ec:	2307      	movs	r3, #7
 80021ee:	e002      	b.n	80021f6 <HAL_GPIO_Init+0x1d6>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_GPIO_Init+0x1d6>
 80021f4:	2300      	movs	r3, #0
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	f002 0203 	and.w	r2, r2, #3
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	4093      	lsls	r3, r2
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002206:	4937      	ldr	r1, [pc, #220]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002238:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800223e:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002262:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800228c:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f aeaf 	bne.w	8002030 <HAL_GPIO_Init+0x10>
  }
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40010000 	.word	0x40010000
 80022e8:	48000400 	.word	0x48000400
 80022ec:	48000800 	.word	0x48000800
 80022f0:	40010400 	.word	0x40010400

080022f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_PWREx_GetVoltageRange+0x18>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000

08002310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800231e:	d130      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232c:	d038      	beq.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002336:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2232      	movs	r2, #50	; 0x32
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0c9b      	lsrs	r3, r3, #18
 8002350:	3301      	adds	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002354:	e002      	b.n	800235c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3b01      	subs	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002368:	d102      	bne.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x60>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f2      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237c:	d110      	bne.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e00f      	b.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d007      	beq.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002398:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40007000 	.word	0x40007000
 80023b4:	20000000 	.word	0x20000000
 80023b8:	431bde83 	.word	0x431bde83

080023bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f000 bc11 	b.w	8002bf2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d0:	4ba0      	ldr	r3, [pc, #640]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023da:	4b9e      	ldr	r3, [pc, #632]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80e4 	beq.w	80025ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_RCC_OscConfig+0x4c>
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	f040 808b 	bne.w	8002516 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b01      	cmp	r3, #1
 8002404:	f040 8087 	bne.w	8002516 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002408:	4b92      	ldr	r3, [pc, #584]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_OscConfig+0x64>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e3e8      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_RCC_OscConfig+0x7e>
 8002430:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002438:	e005      	b.n	8002446 <HAL_RCC_OscConfig+0x8a>
 800243a:	4b86      	ldr	r3, [pc, #536]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800243c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002446:	4293      	cmp	r3, r2
 8002448:	d223      	bcs.n	8002492 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fd78 	bl	8002f44 <RCC_SetFlashLatencyFromMSIRange>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e3c9      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245e:	4b7d      	ldr	r3, [pc, #500]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a7c      	ldr	r2, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b7a      	ldr	r3, [pc, #488]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4977      	ldr	r1, [pc, #476]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247c:	4b75      	ldr	r3, [pc, #468]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	4972      	ldr	r1, [pc, #456]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
 8002490:	e025      	b.n	80024de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002492:	4b70      	ldr	r3, [pc, #448]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6f      	ldr	r2, [pc, #444]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b6d      	ldr	r3, [pc, #436]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	496a      	ldr	r1, [pc, #424]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	4965      	ldr	r1, [pc, #404]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fd38 	bl	8002f44 <RCC_SetFlashLatencyFromMSIRange>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e389      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024de:	f000 fc6f 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 80024e2:	4601      	mov	r1, r0
 80024e4:	4b5b      	ldr	r3, [pc, #364]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	4a5a      	ldr	r2, [pc, #360]	; (8002658 <HAL_RCC_OscConfig+0x29c>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	fa21 f303 	lsr.w	r3, r1, r3
 80024fa:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_RCC_OscConfig+0x2a0>)
 80024fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024fe:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_RCC_OscConfig+0x2a4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe faf2 	bl	8000aec <HAL_InitTick>
 8002508:	4603      	mov	r3, r0
 800250a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d052      	beq.n	80025b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	e36d      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d032      	beq.n	8002584 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800251e:	4b4d      	ldr	r3, [pc, #308]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a4c      	ldr	r2, [pc, #304]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800252a:	f7fe fb2f 	bl	8000b8c <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002532:	f7fe fb2b 	bl	8000b8c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e356      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002544:	4b43      	ldr	r3, [pc, #268]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002550:	4b40      	ldr	r3, [pc, #256]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a3f      	ldr	r2, [pc, #252]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	493a      	ldr	r1, [pc, #232]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256e:	4b39      	ldr	r3, [pc, #228]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	4935      	ldr	r1, [pc, #212]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
 8002582:	e01a      	b.n	80025ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002584:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a32      	ldr	r2, [pc, #200]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002590:	f7fe fafc 	bl	8000b8c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002598:	f7fe faf8 	bl	8000b8c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e323      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x1dc>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d073      	beq.n	80026ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_OscConfig+0x21c>
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b0c      	cmp	r3, #12
 80025d0:	d10e      	bne.n	80025f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d063      	beq.n	80026ac <HAL_RCC_OscConfig+0x2f0>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d15f      	bne.n	80026ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e300      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d106      	bne.n	8002608 <HAL_RCC_OscConfig+0x24c>
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e01d      	b.n	8002644 <HAL_RCC_OscConfig+0x288>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x270>
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e00b      	b.n	8002644 <HAL_RCC_OscConfig+0x288>
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a05      	ldr	r2, [pc, #20]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800263e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fa9e 	bl	8000b8c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002652:	e010      	b.n	8002676 <HAL_RCC_OscConfig+0x2ba>
 8002654:	40021000 	.word	0x40021000
 8002658:	08003fa8 	.word	0x08003fa8
 800265c:	20000000 	.word	0x20000000
 8002660:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe fa92 	bl	8000b8c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e2bd      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002676:	4baf      	ldr	r3, [pc, #700]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x2a8>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fa82 	bl	8000b8c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fa7e 	bl	8000b8c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e2a9      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800269e:	4ba5      	ldr	r3, [pc, #660]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x2d0>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d060      	beq.n	800277c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d005      	beq.n	80026cc <HAL_RCC_OscConfig+0x310>
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d119      	bne.n	80026fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d116      	bne.n	80026fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026cc:	4b99      	ldr	r3, [pc, #612]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_OscConfig+0x328>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e286      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b93      	ldr	r3, [pc, #588]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	4990      	ldr	r1, [pc, #576]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f8:	e040      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d023      	beq.n	800274a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002702:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a8b      	ldr	r2, [pc, #556]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe fa3d 	bl	8000b8c <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002716:	f7fe fa39 	bl	8000b8c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e264      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002728:	4b82      	ldr	r3, [pc, #520]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b7f      	ldr	r3, [pc, #508]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	497c      	ldr	r1, [pc, #496]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
 8002748:	e018      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274a:	4b7a      	ldr	r3, [pc, #488]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a79      	ldr	r2, [pc, #484]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fa19 	bl	8000b8c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275e:	f7fe fa15 	bl	8000b8c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e240      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002770:	4b70      	ldr	r3, [pc, #448]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03c      	beq.n	8002802 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01c      	beq.n	80027ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002790:	4b68      	ldr	r3, [pc, #416]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002796:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe f9f4 	bl	8000b8c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a8:	f7fe f9f0 	bl	8000b8c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e21b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ba:	4b5e      	ldr	r3, [pc, #376]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80027bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ef      	beq.n	80027a8 <HAL_RCC_OscConfig+0x3ec>
 80027c8:	e01b      	b.n	8002802 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ca:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80027cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7fe f9d7 	bl	8000b8c <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e2:	f7fe f9d3 	bl	8000b8c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1fe      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f4:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80027f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ef      	bne.n	80027e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80a6 	beq.w	800295c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002814:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10d      	bne.n	800283c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	4b44      	ldr	r3, [pc, #272]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	4a43      	ldr	r2, [pc, #268]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282a:	6593      	str	r3, [r2, #88]	; 0x58
 800282c:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002838:	2301      	movs	r3, #1
 800283a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283c:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_RCC_OscConfig+0x57c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d118      	bne.n	800287a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCC_OscConfig+0x57c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3a      	ldr	r2, [pc, #232]	; (8002938 <HAL_RCC_OscConfig+0x57c>)
 800284e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002852:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002854:	f7fe f99a 	bl	8000b8c <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285c:	f7fe f996 	bl	8000b8c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1c1      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <HAL_RCC_OscConfig+0x57c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d108      	bne.n	8002894 <HAL_RCC_OscConfig+0x4d8>
 8002882:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	4a2a      	ldr	r2, [pc, #168]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002892:	e024      	b.n	80028de <HAL_RCC_OscConfig+0x522>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d110      	bne.n	80028be <HAL_RCC_OscConfig+0x502>
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	4a24      	ldr	r2, [pc, #144]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ac:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	4a20      	ldr	r2, [pc, #128]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028bc:	e00f      	b.n	80028de <HAL_RCC_OscConfig+0x522>
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ce:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	4a17      	ldr	r2, [pc, #92]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028d6:	f023 0304 	bic.w	r3, r3, #4
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d016      	beq.n	8002914 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e6:	f7fe f951 	bl	8000b8c <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7fe f94d 	bl	8000b8c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e176      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0ed      	beq.n	80028ee <HAL_RCC_OscConfig+0x532>
 8002912:	e01a      	b.n	800294a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe f93a 	bl	8000b8c <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800291a:	e00f      	b.n	800293c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe f936 	bl	8000b8c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d906      	bls.n	800293c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e15f      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800293c:	4baa      	ldr	r3, [pc, #680]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e8      	bne.n	800291c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294a:	7ffb      	ldrb	r3, [r7, #31]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4ba5      	ldr	r3, [pc, #660]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	4aa4      	ldr	r2, [pc, #656]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d03c      	beq.n	80029e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01c      	beq.n	80029aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002970:	4b9d      	ldr	r3, [pc, #628]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002976:	4a9c      	ldr	r2, [pc, #624]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe f904 	bl	8000b8c <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002988:	f7fe f900 	bl	8000b8c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e12b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800299a:	4b93      	ldr	r3, [pc, #588]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 800299c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ef      	beq.n	8002988 <HAL_RCC_OscConfig+0x5cc>
 80029a8:	e01b      	b.n	80029e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029aa:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 80029ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029b0:	4a8d      	ldr	r2, [pc, #564]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe f8e7 	bl	8000b8c <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c2:	f7fe f8e3 	bl	8000b8c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e10e      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029d4:	4b84      	ldr	r3, [pc, #528]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 80029d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ef      	bne.n	80029c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8102 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	f040 80c5 	bne.w	8002b80 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029f6:	4b7c      	ldr	r3, [pc, #496]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0203 	and.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d12c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	3b01      	subs	r3, #1
 8002a16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d123      	bne.n	8002a64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d11b      	bne.n	8002a64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d113      	bne.n	8002a64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d109      	bne.n	8002a64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d067      	beq.n	8002b34 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	d062      	beq.n	8002b30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a6a:	4b5f      	ldr	r3, [pc, #380]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0bb      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a5a      	ldr	r2, [pc, #360]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a86:	f7fe f881 	bl	8000b8c <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe f87d 	bl	8000b8c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0a8      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa0:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aac:	4b4e      	ldr	r3, [pc, #312]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	4b4e      	ldr	r3, [pc, #312]	; (8002bec <HAL_RCC_OscConfig+0x830>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002abc:	3a01      	subs	r2, #1
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	4311      	orrs	r1, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ac6:	0212      	lsls	r2, r2, #8
 8002ac8:	4311      	orrs	r1, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0552      	lsls	r2, r2, #21
 8002ad4:	4311      	orrs	r1, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ada:	0852      	lsrs	r2, r2, #1
 8002adc:	3a01      	subs	r2, #1
 8002ade:	0652      	lsls	r2, r2, #25
 8002ae0:	4311      	orrs	r1, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae6:	06d2      	lsls	r2, r2, #27
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	493f      	ldr	r1, [pc, #252]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002af0:	4b3d      	ldr	r3, [pc, #244]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002afc:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4a39      	ldr	r2, [pc, #228]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b08:	f7fe f840 	bl	8000b8c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe f83c 	bl	8000b8c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e067      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2e:	e05f      	b.n	8002bf0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e05e      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b34:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d157      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a28      	ldr	r2, [pc, #160]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b58:	f7fe f818 	bl	8000b8c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe f814 	bl	8000b8c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e03f      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x7a4>
 8002b7e:	e037      	b.n	8002bf0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d02d      	beq.n	8002be2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b90:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002ba4:	f023 0303 	bic.w	r3, r3, #3
 8002ba8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002bb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fd ffe7 	bl	8000b8c <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc2:	f7fd ffe3 	bl	8000b8c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e00e      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <HAL_RCC_OscConfig+0x82c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x806>
 8002be0:	e006      	b.n	8002bf0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e005      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop

08002bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0c8      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b66      	ldr	r3, [pc, #408]	; (8002dac <HAL_RCC_ClockConfig+0x1b0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d910      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b63      	ldr	r3, [pc, #396]	; (8002dac <HAL_RCC_ClockConfig+0x1b0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 0207 	bic.w	r2, r3, #7
 8002c26:	4961      	ldr	r1, [pc, #388]	; (8002dac <HAL_RCC_ClockConfig+0x1b0>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <HAL_RCC_ClockConfig+0x1b0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b0      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d04c      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d107      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c54:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d121      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e09e      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6c:	4b50      	ldr	r3, [pc, #320]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d115      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e092      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c84:	4b4a      	ldr	r3, [pc, #296]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e086      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c94:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e07e      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ca4:	4b42      	ldr	r3, [pc, #264]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 0203 	bic.w	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	493f      	ldr	r1, [pc, #252]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb6:	f7fd ff69 	bl	8000b8c <HAL_GetTick>
 8002cba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbe:	f7fd ff65 	bl	8000b8c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e066      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd4:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 020c 	and.w	r2, r3, #12
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d1eb      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	492c      	ldr	r1, [pc, #176]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b29      	ldr	r3, [pc, #164]	; (8002dac <HAL_RCC_ClockConfig+0x1b0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d210      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b26      	ldr	r3, [pc, #152]	; (8002dac <HAL_RCC_ClockConfig+0x1b0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4924      	ldr	r1, [pc, #144]	; (8002dac <HAL_RCC_ClockConfig+0x1b0>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <HAL_RCC_ClockConfig+0x1b0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e036      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4918      	ldr	r1, [pc, #96]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4910      	ldr	r1, [pc, #64]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d72:	f000 f825 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002d76:	4601      	mov	r1, r0
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_RCC_ClockConfig+0x1b4>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	5cd3      	ldrb	r3, [r2, r3]
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fea8 	bl	8000aec <HAL_InitTick>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002da0:	7afb      	ldrb	r3, [r7, #11]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40021000 	.word	0x40021000
 8002db4:	08003fa8 	.word	0x08003fa8
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x34>
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d121      	bne.n	8002e32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d11e      	bne.n	8002e32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002df4:	4b33      	ldr	r3, [pc, #204]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e00:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e005      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e10:	4b2c      	ldr	r3, [pc, #176]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e1c:	4a2a      	ldr	r2, [pc, #168]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10d      	bne.n	8002e48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d102      	bne.n	8002e3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e004      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e44:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	d133      	bne.n	8002eb6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0xa4>
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0xaa>
 8002e62:	e005      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e66:	617b      	str	r3, [r7, #20]
      break;
 8002e68:	e005      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e6c:	617b      	str	r3, [r7, #20]
      break;
 8002e6e:	e002      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	617b      	str	r3, [r7, #20]
      break;
 8002e74:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	3301      	adds	r3, #1
 8002e82:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	fb02 f203 	mul.w	r2, r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0e5b      	lsrs	r3, r3, #25
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3724      	adds	r7, #36	; 0x24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	08003fc0 	.word	0x08003fc0
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000000 	.word	0x20000000

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08003fb8 	.word	0x08003fb8

08002f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f1c:	f7ff ffda 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f20:	4601      	mov	r1, r0
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0adb      	lsrs	r3, r3, #11
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f2e:	5cd3      	ldrb	r3, [r2, r3]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	08003fb8 	.word	0x08003fb8

08002f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f50:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f5c:	f7ff f9ca 	bl	80022f4 <HAL_PWREx_GetVoltageRange>
 8002f60:	6178      	str	r0, [r7, #20]
 8002f62:	e014      	b.n	8002f8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	4a24      	ldr	r2, [pc, #144]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f70:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f7c:	f7ff f9ba 	bl	80022f4 <HAL_PWREx_GetVoltageRange>
 8002f80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f82:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f94:	d10b      	bne.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d919      	bls.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2ba0      	cmp	r3, #160	; 0xa0
 8002fa0:	d902      	bls.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	e013      	b.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa8:	2301      	movs	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	e010      	b.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b80      	cmp	r3, #128	; 0x80
 8002fb2:	d902      	bls.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e00a      	b.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b80      	cmp	r3, #128	; 0x80
 8002fbe:	d102      	bne.n	8002fc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	e004      	b.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b70      	cmp	r3, #112	; 0x70
 8002fca:	d101      	bne.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fcc:	2301      	movs	r3, #1
 8002fce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 0207 	bic.w	r2, r3, #7
 8002fd8:	4909      	ldr	r1, [pc, #36]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d001      	beq.n	8002ff2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40022000 	.word	0x40022000

08003004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800300c:	2300      	movs	r3, #0
 800300e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003010:	2300      	movs	r3, #0
 8003012:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02f      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003028:	d005      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800302a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800302e:	d015      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003034:	e00f      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003036:	4bac      	ldr	r3, [pc, #688]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4aab      	ldr	r2, [pc, #684]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003042:	e00c      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f9cc 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003054:	e003      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	74fb      	strb	r3, [r7, #19]
      break;
 800305a:	e000      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800305c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003064:	4ba0      	ldr	r3, [pc, #640]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	499d      	ldr	r1, [pc, #628]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800307a:	e001      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8099 	beq.w	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003092:	4b95      	ldr	r3, [pc, #596]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a8:	4b8f      	ldr	r3, [pc, #572]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	4a8e      	ldr	r2, [pc, #568]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6593      	str	r3, [r2, #88]	; 0x58
 80030b4:	4b8c      	ldr	r3, [pc, #560]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c0:	2301      	movs	r3, #1
 80030c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c4:	4b89      	ldr	r3, [pc, #548]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a88      	ldr	r2, [pc, #544]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d0:	f7fd fd5c 	bl	8000b8c <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030d6:	e009      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d8:	f7fd fd58 	bl	8000b8c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d902      	bls.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ea:	e005      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030ec:	4b7f      	ldr	r3, [pc, #508]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ef      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d155      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030fe:	4b7a      	ldr	r3, [pc, #488]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003108:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01e      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	429a      	cmp	r2, r3
 8003118:	d019      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800311a:	4b73      	ldr	r3, [pc, #460]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003124:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003126:	4b70      	ldr	r3, [pc, #448]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	4a6e      	ldr	r2, [pc, #440]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003136:	4b6c      	ldr	r3, [pc, #432]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	4a6a      	ldr	r2, [pc, #424]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003146:	4a68      	ldr	r2, [pc, #416]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d016      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fd fd18 	bl	8000b8c <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315e:	e00b      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7fd fd14 	bl	8000b8c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d902      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	74fb      	strb	r3, [r7, #19]
            break;
 8003176:	e006      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003178:	4b5b      	ldr	r3, [pc, #364]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0ec      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003186:	7cfb      	ldrb	r3, [r7, #19]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800318c:	4b56      	ldr	r3, [pc, #344]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319a:	4953      	ldr	r1, [pc, #332]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031a2:	e004      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	74bb      	strb	r3, [r7, #18]
 80031a8:	e001      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ae:	7c7b      	ldrb	r3, [r7, #17]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b4:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	4a4b      	ldr	r2, [pc, #300]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031cc:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4943      	ldr	r1, [pc, #268]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f023 020c 	bic.w	r2, r3, #12
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	493a      	ldr	r1, [pc, #232]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	4932      	ldr	r1, [pc, #200]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	4929      	ldr	r1, [pc, #164]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	4921      	ldr	r1, [pc, #132]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4918      	ldr	r1, [pc, #96]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4910      	ldr	r1, [pc, #64]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d02c      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	4907      	ldr	r1, [pc, #28]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d8:	d10a      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032da:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4a02      	ldr	r2, [pc, #8]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032e4:	60d3      	str	r3, [r2, #12]
 80032e6:	e015      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032f8:	d10c      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f871 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d028      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003320:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	492d      	ldr	r1, [pc, #180]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800333e:	d106      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003340:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a27      	ldr	r2, [pc, #156]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334a:	60d3      	str	r3, [r2, #12]
 800334c:	e011      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003356:	d10c      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	2101      	movs	r1, #1
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f842 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01c      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800337e:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338c:	4915      	ldr	r1, [pc, #84]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	2102      	movs	r1, #2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 f81f 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ae:	7cfb      	ldrb	r3, [r7, #19]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d2:	4904      	ldr	r1, [pc, #16]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033da:	7cbb      	ldrb	r3, [r7, #18]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000

080033e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033f6:	4b73      	ldr	r3, [pc, #460]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d018      	beq.n	8003434 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003402:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d10d      	bne.n	800342e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
       ||
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
       ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d044      	beq.n	80034b8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e041      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d00c      	beq.n	8003456 <RCCEx_PLLSAI1_Config+0x6e>
 800343c:	2b03      	cmp	r3, #3
 800343e:	d013      	beq.n	8003468 <RCCEx_PLLSAI1_Config+0x80>
 8003440:	2b01      	cmp	r3, #1
 8003442:	d120      	bne.n	8003486 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003444:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d11d      	bne.n	800348c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003454:	e01a      	b.n	800348c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003456:	4b5b      	ldr	r3, [pc, #364]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003466:	e013      	b.n	8003490 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003468:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10f      	bne.n	8003494 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003474:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d109      	bne.n	8003494 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003484:	e006      	b.n	8003494 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
      break;
 800348a:	e004      	b.n	8003496 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800348c:	bf00      	nop
 800348e:	e002      	b.n	8003496 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003494:	bf00      	nop
    }

    if(status == HAL_OK)
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10d      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800349c:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	430b      	orrs	r3, r1
 80034b2:	4944      	ldr	r1, [pc, #272]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d17c      	bne.n	80035b8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a40      	ldr	r2, [pc, #256]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ca:	f7fd fb5f 	bl	8000b8c <HAL_GetTick>
 80034ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d0:	e009      	b.n	80034e6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034d2:	f7fd fb5b 	bl	8000b8c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d902      	bls.n	80034e6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	73fb      	strb	r3, [r7, #15]
        break;
 80034e4:	e005      	b.n	80034f2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1ef      	bne.n	80034d2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d15f      	bne.n	80035b8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d110      	bne.n	8003520 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034fe:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003506:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6892      	ldr	r2, [r2, #8]
 800350e:	0211      	lsls	r1, r2, #8
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68d2      	ldr	r2, [r2, #12]
 8003514:	06d2      	lsls	r2, r2, #27
 8003516:	430a      	orrs	r2, r1
 8003518:	492a      	ldr	r1, [pc, #168]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	610b      	str	r3, [r1, #16]
 800351e:	e027      	b.n	8003570 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d112      	bne.n	800354c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003526:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800352e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6892      	ldr	r2, [r2, #8]
 8003536:	0211      	lsls	r1, r2, #8
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6912      	ldr	r2, [r2, #16]
 800353c:	0852      	lsrs	r2, r2, #1
 800353e:	3a01      	subs	r2, #1
 8003540:	0552      	lsls	r2, r2, #21
 8003542:	430a      	orrs	r2, r1
 8003544:	491f      	ldr	r1, [pc, #124]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	610b      	str	r3, [r1, #16]
 800354a:	e011      	b.n	8003570 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800354c:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6892      	ldr	r2, [r2, #8]
 800355c:	0211      	lsls	r1, r2, #8
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6952      	ldr	r2, [r2, #20]
 8003562:	0852      	lsrs	r2, r2, #1
 8003564:	3a01      	subs	r2, #1
 8003566:	0652      	lsls	r2, r2, #25
 8003568:	430a      	orrs	r2, r1
 800356a:	4916      	ldr	r1, [pc, #88]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800356c:	4313      	orrs	r3, r2
 800356e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a13      	ldr	r2, [pc, #76]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003576:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800357a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fd fb06 	bl	8000b8c <HAL_GetTick>
 8003580:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003582:	e009      	b.n	8003598 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003584:	f7fd fb02 	bl	8000b8c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	73fb      	strb	r3, [r7, #15]
          break;
 8003596:	e005      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ef      	beq.n	8003584 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	4904      	ldr	r1, [pc, #16]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000

080035c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e040      	b.n	800365c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd f990 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	; 0x24
 80035f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8c0 	bl	800378c <UART_SetConfig>
 800360c:	4603      	mov	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e022      	b.n	800365c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fac4 	bl	8003bac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fb4b 	bl	8003cf0 <UART_CheckIdleState>
 800365a:	4603      	mov	r3, r0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003678:	2b20      	cmp	r3, #32
 800367a:	f040 8081 	bne.w	8003780 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_UART_Transmit+0x26>
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e079      	b.n	8003782 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_UART_Transmit+0x38>
 8003698:	2302      	movs	r3, #2
 800369a:	e072      	b.n	8003782 <HAL_UART_Transmit+0x11e>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2221      	movs	r2, #33	; 0x21
 80036ae:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80036b0:	f7fd fa6c 	bl	8000b8c <HAL_GetTick>
 80036b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	88fa      	ldrh	r2, [r7, #6]
 80036ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	88fa      	ldrh	r2, [r7, #6]
 80036c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ce:	d108      	bne.n	80036e2 <HAL_UART_Transmit+0x7e>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d104      	bne.n	80036e2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	e003      	b.n	80036ea <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80036f2:	e02d      	b.n	8003750 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2200      	movs	r2, #0
 80036fc:	2180      	movs	r1, #128	; 0x80
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fb3b 	bl	8003d7a <UART_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e039      	b.n	8003782 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003720:	b292      	uxth	r2, r2
 8003722:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	3302      	adds	r3, #2
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e008      	b.n	800373e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	b292      	uxth	r2, r2
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	3301      	adds	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1cb      	bne.n	80036f4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2200      	movs	r2, #0
 8003764:	2140      	movs	r1, #64	; 0x40
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fb07 	bl	8003d7a <UART_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e005      	b.n	8003782 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800378c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003790:	b088      	sub	sp, #32
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4bb0      	ldr	r3, [pc, #704]	; (8003a7c <UART_SetConfig+0x2f0>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	69f9      	ldr	r1, [r7, #28]
 80037c2:	430b      	orrs	r3, r1
 80037c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4aa6      	ldr	r2, [pc, #664]	; (8003a80 <UART_SetConfig+0x2f4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a9d      	ldr	r2, [pc, #628]	; (8003a84 <UART_SetConfig+0x2f8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d121      	bne.n	8003858 <UART_SetConfig+0xcc>
 8003814:	4b9c      	ldr	r3, [pc, #624]	; (8003a88 <UART_SetConfig+0x2fc>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b03      	cmp	r3, #3
 8003820:	d816      	bhi.n	8003850 <UART_SetConfig+0xc4>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <UART_SetConfig+0x9c>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	08003839 	.word	0x08003839
 800382c:	08003845 	.word	0x08003845
 8003830:	0800383f 	.word	0x0800383f
 8003834:	0800384b 	.word	0x0800384b
 8003838:	2301      	movs	r3, #1
 800383a:	76fb      	strb	r3, [r7, #27]
 800383c:	e072      	b.n	8003924 <UART_SetConfig+0x198>
 800383e:	2302      	movs	r3, #2
 8003840:	76fb      	strb	r3, [r7, #27]
 8003842:	e06f      	b.n	8003924 <UART_SetConfig+0x198>
 8003844:	2304      	movs	r3, #4
 8003846:	76fb      	strb	r3, [r7, #27]
 8003848:	e06c      	b.n	8003924 <UART_SetConfig+0x198>
 800384a:	2308      	movs	r3, #8
 800384c:	76fb      	strb	r3, [r7, #27]
 800384e:	e069      	b.n	8003924 <UART_SetConfig+0x198>
 8003850:	2310      	movs	r3, #16
 8003852:	76fb      	strb	r3, [r7, #27]
 8003854:	bf00      	nop
 8003856:	e065      	b.n	8003924 <UART_SetConfig+0x198>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a8b      	ldr	r2, [pc, #556]	; (8003a8c <UART_SetConfig+0x300>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d134      	bne.n	80038cc <UART_SetConfig+0x140>
 8003862:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <UART_SetConfig+0x2fc>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b0c      	cmp	r3, #12
 800386e:	d829      	bhi.n	80038c4 <UART_SetConfig+0x138>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0xec>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	080038ad 	.word	0x080038ad
 800387c:	080038c5 	.word	0x080038c5
 8003880:	080038c5 	.word	0x080038c5
 8003884:	080038c5 	.word	0x080038c5
 8003888:	080038b9 	.word	0x080038b9
 800388c:	080038c5 	.word	0x080038c5
 8003890:	080038c5 	.word	0x080038c5
 8003894:	080038c5 	.word	0x080038c5
 8003898:	080038b3 	.word	0x080038b3
 800389c:	080038c5 	.word	0x080038c5
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	080038c5 	.word	0x080038c5
 80038a8:	080038bf 	.word	0x080038bf
 80038ac:	2300      	movs	r3, #0
 80038ae:	76fb      	strb	r3, [r7, #27]
 80038b0:	e038      	b.n	8003924 <UART_SetConfig+0x198>
 80038b2:	2302      	movs	r3, #2
 80038b4:	76fb      	strb	r3, [r7, #27]
 80038b6:	e035      	b.n	8003924 <UART_SetConfig+0x198>
 80038b8:	2304      	movs	r3, #4
 80038ba:	76fb      	strb	r3, [r7, #27]
 80038bc:	e032      	b.n	8003924 <UART_SetConfig+0x198>
 80038be:	2308      	movs	r3, #8
 80038c0:	76fb      	strb	r3, [r7, #27]
 80038c2:	e02f      	b.n	8003924 <UART_SetConfig+0x198>
 80038c4:	2310      	movs	r3, #16
 80038c6:	76fb      	strb	r3, [r7, #27]
 80038c8:	bf00      	nop
 80038ca:	e02b      	b.n	8003924 <UART_SetConfig+0x198>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6b      	ldr	r2, [pc, #428]	; (8003a80 <UART_SetConfig+0x2f4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d124      	bne.n	8003920 <UART_SetConfig+0x194>
 80038d6:	4b6c      	ldr	r3, [pc, #432]	; (8003a88 <UART_SetConfig+0x2fc>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e4:	d012      	beq.n	800390c <UART_SetConfig+0x180>
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ea:	d802      	bhi.n	80038f2 <UART_SetConfig+0x166>
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <UART_SetConfig+0x174>
 80038f0:	e012      	b.n	8003918 <UART_SetConfig+0x18c>
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d006      	beq.n	8003906 <UART_SetConfig+0x17a>
 80038f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038fc:	d009      	beq.n	8003912 <UART_SetConfig+0x186>
 80038fe:	e00b      	b.n	8003918 <UART_SetConfig+0x18c>
 8003900:	2300      	movs	r3, #0
 8003902:	76fb      	strb	r3, [r7, #27]
 8003904:	e00e      	b.n	8003924 <UART_SetConfig+0x198>
 8003906:	2302      	movs	r3, #2
 8003908:	76fb      	strb	r3, [r7, #27]
 800390a:	e00b      	b.n	8003924 <UART_SetConfig+0x198>
 800390c:	2304      	movs	r3, #4
 800390e:	76fb      	strb	r3, [r7, #27]
 8003910:	e008      	b.n	8003924 <UART_SetConfig+0x198>
 8003912:	2308      	movs	r3, #8
 8003914:	76fb      	strb	r3, [r7, #27]
 8003916:	e005      	b.n	8003924 <UART_SetConfig+0x198>
 8003918:	2310      	movs	r3, #16
 800391a:	76fb      	strb	r3, [r7, #27]
 800391c:	bf00      	nop
 800391e:	e001      	b.n	8003924 <UART_SetConfig+0x198>
 8003920:	2310      	movs	r3, #16
 8003922:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a55      	ldr	r2, [pc, #340]	; (8003a80 <UART_SetConfig+0x2f4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d174      	bne.n	8003a18 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800392e:	7efb      	ldrb	r3, [r7, #27]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d824      	bhi.n	800397e <UART_SetConfig+0x1f2>
 8003934:	a201      	add	r2, pc, #4	; (adr r2, 800393c <UART_SetConfig+0x1b0>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003961 	.word	0x08003961
 8003940:	0800397f 	.word	0x0800397f
 8003944:	08003969 	.word	0x08003969
 8003948:	0800397f 	.word	0x0800397f
 800394c:	0800396f 	.word	0x0800396f
 8003950:	0800397f 	.word	0x0800397f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800397f 	.word	0x0800397f
 800395c:	08003977 	.word	0x08003977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7ff fac4 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8003964:	6178      	str	r0, [r7, #20]
        break;
 8003966:	e00f      	b.n	8003988 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003968:	4b49      	ldr	r3, [pc, #292]	; (8003a90 <UART_SetConfig+0x304>)
 800396a:	617b      	str	r3, [r7, #20]
        break;
 800396c:	e00c      	b.n	8003988 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396e:	f7ff fa27 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8003972:	6178      	str	r0, [r7, #20]
        break;
 8003974:	e008      	b.n	8003988 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397a:	617b      	str	r3, [r7, #20]
        break;
 800397c:	e004      	b.n	8003988 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	76bb      	strb	r3, [r7, #26]
        break;
 8003986:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 8100 	beq.w	8003b90 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	429a      	cmp	r2, r3
 800399e:	d305      	bcc.n	80039ac <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d902      	bls.n	80039b2 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	76bb      	strb	r3, [r7, #26]
 80039b0:	e0ee      	b.n	8003b90 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	4619      	mov	r1, r3
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	f04f 0400 	mov.w	r4, #0
 80039c2:	0214      	lsls	r4, r2, #8
 80039c4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80039c8:	020b      	lsls	r3, r1, #8
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6852      	ldr	r2, [r2, #4]
 80039ce:	0852      	lsrs	r2, r2, #1
 80039d0:	4611      	mov	r1, r2
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	eb13 0b01 	adds.w	fp, r3, r1
 80039da:	eb44 0c02 	adc.w	ip, r4, r2
 80039de:	4658      	mov	r0, fp
 80039e0:	4661      	mov	r1, ip
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f04f 0400 	mov.w	r4, #0
 80039ea:	461a      	mov	r2, r3
 80039ec:	4623      	mov	r3, r4
 80039ee:	f7fc fbed 	bl	80001cc <__aeabi_uldivmod>
 80039f2:	4603      	mov	r3, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fe:	d308      	bcc.n	8003a12 <UART_SetConfig+0x286>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a06:	d204      	bcs.n	8003a12 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	e0be      	b.n	8003b90 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	76bb      	strb	r3, [r7, #26]
 8003a16:	e0bb      	b.n	8003b90 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a20:	d169      	bne.n	8003af6 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8003a22:	7efb      	ldrb	r3, [r7, #27]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d835      	bhi.n	8003a94 <UART_SetConfig+0x308>
 8003a28:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <UART_SetConfig+0x2a4>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a55 	.word	0x08003a55
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a65 	.word	0x08003a65
 8003a3c:	08003a95 	.word	0x08003a95
 8003a40:	08003a6b 	.word	0x08003a6b
 8003a44:	08003a95 	.word	0x08003a95
 8003a48:	08003a95 	.word	0x08003a95
 8003a4c:	08003a95 	.word	0x08003a95
 8003a50:	08003a73 	.word	0x08003a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a54:	f7ff fa4a 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8003a58:	6178      	str	r0, [r7, #20]
        break;
 8003a5a:	e020      	b.n	8003a9e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a5c:	f7ff fa5c 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8003a60:	6178      	str	r0, [r7, #20]
        break;
 8003a62:	e01c      	b.n	8003a9e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <UART_SetConfig+0x304>)
 8003a66:	617b      	str	r3, [r7, #20]
        break;
 8003a68:	e019      	b.n	8003a9e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6a:	f7ff f9a9 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8003a6e:	6178      	str	r0, [r7, #20]
        break;
 8003a70:	e015      	b.n	8003a9e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a76:	617b      	str	r3, [r7, #20]
        break;
 8003a78:	e011      	b.n	8003a9e <UART_SetConfig+0x312>
 8003a7a:	bf00      	nop
 8003a7c:	efff69f3 	.word	0xefff69f3
 8003a80:	40008000 	.word	0x40008000
 8003a84:	40013800 	.word	0x40013800
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40004400 	.word	0x40004400
 8003a90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	76bb      	strb	r3, [r7, #26]
        break;
 8003a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d075      	beq.n	8003b90 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	005a      	lsls	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	441a      	add	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b0f      	cmp	r3, #15
 8003ac0:	d916      	bls.n	8003af0 <UART_SetConfig+0x364>
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac8:	d212      	bcs.n	8003af0 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f023 030f 	bic.w	r3, r3, #15
 8003ad2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	89fb      	ldrh	r3, [r7, #14]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	89fa      	ldrh	r2, [r7, #14]
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	e04f      	b.n	8003b90 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	76bb      	strb	r3, [r7, #26]
 8003af4:	e04c      	b.n	8003b90 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003af6:	7efb      	ldrb	r3, [r7, #27]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d828      	bhi.n	8003b4e <UART_SetConfig+0x3c2>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <UART_SetConfig+0x378>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b29 	.word	0x08003b29
 8003b08:	08003b31 	.word	0x08003b31
 8003b0c:	08003b39 	.word	0x08003b39
 8003b10:	08003b4f 	.word	0x08003b4f
 8003b14:	08003b3f 	.word	0x08003b3f
 8003b18:	08003b4f 	.word	0x08003b4f
 8003b1c:	08003b4f 	.word	0x08003b4f
 8003b20:	08003b4f 	.word	0x08003b4f
 8003b24:	08003b47 	.word	0x08003b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b28:	f7ff f9e0 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8003b2c:	6178      	str	r0, [r7, #20]
        break;
 8003b2e:	e013      	b.n	8003b58 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b30:	f7ff f9f2 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8003b34:	6178      	str	r0, [r7, #20]
        break;
 8003b36:	e00f      	b.n	8003b58 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b38:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <UART_SetConfig+0x41c>)
 8003b3a:	617b      	str	r3, [r7, #20]
        break;
 8003b3c:	e00c      	b.n	8003b58 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b3e:	f7ff f93f 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8003b42:	6178      	str	r0, [r7, #20]
        break;
 8003b44:	e008      	b.n	8003b58 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4a:	617b      	str	r3, [r7, #20]
        break;
 8003b4c:	e004      	b.n	8003b58 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	76bb      	strb	r3, [r7, #26]
        break;
 8003b56:	bf00      	nop
    }

    if (pclk != 0U)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d018      	beq.n	8003b90 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	085a      	lsrs	r2, r3, #1
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	441a      	add	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b0f      	cmp	r3, #15
 8003b78:	d908      	bls.n	8003b8c <UART_SetConfig+0x400>
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b80:	d204      	bcs.n	8003b8c <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	e001      	b.n	8003b90 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003ba8:	00f42400 	.word	0x00f42400

08003bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003caa:	d10a      	bne.n	8003cc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003cfe:	f7fc ff45 	bl	8000b8c <HAL_GetTick>
 8003d02:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d10e      	bne.n	8003d30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f82a 	bl	8003d7a <UART_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e020      	b.n	8003d72 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d10e      	bne.n	8003d5c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f814 	bl	8003d7a <UART_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e00a      	b.n	8003d72 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	4613      	mov	r3, r2
 8003d88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8a:	e05d      	b.n	8003e48 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d92:	d059      	beq.n	8003e48 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d94:	f7fc fefa 	bl	8000b8c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d302      	bcc.n	8003daa <UART_WaitOnFlagUntilTimeout+0x30>
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11b      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003db8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e042      	b.n	8003e68 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d02b      	beq.n	8003e48 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfe:	d123      	bne.n	8003e48 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0201 	bic.w	r2, r2, #1
 8003e28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e00f      	b.n	8003e68 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d092      	beq.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <__libc_init_array>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	4e0d      	ldr	r6, [pc, #52]	; (8003ea8 <__libc_init_array+0x38>)
 8003e74:	4c0d      	ldr	r4, [pc, #52]	; (8003eac <__libc_init_array+0x3c>)
 8003e76:	1ba4      	subs	r4, r4, r6
 8003e78:	10a4      	asrs	r4, r4, #2
 8003e7a:	2500      	movs	r5, #0
 8003e7c:	42a5      	cmp	r5, r4
 8003e7e:	d109      	bne.n	8003e94 <__libc_init_array+0x24>
 8003e80:	4e0b      	ldr	r6, [pc, #44]	; (8003eb0 <__libc_init_array+0x40>)
 8003e82:	4c0c      	ldr	r4, [pc, #48]	; (8003eb4 <__libc_init_array+0x44>)
 8003e84:	f000 f878 	bl	8003f78 <_init>
 8003e88:	1ba4      	subs	r4, r4, r6
 8003e8a:	10a4      	asrs	r4, r4, #2
 8003e8c:	2500      	movs	r5, #0
 8003e8e:	42a5      	cmp	r5, r4
 8003e90:	d105      	bne.n	8003e9e <__libc_init_array+0x2e>
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
 8003e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e98:	4798      	blx	r3
 8003e9a:	3501      	adds	r5, #1
 8003e9c:	e7ee      	b.n	8003e7c <__libc_init_array+0xc>
 8003e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ea2:	4798      	blx	r3
 8003ea4:	3501      	adds	r5, #1
 8003ea6:	e7f2      	b.n	8003e8e <__libc_init_array+0x1e>
 8003ea8:	08004020 	.word	0x08004020
 8003eac:	08004020 	.word	0x08004020
 8003eb0:	08004020 	.word	0x08004020
 8003eb4:	08004024 	.word	0x08004024

08003eb8 <__itoa>:
 8003eb8:	1e93      	subs	r3, r2, #2
 8003eba:	2b22      	cmp	r3, #34	; 0x22
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	d904      	bls.n	8003ecc <__itoa+0x14>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	700b      	strb	r3, [r1, #0]
 8003ec6:	461c      	mov	r4, r3
 8003ec8:	4620      	mov	r0, r4
 8003eca:	bd10      	pop	{r4, pc}
 8003ecc:	2a0a      	cmp	r2, #10
 8003ece:	d109      	bne.n	8003ee4 <__itoa+0x2c>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	da07      	bge.n	8003ee4 <__itoa+0x2c>
 8003ed4:	232d      	movs	r3, #45	; 0x2d
 8003ed6:	700b      	strb	r3, [r1, #0]
 8003ed8:	4240      	negs	r0, r0
 8003eda:	2101      	movs	r1, #1
 8003edc:	4421      	add	r1, r4
 8003ede:	f000 f80d 	bl	8003efc <__utoa>
 8003ee2:	e7f1      	b.n	8003ec8 <__itoa+0x10>
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	e7f9      	b.n	8003edc <__itoa+0x24>

08003ee8 <itoa>:
 8003ee8:	f7ff bfe6 	b.w	8003eb8 <__itoa>

08003eec <memset>:
 8003eec:	4402      	add	r2, r0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d100      	bne.n	8003ef6 <memset+0xa>
 8003ef4:	4770      	bx	lr
 8003ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8003efa:	e7f9      	b.n	8003ef0 <memset+0x4>

08003efc <__utoa>:
 8003efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efe:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <__utoa+0x78>)
 8003f00:	b08b      	sub	sp, #44	; 0x2c
 8003f02:	4605      	mov	r5, r0
 8003f04:	460c      	mov	r4, r1
 8003f06:	466e      	mov	r6, sp
 8003f08:	f103 0c20 	add.w	ip, r3, #32
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	4637      	mov	r7, r6
 8003f12:	c703      	stmia	r7!, {r0, r1}
 8003f14:	3308      	adds	r3, #8
 8003f16:	4563      	cmp	r3, ip
 8003f18:	463e      	mov	r6, r7
 8003f1a:	d1f7      	bne.n	8003f0c <__utoa+0x10>
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	791b      	ldrb	r3, [r3, #4]
 8003f20:	713b      	strb	r3, [r7, #4]
 8003f22:	1e93      	subs	r3, r2, #2
 8003f24:	2b22      	cmp	r3, #34	; 0x22
 8003f26:	6038      	str	r0, [r7, #0]
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	d904      	bls.n	8003f38 <__utoa+0x3c>
 8003f2e:	7023      	strb	r3, [r4, #0]
 8003f30:	461c      	mov	r4, r3
 8003f32:	4620      	mov	r0, r4
 8003f34:	b00b      	add	sp, #44	; 0x2c
 8003f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f38:	1e66      	subs	r6, r4, #1
 8003f3a:	fbb5 f0f2 	udiv	r0, r5, r2
 8003f3e:	af0a      	add	r7, sp, #40	; 0x28
 8003f40:	fb02 5510 	mls	r5, r2, r0, r5
 8003f44:	443d      	add	r5, r7
 8003f46:	1c59      	adds	r1, r3, #1
 8003f48:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8003f4c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8003f50:	4605      	mov	r5, r0
 8003f52:	b968      	cbnz	r0, 8003f70 <__utoa+0x74>
 8003f54:	5460      	strb	r0, [r4, r1]
 8003f56:	4423      	add	r3, r4
 8003f58:	4622      	mov	r2, r4
 8003f5a:	1b19      	subs	r1, r3, r4
 8003f5c:	1b10      	subs	r0, r2, r4
 8003f5e:	4281      	cmp	r1, r0
 8003f60:	dde7      	ble.n	8003f32 <__utoa+0x36>
 8003f62:	7811      	ldrb	r1, [r2, #0]
 8003f64:	7818      	ldrb	r0, [r3, #0]
 8003f66:	f802 0b01 	strb.w	r0, [r2], #1
 8003f6a:	f803 1901 	strb.w	r1, [r3], #-1
 8003f6e:	e7f4      	b.n	8003f5a <__utoa+0x5e>
 8003f70:	460b      	mov	r3, r1
 8003f72:	e7e2      	b.n	8003f3a <__utoa+0x3e>
 8003f74:	08003ff0 	.word	0x08003ff0

08003f78 <_init>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	bf00      	nop
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr

08003f84 <_fini>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	bf00      	nop
 8003f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8a:	bc08      	pop	{r3}
 8003f8c:	469e      	mov	lr, r3
 8003f8e:	4770      	bx	lr
