
labo9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ebc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002138  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005180  08005180  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005180  08005180  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005180  08005180  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000001c  080051a4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  080051a4  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a589  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6c  00000000  00000000  0002a5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f958  00000000  00000000  0002d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2ee  00000000  00000000  0004cf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc6d5  00000000  00000000  00059226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001158fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002930  00000000  00000000  0011594c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003030 	.word	0x08003030

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000020 	.word	0x20000020
 80001c8:	08003030 	.word	0x08003030

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fd4e 	bl	8000c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f88d 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f90f 	bl	80003fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80001de:	f000 f8cf 	bl	8000380 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   SSD1306_Init();
 80001e2:	f000 f99d 	bl	8000520 <SSD1306_Init>
   char snum[5];

   SSD1306_GotoXY (0,0);
 80001e6:	2100      	movs	r1, #0
 80001e8:	2000      	movs	r0, #0
 80001ea:	f000 fb03 	bl	80007f4 <SSD1306_GotoXY>
   SSD1306_Puts ("LABO 9", &Font_11x18, 1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	493a      	ldr	r1, [pc, #232]	; (80002dc <main+0x110>)
 80001f2:	483b      	ldr	r0, [pc, #236]	; (80002e0 <main+0x114>)
 80001f4:	f000 fb94 	bl	8000920 <SSD1306_Puts>
   SSD1306_GotoXY (0, 30);
 80001f8:	211e      	movs	r1, #30
 80001fa:	2000      	movs	r0, #0
 80001fc:	f000 fafa 	bl	80007f4 <SSD1306_GotoXY>
   SSD1306_Puts ("SALU2", &Font_11x18, 1);
 8000200:	2201      	movs	r2, #1
 8000202:	4936      	ldr	r1, [pc, #216]	; (80002dc <main+0x110>)
 8000204:	4837      	ldr	r0, [pc, #220]	; (80002e4 <main+0x118>)
 8000206:	f000 fb8b 	bl	8000920 <SSD1306_Puts>
   SSD1306_UpdateScreen();
 800020a:	f000 fa4d 	bl	80006a8 <SSD1306_UpdateScreen>
   HAL_Delay (1000);
 800020e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000212:	f000 fda3 	bl	8000d5c <HAL_Delay>

   SSD1306_ScrollRight(0,7);
 8000216:	2107      	movs	r1, #7
 8000218:	2000      	movs	r0, #0
 800021a:	f000 f90c 	bl	8000436 <SSD1306_ScrollRight>
   HAL_Delay(3000);
 800021e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000222:	f000 fd9b 	bl	8000d5c <HAL_Delay>
   SSD1306_ScrollLeft(0,7);
 8000226:	2107      	movs	r1, #7
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f93a 	bl	80004a2 <SSD1306_ScrollLeft>
   HAL_Delay(3000);
 800022e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000232:	f000 fd93 	bl	8000d5c <HAL_Delay>
   SSD1306_Stopscroll();
 8000236:	f000 f96a 	bl	800050e <SSD1306_Stopscroll>
   SSD1306_Clear();
 800023a:	f000 fb96 	bl	800096a <SSD1306_Clear>
   SSD1306_GotoXY (35,0);
 800023e:	2100      	movs	r1, #0
 8000240:	2023      	movs	r0, #35	; 0x23
 8000242:	f000 fad7 	bl	80007f4 <SSD1306_GotoXY>
   SSD1306_Puts ("SCORE", &Font_11x18, 1);
 8000246:	2201      	movs	r2, #1
 8000248:	4924      	ldr	r1, [pc, #144]	; (80002dc <main+0x110>)
 800024a:	4827      	ldr	r0, [pc, #156]	; (80002e8 <main+0x11c>)
 800024c:	f000 fb68 	bl	8000920 <SSD1306_Puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for ( int x = 1; x <= 10000 ; x++ )
 8000250:	2301      	movs	r3, #1
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	e03c      	b.n	80002d0 <main+0x104>
	  	{
	  		itoa(x, snum, 10);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	220a      	movs	r2, #10
 800025a:	4619      	mov	r1, r3
 800025c:	68f8      	ldr	r0, [r7, #12]
 800025e:	f002 fe9b 	bl	8002f98 <itoa>
	  		SSD1306_GotoXY (0, 30);
 8000262:	211e      	movs	r1, #30
 8000264:	2000      	movs	r0, #0
 8000266:	f000 fac5 	bl	80007f4 <SSD1306_GotoXY>
	  		SSD1306_Puts ("             ", &Font_16x26, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	491f      	ldr	r1, [pc, #124]	; (80002ec <main+0x120>)
 800026e:	4820      	ldr	r0, [pc, #128]	; (80002f0 <main+0x124>)
 8000270:	f000 fb56 	bl	8000920 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 8000274:	f000 fa18 	bl	80006a8 <SSD1306_UpdateScreen>
	  		if(x < 10) {
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	2b09      	cmp	r3, #9
 800027c:	dc04      	bgt.n	8000288 <main+0xbc>
	  			SSD1306_GotoXY (53, 30);  // 1 DIGIT
 800027e:	211e      	movs	r1, #30
 8000280:	2035      	movs	r0, #53	; 0x35
 8000282:	f000 fab7 	bl	80007f4 <SSD1306_GotoXY>
 8000286:	e014      	b.n	80002b2 <main+0xe6>
	  		}
	  		else if (x < 100 ) {
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	2b63      	cmp	r3, #99	; 0x63
 800028c:	dc04      	bgt.n	8000298 <main+0xcc>
	  			SSD1306_GotoXY (45, 30);  // 2 DIGITS
 800028e:	211e      	movs	r1, #30
 8000290:	202d      	movs	r0, #45	; 0x2d
 8000292:	f000 faaf 	bl	80007f4 <SSD1306_GotoXY>
 8000296:	e00c      	b.n	80002b2 <main+0xe6>
	  		}
	  		else if (x < 1000 ) {
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800029e:	da04      	bge.n	80002aa <main+0xde>
	  			SSD1306_GotoXY (37, 30);  // 3 DIGITS
 80002a0:	211e      	movs	r1, #30
 80002a2:	2025      	movs	r0, #37	; 0x25
 80002a4:	f000 faa6 	bl	80007f4 <SSD1306_GotoXY>
 80002a8:	e003      	b.n	80002b2 <main+0xe6>
	  		}
	  		else {
	  			SSD1306_GotoXY (30, 30);  // 4 DIGIS
 80002aa:	211e      	movs	r1, #30
 80002ac:	201e      	movs	r0, #30
 80002ae:	f000 faa1 	bl	80007f4 <SSD1306_GotoXY>
	  		}
	  		SSD1306_Puts (snum, &Font_16x26, 1);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2201      	movs	r2, #1
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <main+0x120>)
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fb31 	bl	8000920 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 80002be:	f000 f9f3 	bl	80006a8 <SSD1306_UpdateScreen>
	  		HAL_Delay (500);
 80002c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c6:	f000 fd49 	bl	8000d5c <HAL_Delay>
	  for ( int x = 1; x <= 10000 ; x++ )
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3301      	adds	r3, #1
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80002d6:	4293      	cmp	r3, r2
 80002d8:	ddbd      	ble.n	8000256 <main+0x8a>
 80002da:	e7b9      	b.n	8000250 <main+0x84>
 80002dc:	20000000 	.word	0x20000000
 80002e0:	08003048 	.word	0x08003048
 80002e4:	08003050 	.word	0x08003050
 80002e8:	08003058 	.word	0x08003058
 80002ec:	20000008 	.word	0x20000008
 80002f0:	08003060 	.word	0x08003060

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b096      	sub	sp, #88	; 0x58
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	2244      	movs	r2, #68	; 0x44
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fe4a 	bl	8002f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	463b      	mov	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000316:	f44f 7000 	mov.w	r0, #512	; 0x200
 800031a:	f001 fcc3 	bl	8001ca4 <HAL_PWREx_ControlVoltageScaling>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000324:	f000 f882 	bl	800042c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000328:	2310      	movs	r3, #16
 800032a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000334:	2360      	movs	r3, #96	; 0x60
 8000336:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	2300      	movs	r3, #0
 800033a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0314 	add.w	r3, r7, #20
 8000340:	4618      	mov	r0, r3
 8000342:	f001 fd05 	bl	8001d50 <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800034c:	f000 f86e 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000364:	463b      	mov	r3, r7
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f002 f905 	bl	8002578 <HAL_RCC_ClockConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000374:	f000 f85a 	bl	800042c <Error_Handler>
  }
}
 8000378:	bf00      	nop
 800037a:	3758      	adds	r7, #88	; 0x58
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000386:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <MX_I2C1_Init+0x78>)
 8000388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_I2C1_Init+0x74>)
 800038c:	2204      	movs	r2, #4
 800038e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000398:	2201      	movs	r2, #1
 800039a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ba:	480e      	ldr	r0, [pc, #56]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003bc:	f000 ff42 	bl	8001244 <HAL_I2C_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003c6:	f000 f831 	bl	800042c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ca:	2100      	movs	r1, #0
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003ce:	f001 fbc3 	bl	8001b58 <HAL_I2CEx_ConfigAnalogFilter>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003d8:	f000 f828 	bl	800042c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003dc:	2100      	movs	r1, #0
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003e0:	f001 fc05 	bl	8001bee <HAL_I2CEx_ConfigDigitalFilter>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ea:	f000 f81f 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000038 	.word	0x20000038
 80003f8:	40005400 	.word	0x40005400

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a08      	ldr	r2, [pc, #32]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	e7fe      	b.n	8000434 <Error_Handler+0x8>

08000436 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	4603      	mov	r3, r0
 800043e:	460a      	mov	r2, r1
 8000440:	71fb      	strb	r3, [r7, #7]
 8000442:	4613      	mov	r3, r2
 8000444:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000446:	2226      	movs	r2, #38	; 0x26
 8000448:	2100      	movs	r1, #0
 800044a:	2078      	movs	r0, #120	; 0x78
 800044c:	f000 fb12 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	2078      	movs	r0, #120	; 0x78
 8000456:	f000 fb0d 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	461a      	mov	r2, r3
 800045e:	2100      	movs	r1, #0
 8000460:	2078      	movs	r0, #120	; 0x78
 8000462:	f000 fb07 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	2078      	movs	r0, #120	; 0x78
 800046c:	f000 fb02 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	461a      	mov	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	2078      	movs	r0, #120	; 0x78
 8000478:	f000 fafc 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800047c:	2200      	movs	r2, #0
 800047e:	2100      	movs	r1, #0
 8000480:	2078      	movs	r0, #120	; 0x78
 8000482:	f000 faf7 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000486:	22ff      	movs	r2, #255	; 0xff
 8000488:	2100      	movs	r1, #0
 800048a:	2078      	movs	r0, #120	; 0x78
 800048c:	f000 faf2 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000490:	222f      	movs	r2, #47	; 0x2f
 8000492:	2100      	movs	r1, #0
 8000494:	2078      	movs	r0, #120	; 0x78
 8000496:	f000 faed 	bl	8000a74 <ssd1306_I2C_Write>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	460a      	mov	r2, r1
 80004ac:	71fb      	strb	r3, [r7, #7]
 80004ae:	4613      	mov	r3, r2
 80004b0:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80004b2:	2227      	movs	r2, #39	; 0x27
 80004b4:	2100      	movs	r1, #0
 80004b6:	2078      	movs	r0, #120	; 0x78
 80004b8:	f000 fadc 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2078      	movs	r0, #120	; 0x78
 80004c2:	f000 fad7 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	461a      	mov	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	2078      	movs	r0, #120	; 0x78
 80004ce:	f000 fad1 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	2078      	movs	r0, #120	; 0x78
 80004d8:	f000 facc 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80004dc:	79bb      	ldrb	r3, [r7, #6]
 80004de:	461a      	mov	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	2078      	movs	r0, #120	; 0x78
 80004e4:	f000 fac6 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2100      	movs	r1, #0
 80004ec:	2078      	movs	r0, #120	; 0x78
 80004ee:	f000 fac1 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80004f2:	22ff      	movs	r2, #255	; 0xff
 80004f4:	2100      	movs	r1, #0
 80004f6:	2078      	movs	r0, #120	; 0x78
 80004f8:	f000 fabc 	bl	8000a74 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80004fc:	222f      	movs	r2, #47	; 0x2f
 80004fe:	2100      	movs	r1, #0
 8000500:	2078      	movs	r0, #120	; 0x78
 8000502:	f000 fab7 	bl	8000a74 <ssd1306_I2C_Write>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000512:	222e      	movs	r2, #46	; 0x2e
 8000514:	2100      	movs	r1, #0
 8000516:	2078      	movs	r0, #120	; 0x78
 8000518:	f000 faac 	bl	8000a74 <ssd1306_I2C_Write>
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000526:	f000 fa29 	bl	800097c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800052a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800052e:	2201      	movs	r2, #1
 8000530:	2178      	movs	r1, #120	; 0x78
 8000532:	485b      	ldr	r0, [pc, #364]	; (80006a0 <SSD1306_Init+0x180>)
 8000534:	f001 f80a 	bl	800154c <HAL_I2C_IsDeviceReady>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800053e:	2300      	movs	r3, #0
 8000540:	e0a9      	b.n	8000696 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000542:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000546:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000548:	e002      	b.n	8000550 <SSD1306_Init+0x30>
		p--;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3b01      	subs	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1f9      	bne.n	800054a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000556:	22ae      	movs	r2, #174	; 0xae
 8000558:	2100      	movs	r1, #0
 800055a:	2078      	movs	r0, #120	; 0x78
 800055c:	f000 fa8a 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000560:	2220      	movs	r2, #32
 8000562:	2100      	movs	r1, #0
 8000564:	2078      	movs	r0, #120	; 0x78
 8000566:	f000 fa85 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800056a:	2210      	movs	r2, #16
 800056c:	2100      	movs	r1, #0
 800056e:	2078      	movs	r0, #120	; 0x78
 8000570:	f000 fa80 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000574:	22b0      	movs	r2, #176	; 0xb0
 8000576:	2100      	movs	r1, #0
 8000578:	2078      	movs	r0, #120	; 0x78
 800057a:	f000 fa7b 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800057e:	22c8      	movs	r2, #200	; 0xc8
 8000580:	2100      	movs	r1, #0
 8000582:	2078      	movs	r0, #120	; 0x78
 8000584:	f000 fa76 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2078      	movs	r0, #120	; 0x78
 800058e:	f000 fa71 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000592:	2210      	movs	r2, #16
 8000594:	2100      	movs	r1, #0
 8000596:	2078      	movs	r0, #120	; 0x78
 8000598:	f000 fa6c 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800059c:	2240      	movs	r2, #64	; 0x40
 800059e:	2100      	movs	r1, #0
 80005a0:	2078      	movs	r0, #120	; 0x78
 80005a2:	f000 fa67 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80005a6:	2281      	movs	r2, #129	; 0x81
 80005a8:	2100      	movs	r1, #0
 80005aa:	2078      	movs	r0, #120	; 0x78
 80005ac:	f000 fa62 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80005b0:	22ff      	movs	r2, #255	; 0xff
 80005b2:	2100      	movs	r1, #0
 80005b4:	2078      	movs	r0, #120	; 0x78
 80005b6:	f000 fa5d 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80005ba:	22a1      	movs	r2, #161	; 0xa1
 80005bc:	2100      	movs	r1, #0
 80005be:	2078      	movs	r0, #120	; 0x78
 80005c0:	f000 fa58 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80005c4:	22a6      	movs	r2, #166	; 0xa6
 80005c6:	2100      	movs	r1, #0
 80005c8:	2078      	movs	r0, #120	; 0x78
 80005ca:	f000 fa53 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80005ce:	22a8      	movs	r2, #168	; 0xa8
 80005d0:	2100      	movs	r1, #0
 80005d2:	2078      	movs	r0, #120	; 0x78
 80005d4:	f000 fa4e 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80005d8:	223f      	movs	r2, #63	; 0x3f
 80005da:	2100      	movs	r1, #0
 80005dc:	2078      	movs	r0, #120	; 0x78
 80005de:	f000 fa49 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005e2:	22a4      	movs	r2, #164	; 0xa4
 80005e4:	2100      	movs	r1, #0
 80005e6:	2078      	movs	r0, #120	; 0x78
 80005e8:	f000 fa44 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80005ec:	22d3      	movs	r2, #211	; 0xd3
 80005ee:	2100      	movs	r1, #0
 80005f0:	2078      	movs	r0, #120	; 0x78
 80005f2:	f000 fa3f 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	2078      	movs	r0, #120	; 0x78
 80005fc:	f000 fa3a 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000600:	22d5      	movs	r2, #213	; 0xd5
 8000602:	2100      	movs	r1, #0
 8000604:	2078      	movs	r0, #120	; 0x78
 8000606:	f000 fa35 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800060a:	22f0      	movs	r2, #240	; 0xf0
 800060c:	2100      	movs	r1, #0
 800060e:	2078      	movs	r0, #120	; 0x78
 8000610:	f000 fa30 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000614:	22d9      	movs	r2, #217	; 0xd9
 8000616:	2100      	movs	r1, #0
 8000618:	2078      	movs	r0, #120	; 0x78
 800061a:	f000 fa2b 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800061e:	2222      	movs	r2, #34	; 0x22
 8000620:	2100      	movs	r1, #0
 8000622:	2078      	movs	r0, #120	; 0x78
 8000624:	f000 fa26 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000628:	22da      	movs	r2, #218	; 0xda
 800062a:	2100      	movs	r1, #0
 800062c:	2078      	movs	r0, #120	; 0x78
 800062e:	f000 fa21 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000632:	2212      	movs	r2, #18
 8000634:	2100      	movs	r1, #0
 8000636:	2078      	movs	r0, #120	; 0x78
 8000638:	f000 fa1c 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800063c:	22db      	movs	r2, #219	; 0xdb
 800063e:	2100      	movs	r1, #0
 8000640:	2078      	movs	r0, #120	; 0x78
 8000642:	f000 fa17 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000646:	2220      	movs	r2, #32
 8000648:	2100      	movs	r1, #0
 800064a:	2078      	movs	r0, #120	; 0x78
 800064c:	f000 fa12 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000650:	228d      	movs	r2, #141	; 0x8d
 8000652:	2100      	movs	r1, #0
 8000654:	2078      	movs	r0, #120	; 0x78
 8000656:	f000 fa0d 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800065a:	2214      	movs	r2, #20
 800065c:	2100      	movs	r1, #0
 800065e:	2078      	movs	r0, #120	; 0x78
 8000660:	f000 fa08 	bl	8000a74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000664:	22af      	movs	r2, #175	; 0xaf
 8000666:	2100      	movs	r1, #0
 8000668:	2078      	movs	r0, #120	; 0x78
 800066a:	f000 fa03 	bl	8000a74 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800066e:	222e      	movs	r2, #46	; 0x2e
 8000670:	2100      	movs	r1, #0
 8000672:	2078      	movs	r0, #120	; 0x78
 8000674:	f000 f9fe 	bl	8000a74 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 f843 	bl	8000704 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800067e:	f000 f813 	bl	80006a8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <SSD1306_Init+0x184>)
 8000684:	2200      	movs	r2, #0
 8000686:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <SSD1306_Init+0x184>)
 800068a:	2200      	movs	r2, #0
 800068c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <SSD1306_Init+0x184>)
 8000690:	2201      	movs	r2, #1
 8000692:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000694:	2301      	movs	r3, #1
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000038 	.word	0x20000038
 80006a4:	2000048c 	.word	0x2000048c

080006a8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	e01d      	b.n	80006f0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	3b50      	subs	r3, #80	; 0x50
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	461a      	mov	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	2078      	movs	r0, #120	; 0x78
 80006c0:	f000 f9d8 	bl	8000a74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	2078      	movs	r0, #120	; 0x78
 80006ca:	f000 f9d3 	bl	8000a74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80006ce:	2210      	movs	r2, #16
 80006d0:	2100      	movs	r1, #0
 80006d2:	2078      	movs	r0, #120	; 0x78
 80006d4:	f000 f9ce 	bl	8000a74 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	01db      	lsls	r3, r3, #7
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <SSD1306_UpdateScreen+0x58>)
 80006de:	441a      	add	r2, r3
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	2078      	movs	r0, #120	; 0x78
 80006e6:	f000 f95f 	bl	80009a8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	3301      	adds	r3, #1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d9de      	bls.n	80006b4 <SSD1306_UpdateScreen+0xc>
	}
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000008c 	.word	0x2000008c

08000704 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <SSD1306_Fill+0x14>
 8000714:	2300      	movs	r3, #0
 8000716:	e000      	b.n	800071a <SSD1306_Fill+0x16>
 8000718:	23ff      	movs	r3, #255	; 0xff
 800071a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800071e:	4619      	mov	r1, r3
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <SSD1306_Fill+0x2c>)
 8000722:	f002 fc3b 	bl	8002f9c <memset>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000008c 	.word	0x2000008c

08000734 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
 800073e:	460b      	mov	r3, r1
 8000740:	80bb      	strh	r3, [r7, #4]
 8000742:	4613      	mov	r3, r2
 8000744:	70fb      	strb	r3, [r7, #3]
	if (
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	2b7f      	cmp	r3, #127	; 0x7f
 800074a:	d848      	bhi.n	80007de <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800074c:	88bb      	ldrh	r3, [r7, #4]
 800074e:	2b3f      	cmp	r3, #63	; 0x3f
 8000750:	d845      	bhi.n	80007de <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <SSD1306_DrawPixel+0xb8>)
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf0c      	ite	eq
 8000760:	2301      	moveq	r3, #1
 8000762:	2300      	movne	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d11a      	bne.n	80007a4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800076e:	88fa      	ldrh	r2, [r7, #6]
 8000770:	88bb      	ldrh	r3, [r7, #4]
 8000772:	08db      	lsrs	r3, r3, #3
 8000774:	b298      	uxth	r0, r3
 8000776:	4603      	mov	r3, r0
 8000778:	01db      	lsls	r3, r3, #7
 800077a:	4413      	add	r3, r2
 800077c:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <SSD1306_DrawPixel+0xbc>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	b25a      	sxtb	r2, r3
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	f003 0307 	and.w	r3, r3, #7
 8000788:	2101      	movs	r1, #1
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	4313      	orrs	r3, r2
 8000792:	b259      	sxtb	r1, r3
 8000794:	88fa      	ldrh	r2, [r7, #6]
 8000796:	4603      	mov	r3, r0
 8000798:	01db      	lsls	r3, r3, #7
 800079a:	4413      	add	r3, r2
 800079c:	b2c9      	uxtb	r1, r1
 800079e:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <SSD1306_DrawPixel+0xbc>)
 80007a0:	54d1      	strb	r1, [r2, r3]
 80007a2:	e01d      	b.n	80007e0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80007a4:	88fa      	ldrh	r2, [r7, #6]
 80007a6:	88bb      	ldrh	r3, [r7, #4]
 80007a8:	08db      	lsrs	r3, r3, #3
 80007aa:	b298      	uxth	r0, r3
 80007ac:	4603      	mov	r3, r0
 80007ae:	01db      	lsls	r3, r3, #7
 80007b0:	4413      	add	r3, r2
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <SSD1306_DrawPixel+0xbc>)
 80007b4:	5cd3      	ldrb	r3, [r2, r3]
 80007b6:	b25a      	sxtb	r2, r3
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	2101      	movs	r1, #1
 80007c0:	fa01 f303 	lsl.w	r3, r1, r3
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	4013      	ands	r3, r2
 80007cc:	b259      	sxtb	r1, r3
 80007ce:	88fa      	ldrh	r2, [r7, #6]
 80007d0:	4603      	mov	r3, r0
 80007d2:	01db      	lsls	r3, r3, #7
 80007d4:	4413      	add	r3, r2
 80007d6:	b2c9      	uxtb	r1, r1
 80007d8:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <SSD1306_DrawPixel+0xbc>)
 80007da:	54d1      	strb	r1, [r2, r3]
 80007dc:	e000      	b.n	80007e0 <SSD1306_DrawPixel+0xac>
		return;
 80007de:	bf00      	nop
	}
}
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	2000048c 	.word	0x2000048c
 80007f0:	2000008c 	.word	0x2000008c

080007f4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	80fb      	strh	r3, [r7, #6]
 8000800:	4613      	mov	r3, r2
 8000802:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000804:	4a05      	ldr	r2, [pc, #20]	; (800081c <SSD1306_GotoXY+0x28>)
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <SSD1306_GotoXY+0x28>)
 800080c:	88bb      	ldrh	r3, [r7, #4]
 800080e:	8053      	strh	r3, [r2, #2]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	2000048c 	.word	0x2000048c

08000820 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000830:	4b3a      	ldr	r3, [pc, #232]	; (800091c <SSD1306_Putc+0xfc>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
	if (
 800083c:	2b7f      	cmp	r3, #127	; 0x7f
 800083e:	dc07      	bgt.n	8000850 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000840:	4b36      	ldr	r3, [pc, #216]	; (800091c <SSD1306_Putc+0xfc>)
 8000842:	885b      	ldrh	r3, [r3, #2]
 8000844:	461a      	mov	r2, r3
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	785b      	ldrb	r3, [r3, #1]
 800084a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800084c:	2b3f      	cmp	r3, #63	; 0x3f
 800084e:	dd01      	ble.n	8000854 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000850:	2300      	movs	r3, #0
 8000852:	e05e      	b.n	8000912 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	e04b      	b.n	80008f2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685a      	ldr	r2, [r3, #4]
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	3b20      	subs	r3, #32
 8000862:	6839      	ldr	r1, [r7, #0]
 8000864:	7849      	ldrb	r1, [r1, #1]
 8000866:	fb01 f303 	mul.w	r3, r1, r3
 800086a:	4619      	mov	r1, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	440b      	add	r3, r1
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	e030      	b.n	80008e0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088a:	2b00      	cmp	r3, #0
 800088c:	d010      	beq.n	80008b0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <SSD1306_Putc+0xfc>)
 8000890:	881a      	ldrh	r2, [r3, #0]
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	b29b      	uxth	r3, r3
 8000896:	4413      	add	r3, r2
 8000898:	b298      	uxth	r0, r3
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <SSD1306_Putc+0xfc>)
 800089c:	885a      	ldrh	r2, [r3, #2]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	4413      	add	r3, r2
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	79ba      	ldrb	r2, [r7, #6]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f7ff ff43 	bl	8000734 <SSD1306_DrawPixel>
 80008ae:	e014      	b.n	80008da <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <SSD1306_Putc+0xfc>)
 80008b2:	881a      	ldrh	r2, [r3, #0]
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	b298      	uxth	r0, r3
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <SSD1306_Putc+0xfc>)
 80008be:	885a      	ldrh	r2, [r3, #2]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	4413      	add	r3, r2
 80008c6:	b299      	uxth	r1, r3
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bf0c      	ite	eq
 80008ce:	2301      	moveq	r3, #1
 80008d0:	2300      	movne	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	f7ff ff2d 	bl	8000734 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	3301      	adds	r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d3c8      	bcc.n	800087e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3301      	adds	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	461a      	mov	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d3ad      	bcc.n	800085a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <SSD1306_Putc+0xfc>)
 8000900:	881a      	ldrh	r2, [r3, #0]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b29b      	uxth	r3, r3
 8000908:	4413      	add	r3, r2
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <SSD1306_Putc+0xfc>)
 800090e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000910:	79fb      	ldrb	r3, [r7, #7]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000048c 	.word	0x2000048c

08000920 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	4613      	mov	r3, r2
 800092c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800092e:	e012      	b.n	8000956 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff71 	bl	8000820 <SSD1306_Putc>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	429a      	cmp	r2, r3
 8000948:	d002      	beq.n	8000950 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	e008      	b.n	8000962 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3301      	adds	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1e8      	bne.n	8000930 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	781b      	ldrb	r3, [r3, #0]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fec8 	bl	8000704 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000974:	f7ff fe98 	bl	80006a8 <SSD1306_UpdateScreen>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <ssd1306_I2C_Init+0x28>)
 8000984:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000986:	e002      	b.n	800098e <ssd1306_I2C_Init+0x12>
		p--;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1f9      	bne.n	8000988 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	0003d090 	.word	0x0003d090

080009a8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b0c7      	sub	sp, #284	; 0x11c
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	4604      	mov	r4, r0
 80009b0:	4608      	mov	r0, r1
 80009b2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80009b6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80009ba:	600a      	str	r2, [r1, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80009c6:	4622      	mov	r2, r4
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009ce:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80009d2:	4602      	mov	r2, r0
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009de:	460a      	mov	r2, r1
 80009e0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80009e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009ee:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009fc:	e015      	b.n	8000a2a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80009fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a02:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a06:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	441a      	add	r2, r3
 8000a0e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a12:	3301      	adds	r3, #1
 8000a14:	7811      	ldrb	r1, [r2, #0]
 8000a16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a1a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000a1e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a20:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a24:	3301      	adds	r3, #1
 8000a26:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a2a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a34:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000a38:	8812      	ldrh	r2, [r2, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d8df      	bhi.n	80009fe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000a3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a42:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b299      	uxth	r1, r3
 8000a4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	f107 020c 	add.w	r2, r7, #12
 8000a5c:	200a      	movs	r0, #10
 8000a5e:	9000      	str	r0, [sp, #0]
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <ssd1306_I2C_WriteMulti+0xc8>)
 8000a62:	f000 fc7f 	bl	8001364 <HAL_I2C_Master_Transmit>
}
 8000a66:	bf00      	nop
 8000a68:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	20000038 	.word	0x20000038

08000a74 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	71bb      	strb	r3, [r7, #6]
 8000a82:	4613      	mov	r3, r2
 8000a84:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a8a:	797b      	ldrb	r3, [r7, #5]
 8000a8c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	b299      	uxth	r1, r3
 8000a92:	f107 020c 	add.w	r2, r7, #12
 8000a96:	230a      	movs	r3, #10
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <ssd1306_I2C_Write+0x38>)
 8000a9e:	f000 fc61 	bl	8001364 <HAL_I2C_Master_Transmit>
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000038 	.word	0x20000038

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09e      	sub	sp, #120	; 0x78
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2254      	movs	r2, #84	; 0x54
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 fa3f 	bl	8002f9c <memset>
  if(hi2c->Instance==I2C1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <HAL_I2C_MspInit+0xa8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d137      	bne.n	8000b98 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 ff0b 	bl	8002950 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b40:	f7ff fc74 	bl	800042c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_I2C_MspInit+0xac>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <HAL_I2C_MspInit+0xac>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_I2C_MspInit+0xac>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b60:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b62:	2312      	movs	r3, #18
 8000b64:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7c:	f000 f9f8 	bl	8000f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_I2C_MspInit+0xac>)
 8000b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <HAL_I2C_MspInit+0xac>)
 8000b86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_I2C_MspInit+0xac>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3778      	adds	r7, #120	; 0x78
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f892 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f002 f967 	bl	8002f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c52:	f7ff fabb 	bl	80001cc <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c64:	08005188 	.word	0x08005188
  ldr r2, =_sbss
 8000c68:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c6c:	20000498 	.word	0x20000498

08000c70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_IRQHandler>

08000c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f943 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c82:	200f      	movs	r0, #15
 8000c84:	f000 f80e 	bl	8000ca4 <HAL_InitTick>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	e001      	b.n	8000c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c94:	f7ff ff0c 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_InitTick+0x6c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d023      	beq.n	8000d00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_InitTick+0x70>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_InitTick+0x6c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f941 	bl	8000f56 <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10f      	bne.n	8000cfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d809      	bhi.n	8000cf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f000 f919 	bl	8000f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_InitTick+0x74>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e007      	b.n	8000d04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e004      	b.n	8000d04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e001      	b.n	8000d04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000018 	.word	0x20000018
 8000d14:	20000010 	.word	0x20000010
 8000d18:	20000014 	.word	0x20000014

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000018 	.word	0x20000018
 8000d40:	20000494 	.word	0x20000494

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000494 	.word	0x20000494

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff ffee 	bl	8000d44 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_Delay+0x44>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffde 	bl	8000d44 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000018 	.word	0x20000018

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff47 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff5c 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffb0 	bl	8000ec4 <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	e148      	b.n	8001212 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 813a 	beq.w	800120c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d005      	beq.n	8000fb0 <HAL_GPIO_Init+0x40>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 0201 	and.w	r2, r3, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b03      	cmp	r3, #3
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d123      	bne.n	80010a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	6939      	ldr	r1, [r7, #16]
 800109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0203 	and.w	r2, r3, #3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8094 	beq.w	800120c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e4:	4b52      	ldr	r3, [pc, #328]	; (8001230 <HAL_GPIO_Init+0x2c0>)
 80010e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e8:	4a51      	ldr	r2, [pc, #324]	; (8001230 <HAL_GPIO_Init+0x2c0>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6613      	str	r3, [r2, #96]	; 0x60
 80010f0:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <HAL_GPIO_Init+0x2c0>)
 80010f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010fc:	4a4d      	ldr	r2, [pc, #308]	; (8001234 <HAL_GPIO_Init+0x2c4>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001126:	d00d      	beq.n	8001144 <HAL_GPIO_Init+0x1d4>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a43      	ldr	r2, [pc, #268]	; (8001238 <HAL_GPIO_Init+0x2c8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d007      	beq.n	8001140 <HAL_GPIO_Init+0x1d0>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a42      	ldr	r2, [pc, #264]	; (800123c <HAL_GPIO_Init+0x2cc>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d101      	bne.n	800113c <HAL_GPIO_Init+0x1cc>
 8001138:	2302      	movs	r3, #2
 800113a:	e004      	b.n	8001146 <HAL_GPIO_Init+0x1d6>
 800113c:	2307      	movs	r3, #7
 800113e:	e002      	b.n	8001146 <HAL_GPIO_Init+0x1d6>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_GPIO_Init+0x1d6>
 8001144:	2300      	movs	r3, #0
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	f002 0203 	and.w	r2, r2, #3
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	4093      	lsls	r3, r2
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001156:	4937      	ldr	r1, [pc, #220]	; (8001234 <HAL_GPIO_Init+0x2c4>)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001164:	4b36      	ldr	r3, [pc, #216]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001188:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	f47f aeaf 	bne.w	8000f80 <HAL_GPIO_Init+0x10>
  }
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	48000400 	.word	0x48000400
 800123c:	48000800 	.word	0x48000800
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e081      	b.n	800135a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d106      	bne.n	8001270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fc44 	bl	8000af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2224      	movs	r2, #36	; 0x24
 8001274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001294:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d107      	bne.n	80012be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	e006      	b.n	80012cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d104      	bne.n	80012de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001300:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69d9      	ldr	r1, [r3, #28]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2220      	movs	r2, #32
 8001346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af02      	add	r7, sp, #8
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	461a      	mov	r2, r3
 8001370:	460b      	mov	r3, r1
 8001372:	817b      	strh	r3, [r7, #10]
 8001374:	4613      	mov	r3, r2
 8001376:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b20      	cmp	r3, #32
 8001382:	f040 80da 	bne.w	800153a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_I2C_Master_Transmit+0x30>
 8001390:	2302      	movs	r3, #2
 8001392:	e0d3      	b.n	800153c <HAL_I2C_Master_Transmit+0x1d8>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800139c:	f7ff fcd2 	bl	8000d44 <HAL_GetTick>
 80013a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2319      	movs	r3, #25
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 f9f7 	bl	80017a2 <I2C_WaitOnFlagUntilTimeout>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0be      	b.n	800153c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2221      	movs	r2, #33	; 0x21
 80013c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2210      	movs	r2, #16
 80013ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	893a      	ldrh	r2, [r7, #8]
 80013de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2bff      	cmp	r3, #255	; 0xff
 80013ee:	d90e      	bls.n	800140e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	22ff      	movs	r2, #255	; 0xff
 80013f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	8979      	ldrh	r1, [r7, #10]
 80013fe:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_I2C_Master_Transmit+0x1e0>)
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 fb74 	bl	8001af4 <I2C_TransferConfig>
 800140c:	e06c      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141c:	b2da      	uxtb	r2, r3
 800141e:	8979      	ldrh	r1, [r7, #10]
 8001420:	4b48      	ldr	r3, [pc, #288]	; (8001544 <HAL_I2C_Master_Transmit+0x1e0>)
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 fb63 	bl	8001af4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800142e:	e05b      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	6a39      	ldr	r1, [r7, #32]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 f9f4 	bl	8001822 <I2C_WaitOnTXISFlagUntilTimeout>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e07b      	b.n	800153c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145e:	b29b      	uxth	r3, r3
 8001460:	3b01      	subs	r3, #1
 8001462:	b29a      	uxth	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146c:	3b01      	subs	r3, #1
 800146e:	b29a      	uxth	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001478:	b29b      	uxth	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d034      	beq.n	80014e8 <HAL_I2C_Master_Transmit+0x184>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001482:	2b00      	cmp	r3, #0
 8001484:	d130      	bne.n	80014e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	2200      	movs	r2, #0
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 f986 	bl	80017a2 <I2C_WaitOnFlagUntilTimeout>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e04d      	b.n	800153c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2bff      	cmp	r3, #255	; 0xff
 80014a8:	d90e      	bls.n	80014c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	22ff      	movs	r2, #255	; 0xff
 80014ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	8979      	ldrh	r1, [r7, #10]
 80014b8:	2300      	movs	r3, #0
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 fb17 	bl	8001af4 <I2C_TransferConfig>
 80014c6:	e00f      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	8979      	ldrh	r1, [r7, #10]
 80014da:	2300      	movs	r3, #0
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 fb06 	bl	8001af4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d19e      	bne.n	8001430 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	6a39      	ldr	r1, [r7, #32]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f9d3 	bl	80018a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e01a      	b.n	800153c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2220      	movs	r2, #32
 800150c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_I2C_Master_Transmit+0x1e4>)
 800151a:	400b      	ands	r3, r1
 800151c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2220      	movs	r2, #32
 8001522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800153a:	2302      	movs	r3, #2
  }
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	80002000 	.word	0x80002000
 8001548:	fe00e800 	.word	0xfe00e800

0800154c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af02      	add	r7, sp, #8
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	460b      	mov	r3, r1
 800155a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b20      	cmp	r3, #32
 800156a:	f040 80f1 	bne.w	8001750 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800157c:	d101      	bne.n	8001582 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800157e:	2302      	movs	r3, #2
 8001580:	e0e7      	b.n	8001752 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_I2C_IsDeviceReady+0x44>
 800158c:	2302      	movs	r3, #2
 800158e:	e0e0      	b.n	8001752 <HAL_I2C_IsDeviceReady+0x206>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2224      	movs	r2, #36	; 0x24
 800159c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <HAL_I2C_IsDeviceReady+0x72>
 80015ae:	897b      	ldrh	r3, [r7, #10]
 80015b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015bc:	e004      	b.n	80015c8 <HAL_I2C_IsDeviceReady+0x7c>
 80015be:	897b      	ldrh	r3, [r7, #10]
 80015c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff fbb9 	bl	8000d44 <HAL_GetTick>
 80015d2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	2b20      	cmp	r3, #32
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b10      	cmp	r3, #16
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001600:	e034      	b.n	800166c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d01a      	beq.n	8001640 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800160a:	f7ff fb9b 	bl	8000d44 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d302      	bcc.n	8001620 <HAL_I2C_IsDeviceReady+0xd4>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10f      	bne.n	8001640 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2220      	movs	r2, #32
 8001624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	f043 0220 	orr.w	r2, r3, #32
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e088      	b.n	8001752 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	2b20      	cmp	r3, #32
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	2b10      	cmp	r3, #16
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800166c:	7ffb      	ldrb	r3, [r7, #31]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <HAL_I2C_IsDeviceReady+0x12c>
 8001672:	7fbb      	ldrb	r3, [r7, #30]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0c4      	beq.n	8001602 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b10      	cmp	r3, #16
 8001684:	d01a      	beq.n	80016bc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	2120      	movs	r1, #32
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f886 	bl	80017a2 <I2C_WaitOnFlagUntilTimeout>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e058      	b.n	8001752 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2220      	movs	r2, #32
 80016a6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2220      	movs	r2, #32
 80016ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e04a      	b.n	8001752 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	2120      	movs	r1, #32
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 f86b 	bl	80017a2 <I2C_WaitOnFlagUntilTimeout>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e03d      	b.n	8001752 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2210      	movs	r2, #16
 80016dc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2220      	movs	r2, #32
 80016e4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d118      	bne.n	8001720 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016fc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2200      	movs	r2, #0
 8001706:	2120      	movs	r1, #32
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 f84a 	bl	80017a2 <I2C_WaitOnFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e01c      	b.n	8001752 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2220      	movs	r2, #32
 800171e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3301      	adds	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	f63f af3b 	bhi.w	80015a6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2220      	movs	r2, #32
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	f043 0220 	orr.w	r2, r3, #32
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001750:	2302      	movs	r3, #2
  }
}
 8001752:	4618      	mov	r0, r3
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b02      	cmp	r3, #2
 800176e:	d103      	bne.n	8001778 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b01      	cmp	r3, #1
 8001784:	d007      	beq.n	8001796 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	619a      	str	r2, [r3, #24]
  }
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4613      	mov	r3, r2
 80017b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b2:	e022      	b.n	80017fa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ba:	d01e      	beq.n	80017fa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017bc:	f7ff fac2 	bl	8000d44 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d302      	bcc.n	80017d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d113      	bne.n	80017fa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f043 0220 	orr.w	r2, r3, #32
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2220      	movs	r2, #32
 80017e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699a      	ldr	r2, [r3, #24]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4013      	ands	r3, r2
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	429a      	cmp	r2, r3
 8001808:	bf0c      	ite	eq
 800180a:	2301      	moveq	r3, #1
 800180c:	2300      	movne	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	429a      	cmp	r2, r3
 8001816:	d0cd      	beq.n	80017b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800182e:	e02c      	b.n	800188a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 f871 	bl	800191c <I2C_IsErrorOccurred>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e02a      	b.n	800189a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184a:	d01e      	beq.n	800188a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800184c:	f7ff fa7a 	bl	8000d44 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	429a      	cmp	r2, r3
 800185a:	d302      	bcc.n	8001862 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d113      	bne.n	800188a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f043 0220 	orr.w	r2, r3, #32
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2220      	movs	r2, #32
 8001872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e007      	b.n	800189a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b02      	cmp	r3, #2
 8001896:	d1cb      	bne.n	8001830 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018ae:	e028      	b.n	8001902 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f831 	bl	800191c <I2C_IsErrorOccurred>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e026      	b.n	8001912 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018c4:	f7ff fa3e 	bl	8000d44 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d302      	bcc.n	80018da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d113      	bne.n	8001902 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f043 0220 	orr.w	r2, r3, #32
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2220      	movs	r2, #32
 80018ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e007      	b.n	8001912 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b20      	cmp	r3, #32
 800190e:	d1cf      	bne.n	80018b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	d075      	beq.n	8001a34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2210      	movs	r2, #16
 800194e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001950:	e056      	b.n	8001a00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d052      	beq.n	8001a00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800195a:	f7ff f9f3 	bl	8000d44 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	d302      	bcc.n	8001970 <I2C_IsErrorOccurred+0x54>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d147      	bne.n	8001a00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001982:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001992:	d12e      	bne.n	80019f2 <I2C_IsErrorOccurred+0xd6>
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800199a:	d02a      	beq.n	80019f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800199c:	7cfb      	ldrb	r3, [r7, #19]
 800199e:	2b20      	cmp	r3, #32
 80019a0:	d027      	beq.n	80019f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80019b2:	f7ff f9c7 	bl	8000d44 <HAL_GetTick>
 80019b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019b8:	e01b      	b.n	80019f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019ba:	f7ff f9c3 	bl	8000d44 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b19      	cmp	r3, #25
 80019c6:	d914      	bls.n	80019f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f043 0220 	orr.w	r2, r3, #32
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d1dc      	bne.n	80019ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d003      	beq.n	8001a16 <I2C_IsErrorOccurred+0xfa>
 8001a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d09d      	beq.n	8001952 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d103      	bne.n	8001a26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2220      	movs	r2, #32
 8001a24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d01c      	beq.n	8001ae4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fe55 	bl	800175a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6859      	ldr	r1, [r3, #4]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <I2C_IsErrorOccurred+0x1d4>)
 8001abc:	400b      	ands	r3, r1
 8001abe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	fe00e800 	.word	0xfe00e800

08001af4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	817b      	strh	r3, [r7, #10]
 8001b02:	4613      	mov	r3, r2
 8001b04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b06:	897b      	ldrh	r3, [r7, #10]
 8001b08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b0c:	7a7b      	ldrb	r3, [r7, #9]
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	0d5b      	lsrs	r3, r3, #21
 8001b2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <I2C_TransferConfig+0x60>)
 8001b34:	430b      	orrs	r3, r1
 8001b36:	43db      	mvns	r3, r3
 8001b38:	ea02 0103 	and.w	r1, r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b46:	bf00      	nop
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	03ff63ff 	.word	0x03ff63ff

08001b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d138      	bne.n	8001be0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e032      	b.n	8001be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2224      	movs	r2, #36	; 0x24
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001baa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e000      	b.n	8001be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
  }
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d139      	bne.n	8001c78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e033      	b.n	8001c7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2224      	movs	r2, #36	; 0x24
 8001c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e000      	b.n	8001c7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40007000 	.word	0x40007000

08001ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb2:	d130      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc0:	d038      	beq.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cca:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2232      	movs	r2, #50	; 0x32
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	; (8001d4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0c9b      	lsrs	r3, r3, #18
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce8:	e002      	b.n	8001cf0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfc:	d102      	bne.n	8001d04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f2      	bne.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d10:	d110      	bne.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e00f      	b.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d22:	d007      	beq.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d2c:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40007000 	.word	0x40007000
 8001d48:	20000010 	.word	0x20000010
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f000 bc02 	b.w	8002568 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d64:	4b96      	ldr	r3, [pc, #600]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d6e:	4b94      	ldr	r3, [pc, #592]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80e4 	beq.w	8001f4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_RCC_OscConfig+0x4c>
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	f040 808b 	bne.w	8001eaa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	f040 8087 	bne.w	8001eaa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d9c:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x64>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e3d9      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_RCC_OscConfig+0x7e>
 8001dc4:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dcc:	e005      	b.n	8001dda <HAL_RCC_OscConfig+0x8a>
 8001dce:	4b7c      	ldr	r3, [pc, #496]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d223      	bcs.n	8001e26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fd54 	bl	8002890 <RCC_SetFlashLatencyFromMSIRange>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e3ba      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df2:	4b73      	ldr	r3, [pc, #460]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a72      	ldr	r2, [pc, #456]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b70      	ldr	r3, [pc, #448]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	496d      	ldr	r1, [pc, #436]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	4968      	ldr	r1, [pc, #416]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
 8001e24:	e025      	b.n	8001e72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e26:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a65      	ldr	r2, [pc, #404]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4960      	ldr	r1, [pc, #384]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e44:	4b5e      	ldr	r3, [pc, #376]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	495b      	ldr	r1, [pc, #364]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fd14 	bl	8002890 <RCC_SetFlashLatencyFromMSIRange>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e37a      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e72:	f000 fc81 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8001e76:	4602      	mov	r2, r0
 8001e78:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	4950      	ldr	r1, [pc, #320]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e84:	5ccb      	ldrb	r3, [r1, r3]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8e:	4a4e      	ldr	r2, [pc, #312]	; (8001fc8 <HAL_RCC_OscConfig+0x278>)
 8001e90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe ff04 	bl	8000ca4 <HAL_InitTick>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d052      	beq.n	8001f4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	e35e      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d032      	beq.n	8001f18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a42      	ldr	r2, [pc, #264]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ebe:	f7fe ff41 	bl	8000d44 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec6:	f7fe ff3d 	bl	8000d44 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e347      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a35      	ldr	r2, [pc, #212]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001eea:	f043 0308 	orr.w	r3, r3, #8
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4930      	ldr	r1, [pc, #192]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	492b      	ldr	r1, [pc, #172]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
 8001f16:	e01a      	b.n	8001f4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	f023 0301 	bic.w	r3, r3, #1
 8001f22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f24:	f7fe ff0e 	bl	8000d44 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f2c:	f7fe ff0a 	bl	8000d44 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e314      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1dc>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d073      	beq.n	8002042 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x21c>
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d10e      	bne.n	8001f84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d063      	beq.n	8002040 <HAL_RCC_OscConfig+0x2f0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d15f      	bne.n	8002040 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e2f1      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_OscConfig+0x24c>
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e025      	b.n	8001fe8 <HAL_RCC_OscConfig+0x298>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa4:	d114      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x280>
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a02      	ldr	r2, [pc, #8]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e013      	b.n	8001fe8 <HAL_RCC_OscConfig+0x298>
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08005118 	.word	0x08005118
 8001fc8:	20000010 	.word	0x20000010
 8001fcc:	20000014 	.word	0x20000014
 8001fd0:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a9f      	ldr	r2, [pc, #636]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b9d      	ldr	r3, [pc, #628]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a9c      	ldr	r2, [pc, #624]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fea8 	bl	8000d44 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe fea4 	bl	8000d44 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e2ae      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200a:	4b92      	ldr	r3, [pc, #584]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x2a8>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fe94 	bl	8000d44 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe fe90 	bl	8000d44 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e29a      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002032:	4b88      	ldr	r3, [pc, #544]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x2d0>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d060      	beq.n	8002110 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b04      	cmp	r3, #4
 8002052:	d005      	beq.n	8002060 <HAL_RCC_OscConfig+0x310>
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b0c      	cmp	r3, #12
 8002058:	d119      	bne.n	800208e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d116      	bne.n	800208e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002060:	4b7c      	ldr	r3, [pc, #496]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_OscConfig+0x328>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e277      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b76      	ldr	r3, [pc, #472]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	4973      	ldr	r1, [pc, #460]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800208c:	e040      	b.n	8002110 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d023      	beq.n	80020de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002096:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6e      	ldr	r2, [pc, #440]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7fe fe4f 	bl	8000d44 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020aa:	f7fe fe4b 	bl	8000d44 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e255      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020bc:	4b65      	ldr	r3, [pc, #404]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b62      	ldr	r3, [pc, #392]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	495f      	ldr	r1, [pc, #380]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
 80020dc:	e018      	b.n	8002110 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a5c      	ldr	r2, [pc, #368]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7fe fe2b 	bl	8000d44 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7fe fe27 	bl	8000d44 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e231      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002104:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d03c      	beq.n	8002196 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01c      	beq.n	800215e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002124:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7fe fe06 	bl	8000d44 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7fe fe02 	bl	8000d44 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e20c      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800214e:	4b41      	ldr	r3, [pc, #260]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ef      	beq.n	800213c <HAL_RCC_OscConfig+0x3ec>
 800215c:	e01b      	b.n	8002196 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002164:	4a3b      	ldr	r2, [pc, #236]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7fe fde9 	bl	8000d44 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002176:	f7fe fde5 	bl	8000d44 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e1ef      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ef      	bne.n	8002176 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80a6 	beq.w	80022f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021a8:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	4a26      	ldr	r2, [pc, #152]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021be:	6593      	str	r3, [r2, #88]	; 0x58
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_RCC_OscConfig+0x508>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d118      	bne.n	800220e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021dc:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_OscConfig+0x508>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_RCC_OscConfig+0x508>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e8:	f7fe fdac 	bl	8000d44 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f0:	f7fe fda8 	bl	8000d44 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1b2      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_RCC_OscConfig+0x508>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d108      	bne.n	8002228 <HAL_RCC_OscConfig+0x4d8>
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002226:	e029      	b.n	800227c <HAL_RCC_OscConfig+0x52c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d115      	bne.n	800225c <HAL_RCC_OscConfig+0x50c>
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	4a07      	ldr	r2, [pc, #28]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002250:	e014      	b.n	800227c <HAL_RCC_OscConfig+0x52c>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	40007000 	.word	0x40007000
 800225c:	4b9a      	ldr	r3, [pc, #616]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	4a99      	ldr	r2, [pc, #612]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800226c:	4b96      	ldr	r3, [pc, #600]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	4a95      	ldr	r2, [pc, #596]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d016      	beq.n	80022b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fd5e 	bl	8000d44 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe fd5a 	bl	8000d44 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e162      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a2:	4b89      	ldr	r3, [pc, #548]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ed      	beq.n	800228c <HAL_RCC_OscConfig+0x53c>
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7fe fd47 	bl	8000d44 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fd43 	bl	8000d44 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e14b      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d0:	4b7d      	ldr	r3, [pc, #500]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ed      	bne.n	80022ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022de:	7ffb      	ldrb	r3, [r7, #31]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e4:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	4a77      	ldr	r2, [pc, #476]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 80022ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03c      	beq.n	8002376 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01c      	beq.n	800233e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002304:	4b70      	ldr	r3, [pc, #448]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230a:	4a6f      	ldr	r2, [pc, #444]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe fd16 	bl	8000d44 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800231c:	f7fe fd12 	bl	8000d44 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e11c      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800232e:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ef      	beq.n	800231c <HAL_RCC_OscConfig+0x5cc>
 800233c:	e01b      	b.n	8002376 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800233e:	4b62      	ldr	r3, [pc, #392]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002340:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002344:	4a60      	ldr	r2, [pc, #384]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe fcf9 	bl	8000d44 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002356:	f7fe fcf5 	bl	8000d44 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0ff      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002368:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 800236a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ef      	bne.n	8002356 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80f3 	beq.w	8002566 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	2b02      	cmp	r3, #2
 8002386:	f040 80c9 	bne.w	800251c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800238a:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0203 	and.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	429a      	cmp	r2, r3
 800239c:	d12c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	3b01      	subs	r3, #1
 80023aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d123      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d11b      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d113      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	3b01      	subs	r3, #1
 80023de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d109      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d06b      	beq.n	80024d0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d062      	beq.n	80024c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023fe:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0ac      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2d      	ldr	r2, [pc, #180]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002418:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800241a:	f7fe fc93 	bl	8000d44 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe fc8f 	bl	8000d44 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e099      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002446:	4013      	ands	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002450:	3a01      	subs	r2, #1
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	4311      	orrs	r1, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800245a:	0212      	lsls	r2, r2, #8
 800245c:	4311      	orrs	r1, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002462:	0852      	lsrs	r2, r2, #1
 8002464:	3a01      	subs	r2, #1
 8002466:	0552      	lsls	r2, r2, #21
 8002468:	4311      	orrs	r1, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800246e:	0852      	lsrs	r2, r2, #1
 8002470:	3a01      	subs	r2, #1
 8002472:	0652      	lsls	r2, r2, #25
 8002474:	4311      	orrs	r1, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800247a:	06d2      	lsls	r2, r2, #27
 800247c:	430a      	orrs	r2, r1
 800247e:	4912      	ldr	r1, [pc, #72]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002480:	4313      	orrs	r3, r2
 8002482:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800249c:	f7fe fc52 	bl	8000d44 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fc4e 	bl	8000d44 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e058      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <HAL_RCC_OscConfig+0x778>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024c2:	e050      	b.n	8002566 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e04f      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
 80024c8:	40021000 	.word	0x40021000
 80024cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d144      	bne.n	8002566 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a23      	ldr	r2, [pc, #140]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a20      	ldr	r2, [pc, #128]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024f4:	f7fe fc26 	bl	8000d44 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fc22 	bl	8000d44 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e02c      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x7ac>
 800251a:	e024      	b.n	8002566 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d01f      	beq.n	8002562 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 8002528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7fe fc09 	bl	8000d44 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fc05 	bl	8000d44 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e00f      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4905      	ldr	r1, [pc, #20]	; (8002570 <HAL_RCC_OscConfig+0x820>)
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_OscConfig+0x824>)
 800255c:	4013      	ands	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
 8002560:	e001      	b.n	8002566 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	feeefffc 	.word	0xfeeefffc

08002578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0e7      	b.n	800275c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800258c:	4b75      	ldr	r3, [pc, #468]	; (8002764 <HAL_RCC_ClockConfig+0x1ec>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d910      	bls.n	80025bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b72      	ldr	r3, [pc, #456]	; (8002764 <HAL_RCC_ClockConfig+0x1ec>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4970      	ldr	r1, [pc, #448]	; (8002764 <HAL_RCC_ClockConfig+0x1ec>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b6e      	ldr	r3, [pc, #440]	; (8002764 <HAL_RCC_ClockConfig+0x1ec>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0cf      	b.n	800275c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d010      	beq.n	80025ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	4b66      	ldr	r3, [pc, #408]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d908      	bls.n	80025ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b63      	ldr	r3, [pc, #396]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4960      	ldr	r1, [pc, #384]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d04c      	beq.n	8002690 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fe:	4b5a      	ldr	r3, [pc, #360]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d121      	bne.n	800264e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0a6      	b.n	800275c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002616:	4b54      	ldr	r3, [pc, #336]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d115      	bne.n	800264e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e09a      	b.n	800275c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800262e:	4b4e      	ldr	r3, [pc, #312]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e08e      	b.n	800275c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800263e:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e086      	b.n	800275c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800264e:	4b46      	ldr	r3, [pc, #280]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f023 0203 	bic.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4943      	ldr	r1, [pc, #268]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 800265c:	4313      	orrs	r3, r2
 800265e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7fe fb70 	bl	8000d44 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	e00a      	b.n	800267e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002668:	f7fe fb6c 	bl	8000d44 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e06e      	b.n	800275c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	4b3a      	ldr	r3, [pc, #232]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 020c 	and.w	r2, r3, #12
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	429a      	cmp	r2, r3
 800268e:	d1eb      	bne.n	8002668 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d010      	beq.n	80026be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d208      	bcs.n	80026be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	492b      	ldr	r1, [pc, #172]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_RCC_ClockConfig+0x1ec>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d210      	bcs.n	80026ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_RCC_ClockConfig+0x1ec>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 0207 	bic.w	r2, r3, #7
 80026d4:	4923      	ldr	r1, [pc, #140]	; (8002764 <HAL_RCC_ClockConfig+0x1ec>)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026dc:	4b21      	ldr	r3, [pc, #132]	; (8002764 <HAL_RCC_ClockConfig+0x1ec>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e036      	b.n	800275c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	4918      	ldr	r1, [pc, #96]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d009      	beq.n	800272c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4910      	ldr	r1, [pc, #64]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	4313      	orrs	r3, r2
 800272a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800272c:	f000 f824 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	490b      	ldr	r1, [pc, #44]	; (800276c <HAL_RCC_ClockConfig+0x1f4>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1f8>)
 800274a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1fc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe faa7 	bl	8000ca4 <HAL_InitTick>
 8002756:	4603      	mov	r3, r0
 8002758:	72fb      	strb	r3, [r7, #11]

  return status;
 800275a:	7afb      	ldrb	r3, [r7, #11]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40022000 	.word	0x40022000
 8002768:	40021000 	.word	0x40021000
 800276c:	08005118 	.word	0x08005118
 8002770:	20000010 	.word	0x20000010
 8002774:	20000014 	.word	0x20000014

08002778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002786:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002790:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x34>
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d121      	bne.n	80027ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d11e      	bne.n	80027ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027b8:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	e005      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027d4:	4a2b      	ldr	r2, [pc, #172]	; (8002884 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10d      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCC_GetSysClockFreq+0x110>)
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	e004      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_RCC_GetSysClockFreq+0x114>)
 80027fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d134      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002806:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d003      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0xa6>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d003      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0xac>
 800281c:	e005      	b.n	800282a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_RCC_GetSysClockFreq+0x110>)
 8002820:	617b      	str	r3, [r7, #20]
      break;
 8002822:	e005      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_GetSysClockFreq+0x114>)
 8002826:	617b      	str	r3, [r7, #20]
      break;
 8002828:	e002      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	617b      	str	r3, [r7, #20]
      break;
 800282e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	3301      	adds	r3, #1
 800283c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	fb03 f202 	mul.w	r2, r3, r2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	0e5b      	lsrs	r3, r3, #25
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	3301      	adds	r3, #1
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002870:	69bb      	ldr	r3, [r7, #24]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	08005128 	.word	0x08005128
 8002888:	00f42400 	.word	0x00f42400
 800288c:	007a1200 	.word	0x007a1200

08002890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028a8:	f7ff f9ee 	bl	8001c88 <HAL_PWREx_GetVoltageRange>
 80028ac:	6178      	str	r0, [r7, #20]
 80028ae:	e014      	b.n	80028da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	4a24      	ldr	r2, [pc, #144]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ba:	6593      	str	r3, [r2, #88]	; 0x58
 80028bc:	4b22      	ldr	r3, [pc, #136]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028c8:	f7ff f9de 	bl	8001c88 <HAL_PWREx_GetVoltageRange>
 80028cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e0:	d10b      	bne.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b80      	cmp	r3, #128	; 0x80
 80028e6:	d919      	bls.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2ba0      	cmp	r3, #160	; 0xa0
 80028ec:	d902      	bls.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ee:	2302      	movs	r3, #2
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	e013      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f4:	2301      	movs	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	e010      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d902      	bls.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002900:	2303      	movs	r3, #3
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e00a      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d102      	bne.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800290c:	2302      	movs	r3, #2
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	e004      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b70      	cmp	r3, #112	; 0x70
 8002916:	d101      	bne.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 0207 	bic.w	r2, r3, #7
 8002924:	4909      	ldr	r1, [pc, #36]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	429a      	cmp	r2, r3
 8002938:	d001      	beq.n	800293e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	40022000 	.word	0x40022000

08002950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002958:	2300      	movs	r3, #0
 800295a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800295c:	2300      	movs	r3, #0
 800295e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002968:	2b00      	cmp	r3, #0
 800296a:	d031      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002974:	d01a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002976:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800297a:	d814      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002984:	d10f      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002986:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	4a5c      	ldr	r2, [pc, #368]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002992:	e00c      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f9ce 	bl	8002d3c <RCCEx_PLLSAI1_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a4:	e003      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	74fb      	strb	r3, [r7, #19]
      break;
 80029aa:	e000      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80029ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10b      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029b4:	4b51      	ldr	r3, [pc, #324]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	494e      	ldr	r1, [pc, #312]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029ca:	e001      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 809e 	beq.w	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029e2:	4b46      	ldr	r3, [pc, #280]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f8:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	4a3f      	ldr	r2, [pc, #252]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6593      	str	r3, [r2, #88]	; 0x58
 8002a04:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a14:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a39      	ldr	r2, [pc, #228]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a20:	f7fe f990 	bl	8000d44 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a26:	e009      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7fe f98c 	bl	8000d44 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d902      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	74fb      	strb	r3, [r7, #19]
        break;
 8002a3a:	e005      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a3c:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d15a      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01e      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d019      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a76:	4b21      	ldr	r3, [pc, #132]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a96:	4a19      	ldr	r2, [pc, #100]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d016      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe f94c 	bl	8000d44 <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe f948 	bl	8000d44 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d902      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	74fb      	strb	r3, [r7, #19]
            break;
 8002ac6:	e006      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0ec      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aea:	4904      	ldr	r1, [pc, #16]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002af2:	e009      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	74bb      	strb	r3, [r7, #18]
 8002af8:	e006      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b08:	7c7b      	ldrb	r3, [r7, #17]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0e:	4b8a      	ldr	r3, [pc, #552]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	4a89      	ldr	r2, [pc, #548]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b26:	4b84      	ldr	r3, [pc, #528]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f023 0203 	bic.w	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4980      	ldr	r1, [pc, #512]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b48:	4b7b      	ldr	r3, [pc, #492]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f023 020c 	bic.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	4978      	ldr	r1, [pc, #480]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b6a:	4b73      	ldr	r3, [pc, #460]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	496f      	ldr	r1, [pc, #444]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b8c:	4b6a      	ldr	r3, [pc, #424]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	4967      	ldr	r1, [pc, #412]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bae:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	495e      	ldr	r1, [pc, #376]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	4956      	ldr	r1, [pc, #344]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf2:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	494d      	ldr	r1, [pc, #308]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d028      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c14:	4b48      	ldr	r3, [pc, #288]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4945      	ldr	r1, [pc, #276]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c32:	d106      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c34:	4b40      	ldr	r3, [pc, #256]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a3f      	ldr	r2, [pc, #252]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3e:	60d3      	str	r3, [r2, #12]
 8002c40:	e011      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c4a:	d10c      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f872 	bl	8002d3c <RCCEx_PLLSAI1_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c5c:	7cfb      	ldrb	r3, [r7, #19]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002c62:	7cfb      	ldrb	r3, [r7, #19]
 8002c64:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d028      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	492d      	ldr	r1, [pc, #180]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4a28      	ldr	r2, [pc, #160]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9c:	60d3      	str	r3, [r2, #12]
 8002c9e:	e011      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f843 	bl	8002d3c <RCCEx_PLLSAI1_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01c      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cde:	4916      	ldr	r1, [pc, #88]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cee:	d10c      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f820 	bl	8002d3c <RCCEx_PLLSAI1_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002d06:	7cfb      	ldrb	r3, [r7, #19]
 8002d08:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	4904      	ldr	r1, [pc, #16]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000

08002d3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d4a:	4b74      	ldr	r3, [pc, #464]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d018      	beq.n	8002d88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d56:	4b71      	ldr	r3, [pc, #452]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0203 	and.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d10d      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
       ||
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d6e:	4b6b      	ldr	r3, [pc, #428]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d047      	beq.n	8002e12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	e044      	b.n	8002e12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d018      	beq.n	8002dc2 <RCCEx_PLLSAI1_Config+0x86>
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d825      	bhi.n	8002de0 <RCCEx_PLLSAI1_Config+0xa4>
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d002      	beq.n	8002d9e <RCCEx_PLLSAI1_Config+0x62>
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d009      	beq.n	8002db0 <RCCEx_PLLSAI1_Config+0x74>
 8002d9c:	e020      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d9e:	4b5f      	ldr	r3, [pc, #380]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d11d      	bne.n	8002de6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dae:	e01a      	b.n	8002de6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002db0:	4b5a      	ldr	r3, [pc, #360]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d116      	bne.n	8002dea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc0:	e013      	b.n	8002dea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dc2:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dce:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dde:	e006      	b.n	8002dee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
      break;
 8002de4:	e004      	b.n	8002df0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002de6:	bf00      	nop
 8002de8:	e002      	b.n	8002df0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dea:	bf00      	nop
 8002dec:	e000      	b.n	8002df0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dee:	bf00      	nop
    }

    if(status == HAL_OK)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10d      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002df6:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	4943      	ldr	r1, [pc, #268]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d17c      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e18:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7fd ff8e 	bl	8000d44 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e2a:	e009      	b.n	8002e40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e2c:	f7fd ff8a 	bl	8000d44 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d902      	bls.n	8002e40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e3e:	e005      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e40:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1ef      	bne.n	8002e2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d15f      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d110      	bne.n	8002e7a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e58:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6892      	ldr	r2, [r2, #8]
 8002e68:	0211      	lsls	r1, r2, #8
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	06d2      	lsls	r2, r2, #27
 8002e70:	430a      	orrs	r2, r1
 8002e72:	492a      	ldr	r1, [pc, #168]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	610b      	str	r3, [r1, #16]
 8002e78:	e027      	b.n	8002eca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d112      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e80:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6892      	ldr	r2, [r2, #8]
 8002e90:	0211      	lsls	r1, r2, #8
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6912      	ldr	r2, [r2, #16]
 8002e96:	0852      	lsrs	r2, r2, #1
 8002e98:	3a01      	subs	r2, #1
 8002e9a:	0552      	lsls	r2, r2, #21
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	491f      	ldr	r1, [pc, #124]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	610b      	str	r3, [r1, #16]
 8002ea4:	e011      	b.n	8002eca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6892      	ldr	r2, [r2, #8]
 8002eb6:	0211      	lsls	r1, r2, #8
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6952      	ldr	r2, [r2, #20]
 8002ebc:	0852      	lsrs	r2, r2, #1
 8002ebe:	3a01      	subs	r2, #1
 8002ec0:	0652      	lsls	r2, r2, #25
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	4915      	ldr	r1, [pc, #84]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002eca:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ed4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fd ff35 	bl	8000d44 <HAL_GetTick>
 8002eda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002edc:	e009      	b.n	8002ef2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ede:	f7fd ff31 	bl	8000d44 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d902      	bls.n	8002ef2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	73fb      	strb	r3, [r7, #15]
          break;
 8002ef0:	e005      	b.n	8002efe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ef      	beq.n	8002ede <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	4903      	ldr	r1, [pc, #12]	; (8002f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000

08002f20 <__libc_init_array>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	4d0d      	ldr	r5, [pc, #52]	; (8002f58 <__libc_init_array+0x38>)
 8002f24:	4c0d      	ldr	r4, [pc, #52]	; (8002f5c <__libc_init_array+0x3c>)
 8002f26:	1b64      	subs	r4, r4, r5
 8002f28:	10a4      	asrs	r4, r4, #2
 8002f2a:	2600      	movs	r6, #0
 8002f2c:	42a6      	cmp	r6, r4
 8002f2e:	d109      	bne.n	8002f44 <__libc_init_array+0x24>
 8002f30:	4d0b      	ldr	r5, [pc, #44]	; (8002f60 <__libc_init_array+0x40>)
 8002f32:	4c0c      	ldr	r4, [pc, #48]	; (8002f64 <__libc_init_array+0x44>)
 8002f34:	f000 f87c 	bl	8003030 <_init>
 8002f38:	1b64      	subs	r4, r4, r5
 8002f3a:	10a4      	asrs	r4, r4, #2
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	42a6      	cmp	r6, r4
 8002f40:	d105      	bne.n	8002f4e <__libc_init_array+0x2e>
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f48:	4798      	blx	r3
 8002f4a:	3601      	adds	r6, #1
 8002f4c:	e7ee      	b.n	8002f2c <__libc_init_array+0xc>
 8002f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f52:	4798      	blx	r3
 8002f54:	3601      	adds	r6, #1
 8002f56:	e7f2      	b.n	8002f3e <__libc_init_array+0x1e>
 8002f58:	08005180 	.word	0x08005180
 8002f5c:	08005180 	.word	0x08005180
 8002f60:	08005180 	.word	0x08005180
 8002f64:	08005184 	.word	0x08005184

08002f68 <__itoa>:
 8002f68:	1e93      	subs	r3, r2, #2
 8002f6a:	2b22      	cmp	r3, #34	; 0x22
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	460c      	mov	r4, r1
 8002f70:	d904      	bls.n	8002f7c <__itoa+0x14>
 8002f72:	2300      	movs	r3, #0
 8002f74:	700b      	strb	r3, [r1, #0]
 8002f76:	461c      	mov	r4, r3
 8002f78:	4620      	mov	r0, r4
 8002f7a:	bd10      	pop	{r4, pc}
 8002f7c:	2a0a      	cmp	r2, #10
 8002f7e:	d109      	bne.n	8002f94 <__itoa+0x2c>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	da07      	bge.n	8002f94 <__itoa+0x2c>
 8002f84:	232d      	movs	r3, #45	; 0x2d
 8002f86:	700b      	strb	r3, [r1, #0]
 8002f88:	4240      	negs	r0, r0
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4421      	add	r1, r4
 8002f8e:	f000 f80d 	bl	8002fac <__utoa>
 8002f92:	e7f1      	b.n	8002f78 <__itoa+0x10>
 8002f94:	2100      	movs	r1, #0
 8002f96:	e7f9      	b.n	8002f8c <__itoa+0x24>

08002f98 <itoa>:
 8002f98:	f7ff bfe6 	b.w	8002f68 <__itoa>

08002f9c <memset>:
 8002f9c:	4402      	add	r2, r0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <memset+0xa>
 8002fa4:	4770      	bx	lr
 8002fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002faa:	e7f9      	b.n	8002fa0 <memset+0x4>

08002fac <__utoa>:
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	4c1f      	ldr	r4, [pc, #124]	; (800302c <__utoa+0x80>)
 8002fb0:	b08b      	sub	sp, #44	; 0x2c
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	466e      	mov	r6, sp
 8002fb8:	f104 0c20 	add.w	ip, r4, #32
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	6861      	ldr	r1, [r4, #4]
 8002fc0:	4637      	mov	r7, r6
 8002fc2:	c703      	stmia	r7!, {r0, r1}
 8002fc4:	3408      	adds	r4, #8
 8002fc6:	4564      	cmp	r4, ip
 8002fc8:	463e      	mov	r6, r7
 8002fca:	d1f7      	bne.n	8002fbc <__utoa+0x10>
 8002fcc:	7921      	ldrb	r1, [r4, #4]
 8002fce:	7139      	strb	r1, [r7, #4]
 8002fd0:	1e91      	subs	r1, r2, #2
 8002fd2:	6820      	ldr	r0, [r4, #0]
 8002fd4:	6038      	str	r0, [r7, #0]
 8002fd6:	2922      	cmp	r1, #34	; 0x22
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	d904      	bls.n	8002fe8 <__utoa+0x3c>
 8002fde:	7019      	strb	r1, [r3, #0]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	b00b      	add	sp, #44	; 0x2c
 8002fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe8:	1e58      	subs	r0, r3, #1
 8002fea:	4684      	mov	ip, r0
 8002fec:	fbb5 f7f2 	udiv	r7, r5, r2
 8002ff0:	fb02 5617 	mls	r6, r2, r7, r5
 8002ff4:	3628      	adds	r6, #40	; 0x28
 8002ff6:	446e      	add	r6, sp
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002ffe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003002:	462e      	mov	r6, r5
 8003004:	42b2      	cmp	r2, r6
 8003006:	f101 0101 	add.w	r1, r1, #1
 800300a:	463d      	mov	r5, r7
 800300c:	d9ee      	bls.n	8002fec <__utoa+0x40>
 800300e:	2200      	movs	r2, #0
 8003010:	545a      	strb	r2, [r3, r1]
 8003012:	1919      	adds	r1, r3, r4
 8003014:	1aa5      	subs	r5, r4, r2
 8003016:	42aa      	cmp	r2, r5
 8003018:	dae3      	bge.n	8002fe2 <__utoa+0x36>
 800301a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800301e:	780e      	ldrb	r6, [r1, #0]
 8003020:	7006      	strb	r6, [r0, #0]
 8003022:	3201      	adds	r2, #1
 8003024:	f801 5901 	strb.w	r5, [r1], #-1
 8003028:	e7f4      	b.n	8003014 <__utoa+0x68>
 800302a:	bf00      	nop
 800302c:	08005158 	.word	0x08005158

08003030 <_init>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr

0800303c <_fini>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr
