
DAC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004104  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08004298  08004298  00014298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b0  080044b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044b0  080044b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044b0  080044b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  080044c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080044c4  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0d9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c11  00000000  00000000  0002d115  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0002ed28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  0002f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020531  00000000  00000000  00030580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a49d  00000000  00000000  00050ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6e6f  00000000  00000000  0005af4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121dbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003840  00000000  00000000  00121e38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800427c 	.word	0x0800427c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	0800427c 	.word	0x0800427c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr
 8000b0c:	0000      	movs	r0, r0
	...

08000b10 <calsin>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t sine_val[100];
#define PI 3.1415926

void calsin(){
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
	for (int i=0; i<100;i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	e03a      	b.n	8000b92 <calsin+0x82>
		sine_val[i]= ((sin(i*2*PI/100)+1)*(4096/2));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fca7 	bl	8000474 <__aeabi_i2d>
 8000b26:	a322      	add	r3, pc, #136	; (adr r3, 8000bb0 <calsin+0xa0>)
 8000b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2c:	f7ff fd0c 	bl	8000548 <__aeabi_dmul>
 8000b30:	4603      	mov	r3, r0
 8000b32:	460c      	mov	r4, r1
 8000b34:	4618      	mov	r0, r3
 8000b36:	4621      	mov	r1, r4
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <calsin+0x90>)
 8000b3e:	f7ff fe2d 	bl	800079c <__aeabi_ddiv>
 8000b42:	4603      	mov	r3, r0
 8000b44:	460c      	mov	r4, r1
 8000b46:	ec44 3b17 	vmov	d7, r3, r4
 8000b4a:	eeb0 0a47 	vmov.f32	s0, s14
 8000b4e:	eef0 0a67 	vmov.f32	s1, s15
 8000b52:	f002 fb81 	bl	8003258 <sin>
 8000b56:	ec51 0b10 	vmov	r0, r1, d0
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <calsin+0x94>)
 8000b60:	f7ff fb3c 	bl	80001dc <__adddf3>
 8000b64:	4603      	mov	r3, r0
 8000b66:	460c      	mov	r4, r1
 8000b68:	4618      	mov	r0, r3
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <calsin+0x98>)
 8000b72:	f7ff fce9 	bl	8000548 <__aeabi_dmul>
 8000b76:	4603      	mov	r3, r0
 8000b78:	460c      	mov	r4, r1
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	4621      	mov	r1, r4
 8000b7e:	f7ff ffa5 	bl	8000acc <__aeabi_d2uiz>
 8000b82:	4601      	mov	r1, r0
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <calsin+0x9c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<100;i++){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b63      	cmp	r3, #99	; 0x63
 8000b96:	ddc1      	ble.n	8000b1c <calsin+0xc>
//		HAL_Delay(500);
	}
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd90      	pop	{r4, r7, pc}
 8000ba0:	40590000 	.word	0x40590000
 8000ba4:	3ff00000 	.word	0x3ff00000
 8000ba8:	40a00000 	.word	0x40a00000
 8000bac:	2000003c 	.word	0x2000003c
 8000bb0:	4d12d84a 	.word	0x4d12d84a
 8000bb4:	400921fb 	.word	0x400921fb

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f000 fa60 	bl	8001082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f81d 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 f8fd 	bl	8000dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bca:	f000 f8dd 	bl	8000d88 <MX_DMA_Init>
  MX_DAC1_Init();
 8000bce:	f000 f85d 	bl	8000c8c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000bd2:	f000 f88d 	bl	8000cf0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <main+0x3c>)
 8000bd8:	f002 f8a8 	bl	8002d2c <HAL_TIM_Base_Start>
  calsin();
 8000bdc:	f7ff ff98 	bl	8000b10 <calsin>
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8000be0:	2300      	movs	r3, #0
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <main+0x40>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <main+0x44>)
 8000bec:	f000 fc14 	bl	8001418 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <main+0x38>
 8000bf2:	bf00      	nop
 8000bf4:	20000214 	.word	0x20000214
 8000bf8:	2000003c 	.word	0x2000003c
 8000bfc:	20000028 	.word	0x20000028

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b096      	sub	sp, #88	; 0x58
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2244      	movs	r2, #68	; 0x44
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fb1a 	bl	8003248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c22:	2310      	movs	r3, #16
 8000c24:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c2e:	2360      	movs	r3, #96	; 0x60
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fa32 	bl	80020a4 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000c46:	f000 f8d5 	bl	8000df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fe3e 	bl	80028e4 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c6e:	f000 f8c1 	bl	8000df4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c76:	f001 f9bf 	bl	8001ff8 <HAL_PWREx_ControlVoltageScaling>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c80:	f000 f8b8 	bl	8000df4 <Error_Handler>
  }
}
 8000c84:	bf00      	nop
 8000c86:	3758      	adds	r7, #88	; 0x58
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2224      	movs	r2, #36	; 0x24
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fad5 	bl	8003248 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_DAC1_Init+0x5c>)
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_DAC1_Init+0x60>)
 8000ca2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ca4:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <MX_DAC1_Init+0x5c>)
 8000ca6:	f000 fb94 	bl	80013d2 <HAL_DAC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000cb0:	f000 f8a0 	bl	8000df4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000cb8:	2324      	movs	r3, #36	; 0x24
 8000cba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_DAC1_Init+0x5c>)
 8000cd0:	f000 fc7e 	bl	80015d0 <HAL_DAC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000cda:	f000 f88b 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000028 	.word	0x20000028
 8000cec:	40007400 	.word	0x40007400

08000cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d18:	2203      	movs	r2, #3
 8000d1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d24:	2264      	movs	r2, #100	; 0x64
 8000d26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d34:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d36:	f001 ffa1 	bl	8002c7c <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d40:	f000 f858 	bl	8000df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d52:	f002 f837 	bl	8002dc4 <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d5c:	f000 f84a 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d60:	2320      	movs	r3, #32
 8000d62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d6e:	f002 f9e1 	bl	8003134 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d78:	f000 f83c 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000214 	.word	0x20000214

08000d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_DMA_Init+0x38>)
 8000d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <MX_DMA_Init+0x38>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6493      	str	r3, [r2, #72]	; 0x48
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_DMA_Init+0x38>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	200d      	movs	r0, #13
 8000dac:	f000 fadb 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000db0:	200d      	movs	r0, #13
 8000db2:	f000 faf4 	bl	800139e <HAL_NVIC_EnableIRQ>

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_GPIO_Init+0x2c>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <MX_GPIO_Init+0x2c>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_GPIO_Init+0x2c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <Error_Handler+0x6>

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x44>)
 8000e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_MspInit+0x44>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_MspInit+0x44>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x44>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x44>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6593      	str	r3, [r2, #88]	; 0x58
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x44>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a2b      	ldr	r2, [pc, #172]	; (8000f10 <HAL_DAC_MspInit+0xcc>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d14f      	bne.n	8000f06 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e66:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	4a2a      	ldr	r2, [pc, #168]	; (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e70:	6593      	str	r3, [r2, #88]	; 0x58
 8000e72:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a24      	ldr	r2, [pc, #144]	; (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e96:	2310      	movs	r3, #16
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eac:	f000 ff2c 	bl	8001d08 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000eb2:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <HAL_DAC_MspInit+0xd8>)
 8000eb4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000eb8:	2206      	movs	r2, #6
 8000eba:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000edc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ee0:	2220      	movs	r2, #32
 8000ee2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000eea:	480b      	ldr	r0, [pc, #44]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000eec:	f000 fd14 	bl	8001918 <HAL_DMA_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000ef6:	f7ff ff7d 	bl	8000df4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40007400 	.word	0x40007400
 8000f14:	40021000 	.word	0x40021000
 8000f18:	200001cc 	.word	0x200001cc
 8000f1c:	40020030 	.word	0x40020030

08000f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f30:	d10b      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_Base_MspInit+0x38>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_TIM_Base_MspInit+0x38>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_TIM_Base_MspInit+0x38>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f8c0 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <DMA1_Channel3_IRQHandler+0x10>)
 8000fb6:	f000 fdc7 	bl	8001b48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200001cc 	.word	0x200001cc

08000fc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <SystemInit+0x64>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a16      	ldr	r2, [pc, #88]	; (8001028 <SystemInit+0x64>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <SystemInit+0x68>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a13      	ldr	r2, [pc, #76]	; (800102c <SystemInit+0x68>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <SystemInit+0x68>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <SystemInit+0x68>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <SystemInit+0x68>)
 8000ff0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ff4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ff8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <SystemInit+0x68>)
 8000ffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001000:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <SystemInit+0x68>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <SystemInit+0x68>)
 8001008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <SystemInit+0x68>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SystemInit+0x64>)
 8001016:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800101a:	609a      	str	r2, [r3, #8]
#endif
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	40021000 	.word	0x40021000

08001030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff ffc6 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001038:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800103a:	e003      	b.n	8001044 <LoopCopyDataInit>

0800103c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800103e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001040:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001042:	3104      	adds	r1, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001048:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800104a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800104c:	d3f6      	bcc.n	800103c <CopyDataInit>
	ldr	r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001050:	e002      	b.n	8001058 <LoopFillZerobss>

08001052 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001052:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001054:	f842 3b04 	str.w	r3, [r2], #4

08001058 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <LoopForever+0x16>)
	cmp	r2, r3
 800105a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800105c:	d3f9      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f002 f8cf 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001062:	f7ff fda9 	bl	8000bb8 <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001068:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800106c:	080044b8 	.word	0x080044b8
	ldr	r0, =_sdata
 8001070:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001074:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001078:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800107c:	20000264 	.word	0x20000264

08001080 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_IRQHandler>

08001082 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f95f 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f80e 	bl	80010b4 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	e001      	b.n	80010a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a4:	f7ff feaa 	bl	8000dfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_InitTick+0x6c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <HAL_InitTick+0x70>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_InitTick+0x6c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f96b 	bl	80013ba <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d809      	bhi.n	8001104 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 f935 	bl	8001366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_InitTick+0x74>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e007      	b.n	8001114 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e004      	b.n	8001114 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e001      	b.n	8001114 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	20000000 	.word	0x20000000
 8001128:	20000004 	.word	0x20000004

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008
 8001150:	20000260 	.word	0x20000260

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000260 	.word	0x20000260

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_Delay+0x40>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000008 	.word	0x20000008

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff3e 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff31 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa2 	bl	800130c <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e014      	b.n	800140e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	791b      	ldrb	r3, [r3, #4]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d105      	bne.n	80013fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fd25 	bl	8000e44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2202      	movs	r2, #2
 80013fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	795b      	ldrb	r3, [r3, #5]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_DAC_Start_DMA+0x1e>
 8001432:	2302      	movs	r3, #2
 8001434:	e09e      	b.n	8001574 <HAL_DAC_Start_DMA+0x15c>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2201      	movs	r2, #1
 800143a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2202      	movs	r2, #2
 8001440:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d12a      	bne.n	800149e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_DAC_Start_DMA+0x164>)
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_DAC_Start_DMA+0x168>)
 8001456:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a49      	ldr	r2, [pc, #292]	; (8001584 <HAL_DAC_Start_DMA+0x16c>)
 800145e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800146e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	2b04      	cmp	r3, #4
 8001474:	d009      	beq.n	800148a <HAL_DAC_Start_DMA+0x72>
 8001476:	2b08      	cmp	r3, #8
 8001478:	d00c      	beq.n	8001494 <HAL_DAC_Start_DMA+0x7c>
 800147a:	2b00      	cmp	r3, #0
 800147c:	d000      	beq.n	8001480 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800147e:	e039      	b.n	80014f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3308      	adds	r3, #8
 8001486:	613b      	str	r3, [r7, #16]
        break;
 8001488:	e034      	b.n	80014f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	330c      	adds	r3, #12
 8001490:	613b      	str	r3, [r7, #16]
        break;
 8001492:	e02f      	b.n	80014f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3310      	adds	r3, #16
 800149a:	613b      	str	r3, [r7, #16]
        break;
 800149c:	e02a      	b.n	80014f4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	4a39      	ldr	r2, [pc, #228]	; (8001588 <HAL_DAC_Start_DMA+0x170>)
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	4a38      	ldr	r2, [pc, #224]	; (800158c <HAL_DAC_Start_DMA+0x174>)
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	4a37      	ldr	r2, [pc, #220]	; (8001590 <HAL_DAC_Start_DMA+0x178>)
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014c4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d009      	beq.n	80014e0 <HAL_DAC_Start_DMA+0xc8>
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d00c      	beq.n	80014ea <HAL_DAC_Start_DMA+0xd2>
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d000      	beq.n	80014d6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80014d4:	e00e      	b.n	80014f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3314      	adds	r3, #20
 80014dc:	613b      	str	r3, [r7, #16]
        break;
 80014de:	e009      	b.n	80014f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3318      	adds	r3, #24
 80014e6:	613b      	str	r3, [r7, #16]
        break;
 80014e8:	e004      	b.n	80014f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	331c      	adds	r3, #28
 80014f0:	613b      	str	r3, [r7, #16]
        break;
 80014f2:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d111      	bne.n	800151e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001508:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6898      	ldr	r0, [r3, #8]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	f000 fab8 	bl	8001a88 <HAL_DMA_Start_IT>
 8001518:	4603      	mov	r3, r0
 800151a:	75fb      	strb	r3, [r7, #23]
 800151c:	e010      	b.n	8001540 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800152c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	68d8      	ldr	r0, [r3, #12]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	f000 faa6 	bl	8001a88 <HAL_DMA_Start_IT>
 800153c:	4603      	mov	r3, r0
 800153e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10c      	bne.n	8001566 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2201      	movs	r2, #1
 800155a:	409a      	lsls	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e005      	b.n	8001572 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	f043 0204 	orr.w	r2, r3, #4
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001572:	7dfb      	ldrb	r3, [r7, #23]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	08001805 	.word	0x08001805
 8001580:	08001827 	.word	0x08001827
 8001584:	08001843 	.word	0x08001843
 8001588:	080018ad 	.word	0x080018ad
 800158c:	080018cf 	.word	0x080018cf
 8001590:	080018eb 	.word	0x080018eb

08001594 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	795b      	ldrb	r3, [r3, #5]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_DAC_ConfigChannel+0x1c>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e107      	b.n	80017fc <HAL_DAC_ConfigChannel+0x22c>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2202      	movs	r2, #2
 80015f6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d174      	bne.n	80016ea <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001600:	f7ff fda8 	bl	8001154 <HAL_GetTick>
 8001604:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d134      	bne.n	8001676 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800160c:	e011      	b.n	8001632 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800160e:	f7ff fda1 	bl	8001154 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d90a      	bls.n	8001632 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	f043 0208 	orr.w	r2, r3, #8
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2203      	movs	r2, #3
 800162c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0e4      	b.n	80017fc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1e6      	bne.n	800160e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f7ff fd93 	bl	800116c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	6992      	ldr	r2, [r2, #24]
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
 8001650:	e01e      	b.n	8001690 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001652:	f7ff fd7f 	bl	8001154 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d90a      	bls.n	8001676 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	f043 0208 	orr.w	r2, r3, #8
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2203      	movs	r2, #3
 8001670:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0c2      	b.n	80017fc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167c:	2b00      	cmp	r3, #0
 800167e:	dbe8      	blt.n	8001652 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff fd73 	bl	800116c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	6992      	ldr	r2, [r2, #24]
 800168e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	ea02 0103 	and.w	r1, r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	409a      	lsls	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	21ff      	movs	r1, #255	; 0xff
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	ea02 0103 	and.w	r1, r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	6a1a      	ldr	r2, [r3, #32]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	409a      	lsls	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d11d      	bne.n	800172e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f8:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	221f      	movs	r2, #31
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001734:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2207      	movs	r2, #7
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	431a      	orrs	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	400a      	ands	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	22c0      	movs	r2, #192	; 0xc0
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43da      	mvns	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	400a      	ands	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff febe 	bl	8001594 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	711a      	strb	r2, [r3, #4]
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff feb7 	bl	80015a8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f043 0204 	orr.w	r2, r3, #4
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fead 	bl	80015bc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	711a      	strb	r2, [r3, #4]
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f7ff ffd8 	bl	8001870 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2201      	movs	r2, #1
 80018c4:	711a      	strb	r2, [r3, #4]
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7ff ffd1 	bl	8001884 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f043 0204 	orr.w	r2, r3, #4
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff ffc7 	bl	8001898 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2201      	movs	r2, #1
 800190e:	711a      	strb	r2, [r3, #4]
}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e098      	b.n	8001a5c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <HAL_DMA_Init+0x150>)
 8001932:	429a      	cmp	r2, r3
 8001934:	d80f      	bhi.n	8001956 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <HAL_DMA_Init+0x154>)
 800193e:	4413      	add	r3, r2
 8001940:	4a4b      	ldr	r2, [pc, #300]	; (8001a70 <HAL_DMA_Init+0x158>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	009a      	lsls	r2, r3, #2
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a48      	ldr	r2, [pc, #288]	; (8001a74 <HAL_DMA_Init+0x15c>)
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
 8001954:	e00e      	b.n	8001974 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_DMA_Init+0x160>)
 800195e:	4413      	add	r3, r2
 8001960:	4a43      	ldr	r2, [pc, #268]	; (8001a70 <HAL_DMA_Init+0x158>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	009a      	lsls	r2, r3, #2
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a42      	ldr	r2, [pc, #264]	; (8001a7c <HAL_DMA_Init+0x164>)
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800198a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019ce:	d039      	beq.n	8001a44 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_DMA_Init+0x15c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d11a      	bne.n	8001a10 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_DMA_Init+0x168>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f003 031c 	and.w	r3, r3, #28
 80019e6:	210f      	movs	r1, #15
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4924      	ldr	r1, [pc, #144]	; (8001a80 <HAL_DMA_Init+0x168>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_DMA_Init+0x168>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	f003 031c 	and.w	r3, r3, #28
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	491d      	ldr	r1, [pc, #116]	; (8001a80 <HAL_DMA_Init+0x168>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
 8001a0e:	e019      	b.n	8001a44 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_DMA_Init+0x16c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	f003 031c 	and.w	r3, r3, #28
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	4917      	ldr	r1, [pc, #92]	; (8001a84 <HAL_DMA_Init+0x16c>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_DMA_Init+0x16c>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f003 031c 	and.w	r3, r3, #28
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	4911      	ldr	r1, [pc, #68]	; (8001a84 <HAL_DMA_Init+0x16c>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	40020407 	.word	0x40020407
 8001a6c:	bffdfff8 	.word	0xbffdfff8
 8001a70:	cccccccd 	.word	0xcccccccd
 8001a74:	40020000 	.word	0x40020000
 8001a78:	bffdfbf8 	.word	0xbffdfbf8
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	400200a8 	.word	0x400200a8
 8001a84:	400204a8 	.word	0x400204a8

08001a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_DMA_Start_IT+0x20>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e04b      	b.n	8001b40 <HAL_DMA_Start_IT+0xb8>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d13a      	bne.n	8001b32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0201 	bic.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f8e0 	bl	8001ca6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d008      	beq.n	8001b00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 020e 	orr.w	r2, r2, #14
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e00f      	b.n	8001b20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0204 	bic.w	r2, r2, #4
 8001b0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 020a 	orr.w	r2, r2, #10
 8001b1e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e005      	b.n	8001b3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b64:	f003 031c 	and.w	r3, r3, #28
 8001b68:	2204      	movs	r2, #4
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d026      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x7a>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d021      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0204 	bic.w	r2, r2, #4
 8001b9a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	f003 021c 	and.w	r2, r3, #28
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	2104      	movs	r1, #4
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d071      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001bc0:	e06c      	b.n	8001c9c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f003 031c 	and.w	r3, r3, #28
 8001bca:	2202      	movs	r2, #2
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d02e      	beq.n	8001c34 <HAL_DMA_IRQHandler+0xec>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d029      	beq.n	8001c34 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10b      	bne.n	8001c06 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 020a 	bic.w	r2, r2, #10
 8001bfc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f003 021c 	and.w	r2, r3, #28
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	2102      	movs	r1, #2
 8001c14:	fa01 f202 	lsl.w	r2, r1, r2
 8001c18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d038      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c32:	e033      	b.n	8001c9c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	f003 031c 	and.w	r3, r3, #28
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d02a      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x156>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d025      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 020e 	bic.w	r2, r2, #14
 8001c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f003 021c 	and.w	r2, r3, #28
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
}
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f003 021c 	and.w	r2, r3, #28
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b10      	cmp	r3, #16
 8001cd6:	d108      	bne.n	8001cea <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ce8:	e007      	b.n	8001cfa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	60da      	str	r2, [r3, #12]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d16:	e148      	b.n	8001faa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	4013      	ands	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 813a 	beq.w	8001fa4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d00b      	beq.n	8001d50 <HAL_GPIO_Init+0x48>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d007      	beq.n	8001d50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d44:	2b11      	cmp	r3, #17
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b12      	cmp	r3, #18
 8001d4e:	d130      	bne.n	8001db2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d86:	2201      	movs	r2, #1
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	f003 0201 	and.w	r2, r3, #1
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0xea>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d123      	bne.n	8001e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	08da      	lsrs	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3208      	adds	r2, #8
 8001dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	220f      	movs	r2, #15
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	6939      	ldr	r1, [r7, #16]
 8001e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0203 	and.w	r2, r3, #3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8094 	beq.w	8001fa4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7c:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e80:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6613      	str	r3, [r2, #96]	; 0x60
 8001e88:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e94:	4a4d      	ldr	r2, [pc, #308]	; (8001fcc <HAL_GPIO_Init+0x2c4>)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ebe:	d00d      	beq.n	8001edc <HAL_GPIO_Init+0x1d4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a43      	ldr	r2, [pc, #268]	; (8001fd0 <HAL_GPIO_Init+0x2c8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <HAL_GPIO_Init+0x1d0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a42      	ldr	r2, [pc, #264]	; (8001fd4 <HAL_GPIO_Init+0x2cc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d101      	bne.n	8001ed4 <HAL_GPIO_Init+0x1cc>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e004      	b.n	8001ede <HAL_GPIO_Init+0x1d6>
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	e002      	b.n	8001ede <HAL_GPIO_Init+0x1d6>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_GPIO_Init+0x1d6>
 8001edc:	2300      	movs	r3, #0
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	f002 0203 	and.w	r2, r2, #3
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	4093      	lsls	r3, r2
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eee:	4937      	ldr	r1, [pc, #220]	; (8001fcc <HAL_GPIO_Init+0x2c4>)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001efc:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f20:	4a2d      	ldr	r2, [pc, #180]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f74:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f47f aeaf 	bne.w	8001d18 <HAL_GPIO_Init+0x10>
  }
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	48000400 	.word	0x48000400
 8001fd4:	48000800 	.word	0x48000800
 8001fd8:	40010400 	.word	0x40010400

08001fdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002006:	d130      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002014:	d038      	beq.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002024:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2232      	movs	r2, #50	; 0x32
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	3301      	adds	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800203c:	e002      	b.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b01      	subs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002050:	d102      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f2      	bne.n	800203e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002064:	d110      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e00f      	b.n	800208a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002076:	d007      	beq.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002080:	4a05      	ldr	r2, [pc, #20]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002086:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40007000 	.word	0x40007000
 800209c:	20000000 	.word	0x20000000
 80020a0:	431bde83 	.word	0x431bde83

080020a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f000 bc11 	b.w	80028da <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b8:	4ba0      	ldr	r3, [pc, #640]	; (800233c <HAL_RCC_OscConfig+0x298>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c2:	4b9e      	ldr	r3, [pc, #632]	; (800233c <HAL_RCC_OscConfig+0x298>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80e4 	beq.w	80022a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_RCC_OscConfig+0x4c>
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	f040 808b 	bne.w	80021fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	f040 8087 	bne.w	80021fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020f0:	4b92      	ldr	r3, [pc, #584]	; (800233c <HAL_RCC_OscConfig+0x298>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_OscConfig+0x64>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e3e8      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	4b8b      	ldr	r3, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <HAL_RCC_OscConfig+0x7e>
 8002118:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002120:	e005      	b.n	800212e <HAL_RCC_OscConfig+0x8a>
 8002122:	4b86      	ldr	r3, [pc, #536]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212e:	4293      	cmp	r3, r2
 8002130:	d223      	bcs.n	800217a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fd40 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e3c9      	b.n	80028da <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002146:	4b7d      	ldr	r3, [pc, #500]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a7c      	ldr	r2, [pc, #496]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b7a      	ldr	r3, [pc, #488]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4977      	ldr	r1, [pc, #476]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002164:	4b75      	ldr	r3, [pc, #468]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	4972      	ldr	r1, [pc, #456]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e025      	b.n	80021c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800217a:	4b70      	ldr	r3, [pc, #448]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6f      	ldr	r2, [pc, #444]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b6d      	ldr	r3, [pc, #436]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	496a      	ldr	r1, [pc, #424]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002198:	4b68      	ldr	r3, [pc, #416]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	4965      	ldr	r1, [pc, #404]	; (800233c <HAL_RCC_OscConfig+0x298>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fd00 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e389      	b.n	80028da <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c6:	f000 fc6f 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 80021ca:	4601      	mov	r1, r0
 80021cc:	4b5b      	ldr	r3, [pc, #364]	; (800233c <HAL_RCC_OscConfig+0x298>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	4a5a      	ldr	r2, [pc, #360]	; (8002340 <HAL_RCC_OscConfig+0x29c>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	fa21 f303 	lsr.w	r3, r1, r3
 80021e2:	4a58      	ldr	r2, [pc, #352]	; (8002344 <HAL_RCC_OscConfig+0x2a0>)
 80021e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021e6:	4b58      	ldr	r3, [pc, #352]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe ff62 	bl	80010b4 <HAL_InitTick>
 80021f0:	4603      	mov	r3, r0
 80021f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d052      	beq.n	80022a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	e36d      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d032      	beq.n	800226c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002206:	4b4d      	ldr	r3, [pc, #308]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a4c      	ldr	r2, [pc, #304]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002212:	f7fe ff9f 	bl	8001154 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221a:	f7fe ff9b 	bl	8001154 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e356      	b.n	80028da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002238:	4b40      	ldr	r3, [pc, #256]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3f      	ldr	r2, [pc, #252]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b3d      	ldr	r3, [pc, #244]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	493a      	ldr	r1, [pc, #232]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	4935      	ldr	r1, [pc, #212]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
 800226a:	e01a      	b.n	80022a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002278:	f7fe ff6c 	bl	8001154 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002280:	f7fe ff68 	bl	8001154 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e323      	b.n	80028da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x1dc>
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d073      	beq.n	8002396 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_OscConfig+0x21c>
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d10e      	bne.n	80022d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d10b      	bne.n	80022d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_OscConfig+0x298>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d063      	beq.n	8002394 <HAL_RCC_OscConfig+0x2f0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d15f      	bne.n	8002394 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e300      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x24c>
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_RCC_OscConfig+0x298>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a15      	ldr	r2, [pc, #84]	; (800233c <HAL_RCC_OscConfig+0x298>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e01d      	b.n	800232c <HAL_RCC_OscConfig+0x288>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x270>
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_RCC_OscConfig+0x298>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a0f      	ldr	r2, [pc, #60]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a0c      	ldr	r2, [pc, #48]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0x288>
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a08      	ldr	r2, [pc, #32]	; (800233c <HAL_RCC_OscConfig+0x298>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a05      	ldr	r2, [pc, #20]	; (800233c <HAL_RCC_OscConfig+0x298>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01b      	beq.n	800236c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe ff0e 	bl	8001154 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233a:	e010      	b.n	800235e <HAL_RCC_OscConfig+0x2ba>
 800233c:	40021000 	.word	0x40021000
 8002340:	08004298 	.word	0x08004298
 8002344:	20000000 	.word	0x20000000
 8002348:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe ff02 	bl	8001154 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e2bd      	b.n	80028da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235e:	4baf      	ldr	r3, [pc, #700]	; (800261c <HAL_RCC_OscConfig+0x578>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x2a8>
 800236a:	e014      	b.n	8002396 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe fef2 	bl	8001154 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002374:	f7fe feee 	bl	8001154 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e2a9      	b.n	80028da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002386:	4ba5      	ldr	r3, [pc, #660]	; (800261c <HAL_RCC_OscConfig+0x578>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x2d0>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d060      	beq.n	8002464 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_OscConfig+0x310>
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	d119      	bne.n	80023e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d116      	bne.n	80023e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b4:	4b99      	ldr	r3, [pc, #612]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_OscConfig+0x328>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e286      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b93      	ldr	r3, [pc, #588]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	4990      	ldr	r1, [pc, #576]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e0:	e040      	b.n	8002464 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d023      	beq.n	8002432 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ea:	4b8c      	ldr	r3, [pc, #560]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a8b      	ldr	r2, [pc, #556]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7fe fead 	bl	8001154 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7fe fea9 	bl	8001154 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e264      	b.n	80028da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002410:	4b82      	ldr	r3, [pc, #520]	; (800261c <HAL_RCC_OscConfig+0x578>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241c:	4b7f      	ldr	r3, [pc, #508]	; (800261c <HAL_RCC_OscConfig+0x578>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	497c      	ldr	r1, [pc, #496]	; (800261c <HAL_RCC_OscConfig+0x578>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
 8002430:	e018      	b.n	8002464 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002432:	4b7a      	ldr	r3, [pc, #488]	; (800261c <HAL_RCC_OscConfig+0x578>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a79      	ldr	r2, [pc, #484]	; (800261c <HAL_RCC_OscConfig+0x578>)
 8002438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800243c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe fe89 	bl	8001154 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002446:	f7fe fe85 	bl	8001154 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e240      	b.n	80028da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002458:	4b70      	ldr	r3, [pc, #448]	; (800261c <HAL_RCC_OscConfig+0x578>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d03c      	beq.n	80024ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01c      	beq.n	80024b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002478:	4b68      	ldr	r3, [pc, #416]	; (800261c <HAL_RCC_OscConfig+0x578>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247e:	4a67      	ldr	r2, [pc, #412]	; (800261c <HAL_RCC_OscConfig+0x578>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe fe64 	bl	8001154 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe fe60 	bl	8001154 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e21b      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a2:	4b5e      	ldr	r3, [pc, #376]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80024a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0ef      	beq.n	8002490 <HAL_RCC_OscConfig+0x3ec>
 80024b0:	e01b      	b.n	80024ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b2:	4b5a      	ldr	r3, [pc, #360]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80024b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b8:	4a58      	ldr	r2, [pc, #352]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f7fe fe47 	bl	8001154 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ca:	f7fe fe43 	bl	8001154 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1fe      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024dc:	4b4f      	ldr	r3, [pc, #316]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80024de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1ef      	bne.n	80024ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80a6 	beq.w	8002644 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024fc:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b44      	ldr	r3, [pc, #272]	; (800261c <HAL_RCC_OscConfig+0x578>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	4a43      	ldr	r2, [pc, #268]	; (800261c <HAL_RCC_OscConfig+0x578>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	6593      	str	r3, [r2, #88]	; 0x58
 8002514:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_RCC_OscConfig+0x578>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002520:	2301      	movs	r3, #1
 8002522:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002524:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <HAL_RCC_OscConfig+0x57c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d118      	bne.n	8002562 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002530:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_RCC_OscConfig+0x57c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a3a      	ldr	r2, [pc, #232]	; (8002620 <HAL_RCC_OscConfig+0x57c>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253c:	f7fe fe0a 	bl	8001154 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002544:	f7fe fe06 	bl	8001154 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1c1      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002556:	4b32      	ldr	r3, [pc, #200]	; (8002620 <HAL_RCC_OscConfig+0x57c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d108      	bne.n	800257c <HAL_RCC_OscConfig+0x4d8>
 800256a:	4b2c      	ldr	r3, [pc, #176]	; (800261c <HAL_RCC_OscConfig+0x578>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	4a2a      	ldr	r2, [pc, #168]	; (800261c <HAL_RCC_OscConfig+0x578>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800257a:	e024      	b.n	80025c6 <HAL_RCC_OscConfig+0x522>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d110      	bne.n	80025a6 <HAL_RCC_OscConfig+0x502>
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <HAL_RCC_OscConfig+0x578>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	4a24      	ldr	r2, [pc, #144]	; (800261c <HAL_RCC_OscConfig+0x578>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002594:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_RCC_OscConfig+0x578>)
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259a:	4a20      	ldr	r2, [pc, #128]	; (800261c <HAL_RCC_OscConfig+0x578>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a4:	e00f      	b.n	80025c6 <HAL_RCC_OscConfig+0x522>
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	4a1b      	ldr	r2, [pc, #108]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fe fdc1 	bl	8001154 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fdbd 	bl	8001154 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e176      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_OscConfig+0x578>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0ed      	beq.n	80025d6 <HAL_RCC_OscConfig+0x532>
 80025fa:	e01a      	b.n	8002632 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7fe fdaa 	bl	8001154 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002602:	e00f      	b.n	8002624 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fda6 	bl	8001154 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d906      	bls.n	8002624 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e15f      	b.n	80028da <HAL_RCC_OscConfig+0x836>
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002624:	4baa      	ldr	r3, [pc, #680]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1e8      	bne.n	8002604 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002632:	7ffb      	ldrb	r3, [r7, #31]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002638:	4ba5      	ldr	r3, [pc, #660]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	4aa4      	ldr	r2, [pc, #656]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d03c      	beq.n	80026ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01c      	beq.n	8002692 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002658:	4b9d      	ldr	r3, [pc, #628]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800265a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800265e:	4a9c      	ldr	r2, [pc, #624]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fd74 	bl	8001154 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002670:	f7fe fd70 	bl	8001154 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e12b      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002682:	4b93      	ldr	r3, [pc, #588]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ef      	beq.n	8002670 <HAL_RCC_OscConfig+0x5cc>
 8002690:	e01b      	b.n	80026ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002692:	4b8f      	ldr	r3, [pc, #572]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002698:	4a8d      	ldr	r2, [pc, #564]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a2:	f7fe fd57 	bl	8001154 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026aa:	f7fe fd53 	bl	8001154 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e10e      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026bc:	4b84      	ldr	r3, [pc, #528]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 80026be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1ef      	bne.n	80026aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8102 	beq.w	80028d8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	2b02      	cmp	r3, #2
 80026da:	f040 80c5 	bne.w	8002868 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026de:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f003 0203 	and.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d12c      	bne.n	800274c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	3b01      	subs	r3, #1
 80026fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d123      	bne.n	800274c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d11b      	bne.n	800274c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d113      	bne.n	800274c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	3b01      	subs	r3, #1
 8002732:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d109      	bne.n	800274c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	3b01      	subs	r3, #1
 8002746:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d067      	beq.n	800281c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d062      	beq.n	8002818 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002752:	4b5f      	ldr	r3, [pc, #380]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0bb      	b.n	80028da <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002762:	4b5b      	ldr	r3, [pc, #364]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5a      	ldr	r2, [pc, #360]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002768:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800276c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800276e:	f7fe fcf1 	bl	8001154 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7fe fced 	bl	8001154 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0a8      	b.n	80028da <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002788:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002794:	4b4e      	ldr	r3, [pc, #312]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	4b4e      	ldr	r3, [pc, #312]	; (80028d4 <HAL_RCC_OscConfig+0x830>)
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027a4:	3a01      	subs	r2, #1
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	4311      	orrs	r1, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027ae:	0212      	lsls	r2, r2, #8
 80027b0:	4311      	orrs	r1, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027b6:	0852      	lsrs	r2, r2, #1
 80027b8:	3a01      	subs	r2, #1
 80027ba:	0552      	lsls	r2, r2, #21
 80027bc:	4311      	orrs	r1, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027c2:	0852      	lsrs	r2, r2, #1
 80027c4:	3a01      	subs	r2, #1
 80027c6:	0652      	lsls	r2, r2, #25
 80027c8:	4311      	orrs	r1, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ce:	06d2      	lsls	r2, r2, #27
 80027d0:	430a      	orrs	r2, r1
 80027d2:	493f      	ldr	r1, [pc, #252]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 80027de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e4:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a39      	ldr	r2, [pc, #228]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027f0:	f7fe fcb0 	bl	8001154 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fcac 	bl	8001154 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e067      	b.n	80028da <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002816:	e05f      	b.n	80028d8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e05e      	b.n	80028da <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281c:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d157      	bne.n	80028d8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800282e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002834:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a25      	ldr	r2, [pc, #148]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002840:	f7fe fc88 	bl	8001154 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe fc84 	bl	8001154 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e03f      	b.n	80028da <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x7a4>
 8002866:	e037      	b.n	80028d8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d02d      	beq.n	80028ca <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002878:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 800288c:	f023 0303 	bic.w	r3, r3, #3
 8002890:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 8002898:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fc57 	bl	8001154 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe fc53 	bl	8001154 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e00e      	b.n	80028da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_RCC_OscConfig+0x82c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x806>
 80028c8:	e006      	b.n	80028d8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e005      	b.n	80028da <HAL_RCC_OscConfig+0x836>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop

080028e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0c8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <HAL_RCC_ClockConfig+0x1b0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d910      	bls.n	8002928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1b0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4961      	ldr	r1, [pc, #388]	; (8002a94 <HAL_RCC_ClockConfig+0x1b0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b5f      	ldr	r3, [pc, #380]	; (8002a94 <HAL_RCC_ClockConfig+0x1b0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0b0      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d04c      	beq.n	80029ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d107      	bne.n	800294c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293c:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d121      	bne.n	800298c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e09e      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d107      	bne.n	8002964 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d115      	bne.n	800298c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e092      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800296c:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e086      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297c:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e07e      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800298c:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 0203 	bic.w	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	493f      	ldr	r1, [pc, #252]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800299e:	f7fe fbd9 	bl	8001154 <HAL_GetTick>
 80029a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a6:	f7fe fbd5 	bl	8001154 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e066      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029bc:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 020c 	and.w	r2, r3, #12
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d1eb      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029da:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	492c      	ldr	r1, [pc, #176]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_RCC_ClockConfig+0x1b0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d210      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <HAL_RCC_ClockConfig+0x1b0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4924      	ldr	r1, [pc, #144]	; (8002a94 <HAL_RCC_ClockConfig+0x1b0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1b0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e036      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4918      	ldr	r1, [pc, #96]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4910      	ldr	r1, [pc, #64]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a5a:	f000 f825 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4601      	mov	r1, r0
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_RCC_ClockConfig+0x1b4>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	fa21 f303 	lsr.w	r3, r1, r3
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fb18 	bl	80010b4 <HAL_InitTick>
 8002a84:	4603      	mov	r3, r0
 8002a86:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a88:	7afb      	ldrb	r3, [r7, #11]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08004298 	.word	0x08004298
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x34>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d121      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d11e      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002adc:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ae8:	4b30      	ldr	r3, [pc, #192]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e005      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002af8:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b04:	4a2a      	ldr	r2, [pc, #168]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10d      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d102      	bne.n	8002b26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e004      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b2c:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d133      	bne.n	8002b9e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d002      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0xa4>
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0xaa>
 8002b4a:	e005      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b4e:	617b      	str	r3, [r7, #20]
      break;
 8002b50:	e005      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b52:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b54:	617b      	str	r3, [r7, #20]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	617b      	str	r3, [r7, #20]
      break;
 8002b5c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	3301      	adds	r3, #1
 8002b6a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	fb02 f203 	mul.w	r2, r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0e5b      	lsrs	r3, r3, #25
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3724      	adds	r7, #36	; 0x24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	080042a8 	.word	0x080042a8
 8002bb4:	00f42400 	.word	0x00f42400
 8002bb8:	007a1200 	.word	0x007a1200

08002bbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bd4:	f7ff fa02 	bl	8001fdc <HAL_PWREx_GetVoltageRange>
 8002bd8:	6178      	str	r0, [r7, #20]
 8002bda:	e014      	b.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bf4:	f7ff f9f2 	bl	8001fdc <HAL_PWREx_GetVoltageRange>
 8002bf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0c:	d10b      	bne.n	8002c26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d919      	bls.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2ba0      	cmp	r3, #160	; 0xa0
 8002c18:	d902      	bls.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	e013      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c20:	2301      	movs	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	e010      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b80      	cmp	r3, #128	; 0x80
 8002c2a:	d902      	bls.n	8002c32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	e00a      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d102      	bne.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c38:	2302      	movs	r3, #2
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	e004      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b70      	cmp	r3, #112	; 0x70
 8002c42:	d101      	bne.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 0207 	bic.w	r2, r3, #7
 8002c50:	4909      	ldr	r1, [pc, #36]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d001      	beq.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40022000 	.word	0x40022000

08002c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e049      	b.n	8002d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe f93c 	bl	8000f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 f93c 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d001      	beq.n	8002d44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e033      	b.n	8002dac <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <HAL_TIM_Base_Start+0x8c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_TIM_Base_Start+0x3e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d004      	beq.n	8002d6a <HAL_TIM_Base_Start+0x3e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <HAL_TIM_Base_Start+0x90>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d115      	bne.n	8002d96 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_TIM_Base_Start+0x94>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d015      	beq.n	8002da8 <HAL_TIM_Base_Start+0x7c>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d82:	d011      	beq.n	8002da8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d94:	e008      	b.n	8002da8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e000      	b.n	8002daa <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	00010007 	.word	0x00010007

08002dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_TIM_ConfigClockSource+0x18>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0a8      	b.n	8002f2e <HAL_TIM_ConfigClockSource+0x16a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d067      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0x124>
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d80b      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x70>
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d073      	beq.n	8002f08 <HAL_TIM_ConfigClockSource+0x144>
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d802      	bhi.n	8002e2a <HAL_TIM_ConfigClockSource+0x66>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d06f      	beq.n	8002f08 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e28:	e078      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d06c      	beq.n	8002f08 <HAL_TIM_ConfigClockSource+0x144>
 8002e2e:	2b30      	cmp	r3, #48	; 0x30
 8002e30:	d06a      	beq.n	8002f08 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002e32:	e073      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002e34:	2b70      	cmp	r3, #112	; 0x70
 8002e36:	d00d      	beq.n	8002e54 <HAL_TIM_ConfigClockSource+0x90>
 8002e38:	2b70      	cmp	r3, #112	; 0x70
 8002e3a:	d804      	bhi.n	8002e46 <HAL_TIM_ConfigClockSource+0x82>
 8002e3c:	2b50      	cmp	r3, #80	; 0x50
 8002e3e:	d033      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0xe4>
 8002e40:	2b60      	cmp	r3, #96	; 0x60
 8002e42:	d041      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002e44:	e06a      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4a:	d066      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0x156>
 8002e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e50:	d017      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002e52:	e063      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6899      	ldr	r1, [r3, #8]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f000 f946 	bl	80030f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	609a      	str	r2, [r3, #8]
      break;
 8002e80:	e04c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f000 f92f 	bl	80030f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ea4:	609a      	str	r2, [r3, #8]
      break;
 8002ea6:	e039      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f000 f8a3 	bl	8003000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2150      	movs	r1, #80	; 0x50
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 f8fc 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002ec6:	e029      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f000 f8c2 	bl	800305e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2160      	movs	r1, #96	; 0x60
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f8ec 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002ee6:	e019      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f000 f883 	bl	8003000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2140      	movs	r1, #64	; 0x40
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f8dc 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002f06:	e009      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f000 f8d3 	bl	80030be <TIM_ITRx_SetConfig>
        break;
 8002f18:	e000      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a2a      	ldr	r2, [pc, #168]	; (8002ff4 <TIM_Base_SetConfig+0xbc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <TIM_Base_SetConfig+0x20>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f56:	d108      	bne.n	8002f6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <TIM_Base_SetConfig+0xbc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00b      	beq.n	8002f8a <TIM_Base_SetConfig+0x52>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f78:	d007      	beq.n	8002f8a <TIM_Base_SetConfig+0x52>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1e      	ldr	r2, [pc, #120]	; (8002ff8 <TIM_Base_SetConfig+0xc0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d003      	beq.n	8002f8a <TIM_Base_SetConfig+0x52>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <TIM_Base_SetConfig+0xc4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d108      	bne.n	8002f9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <TIM_Base_SetConfig+0xbc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d007      	beq.n	8002fd8 <TIM_Base_SetConfig+0xa0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <TIM_Base_SetConfig+0xc0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_Base_SetConfig+0xa0>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <TIM_Base_SetConfig+0xc4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d103      	bne.n	8002fe0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	615a      	str	r2, [r3, #20]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40014000 	.word	0x40014000
 8002ffc:	40014400 	.word	0x40014400

08003000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f023 0201 	bic.w	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800302a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f023 030a 	bic.w	r3, r3, #10
 800303c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800305e:	b480      	push	{r7}
 8003060:	b087      	sub	sp, #28
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0210 	bic.w	r2, r3, #16
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	031b      	lsls	r3, r3, #12
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800309a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	f043 0307 	orr.w	r3, r3, #7
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800310e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	021a      	lsls	r2, r3, #8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	431a      	orrs	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003148:	2302      	movs	r3, #2
 800314a:	e04f      	b.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800317c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d004      	beq.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10c      	bne.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40014000 	.word	0x40014000

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	4e0d      	ldr	r6, [pc, #52]	; (8003238 <__libc_init_array+0x38>)
 8003204:	4c0d      	ldr	r4, [pc, #52]	; (800323c <__libc_init_array+0x3c>)
 8003206:	1ba4      	subs	r4, r4, r6
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	2500      	movs	r5, #0
 800320c:	42a5      	cmp	r5, r4
 800320e:	d109      	bne.n	8003224 <__libc_init_array+0x24>
 8003210:	4e0b      	ldr	r6, [pc, #44]	; (8003240 <__libc_init_array+0x40>)
 8003212:	4c0c      	ldr	r4, [pc, #48]	; (8003244 <__libc_init_array+0x44>)
 8003214:	f001 f832 	bl	800427c <_init>
 8003218:	1ba4      	subs	r4, r4, r6
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	2500      	movs	r5, #0
 800321e:	42a5      	cmp	r5, r4
 8003220:	d105      	bne.n	800322e <__libc_init_array+0x2e>
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003228:	4798      	blx	r3
 800322a:	3501      	adds	r5, #1
 800322c:	e7ee      	b.n	800320c <__libc_init_array+0xc>
 800322e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003232:	4798      	blx	r3
 8003234:	3501      	adds	r5, #1
 8003236:	e7f2      	b.n	800321e <__libc_init_array+0x1e>
 8003238:	080044b0 	.word	0x080044b0
 800323c:	080044b0 	.word	0x080044b0
 8003240:	080044b0 	.word	0x080044b0
 8003244:	080044b4 	.word	0x080044b4

08003248 <memset>:
 8003248:	4402      	add	r2, r0
 800324a:	4603      	mov	r3, r0
 800324c:	4293      	cmp	r3, r2
 800324e:	d100      	bne.n	8003252 <memset+0xa>
 8003250:	4770      	bx	lr
 8003252:	f803 1b01 	strb.w	r1, [r3], #1
 8003256:	e7f9      	b.n	800324c <memset+0x4>

08003258 <sin>:
 8003258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800325a:	ec51 0b10 	vmov	r0, r1, d0
 800325e:	4a20      	ldr	r2, [pc, #128]	; (80032e0 <sin+0x88>)
 8003260:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003264:	4293      	cmp	r3, r2
 8003266:	dc07      	bgt.n	8003278 <sin+0x20>
 8003268:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80032d8 <sin+0x80>
 800326c:	2000      	movs	r0, #0
 800326e:	f000 fe37 	bl	8003ee0 <__kernel_sin>
 8003272:	ec51 0b10 	vmov	r0, r1, d0
 8003276:	e007      	b.n	8003288 <sin+0x30>
 8003278:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <sin+0x8c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	dd09      	ble.n	8003292 <sin+0x3a>
 800327e:	ee10 2a10 	vmov	r2, s0
 8003282:	460b      	mov	r3, r1
 8003284:	f7fc ffa8 	bl	80001d8 <__aeabi_dsub>
 8003288:	ec41 0b10 	vmov	d0, r0, r1
 800328c:	b005      	add	sp, #20
 800328e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003292:	4668      	mov	r0, sp
 8003294:	f000 f828 	bl	80032e8 <__ieee754_rem_pio2>
 8003298:	f000 0003 	and.w	r0, r0, #3
 800329c:	2801      	cmp	r0, #1
 800329e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80032a2:	ed9d 0b00 	vldr	d0, [sp]
 80032a6:	d004      	beq.n	80032b2 <sin+0x5a>
 80032a8:	2802      	cmp	r0, #2
 80032aa:	d005      	beq.n	80032b8 <sin+0x60>
 80032ac:	b970      	cbnz	r0, 80032cc <sin+0x74>
 80032ae:	2001      	movs	r0, #1
 80032b0:	e7dd      	b.n	800326e <sin+0x16>
 80032b2:	f000 fa0d 	bl	80036d0 <__kernel_cos>
 80032b6:	e7dc      	b.n	8003272 <sin+0x1a>
 80032b8:	2001      	movs	r0, #1
 80032ba:	f000 fe11 	bl	8003ee0 <__kernel_sin>
 80032be:	ec53 2b10 	vmov	r2, r3, d0
 80032c2:	ee10 0a10 	vmov	r0, s0
 80032c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80032ca:	e7dd      	b.n	8003288 <sin+0x30>
 80032cc:	f000 fa00 	bl	80036d0 <__kernel_cos>
 80032d0:	e7f5      	b.n	80032be <sin+0x66>
 80032d2:	bf00      	nop
 80032d4:	f3af 8000 	nop.w
	...
 80032e0:	3fe921fb 	.word	0x3fe921fb
 80032e4:	7fefffff 	.word	0x7fefffff

080032e8 <__ieee754_rem_pio2>:
 80032e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ec:	ec57 6b10 	vmov	r6, r7, d0
 80032f0:	4bc3      	ldr	r3, [pc, #780]	; (8003600 <__ieee754_rem_pio2+0x318>)
 80032f2:	b08d      	sub	sp, #52	; 0x34
 80032f4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80032f8:	4598      	cmp	r8, r3
 80032fa:	4604      	mov	r4, r0
 80032fc:	9704      	str	r7, [sp, #16]
 80032fe:	dc07      	bgt.n	8003310 <__ieee754_rem_pio2+0x28>
 8003300:	2200      	movs	r2, #0
 8003302:	2300      	movs	r3, #0
 8003304:	ed84 0b00 	vstr	d0, [r4]
 8003308:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800330c:	2500      	movs	r5, #0
 800330e:	e027      	b.n	8003360 <__ieee754_rem_pio2+0x78>
 8003310:	4bbc      	ldr	r3, [pc, #752]	; (8003604 <__ieee754_rem_pio2+0x31c>)
 8003312:	4598      	cmp	r8, r3
 8003314:	dc75      	bgt.n	8003402 <__ieee754_rem_pio2+0x11a>
 8003316:	9b04      	ldr	r3, [sp, #16]
 8003318:	4dbb      	ldr	r5, [pc, #748]	; (8003608 <__ieee754_rem_pio2+0x320>)
 800331a:	2b00      	cmp	r3, #0
 800331c:	ee10 0a10 	vmov	r0, s0
 8003320:	a3a9      	add	r3, pc, #676	; (adr r3, 80035c8 <__ieee754_rem_pio2+0x2e0>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	4639      	mov	r1, r7
 8003328:	dd36      	ble.n	8003398 <__ieee754_rem_pio2+0xb0>
 800332a:	f7fc ff55 	bl	80001d8 <__aeabi_dsub>
 800332e:	45a8      	cmp	r8, r5
 8003330:	4606      	mov	r6, r0
 8003332:	460f      	mov	r7, r1
 8003334:	d018      	beq.n	8003368 <__ieee754_rem_pio2+0x80>
 8003336:	a3a6      	add	r3, pc, #664	; (adr r3, 80035d0 <__ieee754_rem_pio2+0x2e8>)
 8003338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333c:	f7fc ff4c 	bl	80001d8 <__aeabi_dsub>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	e9c4 2300 	strd	r2, r3, [r4]
 8003348:	4630      	mov	r0, r6
 800334a:	4639      	mov	r1, r7
 800334c:	f7fc ff44 	bl	80001d8 <__aeabi_dsub>
 8003350:	a39f      	add	r3, pc, #636	; (adr r3, 80035d0 <__ieee754_rem_pio2+0x2e8>)
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f7fc ff3f 	bl	80001d8 <__aeabi_dsub>
 800335a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800335e:	2501      	movs	r5, #1
 8003360:	4628      	mov	r0, r5
 8003362:	b00d      	add	sp, #52	; 0x34
 8003364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003368:	a39b      	add	r3, pc, #620	; (adr r3, 80035d8 <__ieee754_rem_pio2+0x2f0>)
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	f7fc ff33 	bl	80001d8 <__aeabi_dsub>
 8003372:	a39b      	add	r3, pc, #620	; (adr r3, 80035e0 <__ieee754_rem_pio2+0x2f8>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	4606      	mov	r6, r0
 800337a:	460f      	mov	r7, r1
 800337c:	f7fc ff2c 	bl	80001d8 <__aeabi_dsub>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	e9c4 2300 	strd	r2, r3, [r4]
 8003388:	4630      	mov	r0, r6
 800338a:	4639      	mov	r1, r7
 800338c:	f7fc ff24 	bl	80001d8 <__aeabi_dsub>
 8003390:	a393      	add	r3, pc, #588	; (adr r3, 80035e0 <__ieee754_rem_pio2+0x2f8>)
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	e7de      	b.n	8003356 <__ieee754_rem_pio2+0x6e>
 8003398:	f7fc ff20 	bl	80001dc <__adddf3>
 800339c:	45a8      	cmp	r8, r5
 800339e:	4606      	mov	r6, r0
 80033a0:	460f      	mov	r7, r1
 80033a2:	d016      	beq.n	80033d2 <__ieee754_rem_pio2+0xea>
 80033a4:	a38a      	add	r3, pc, #552	; (adr r3, 80035d0 <__ieee754_rem_pio2+0x2e8>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fc ff17 	bl	80001dc <__adddf3>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	e9c4 2300 	strd	r2, r3, [r4]
 80033b6:	4630      	mov	r0, r6
 80033b8:	4639      	mov	r1, r7
 80033ba:	f7fc ff0d 	bl	80001d8 <__aeabi_dsub>
 80033be:	a384      	add	r3, pc, #528	; (adr r3, 80035d0 <__ieee754_rem_pio2+0x2e8>)
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f7fc ff0a 	bl	80001dc <__adddf3>
 80033c8:	f04f 35ff 	mov.w	r5, #4294967295
 80033cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80033d0:	e7c6      	b.n	8003360 <__ieee754_rem_pio2+0x78>
 80033d2:	a381      	add	r3, pc, #516	; (adr r3, 80035d8 <__ieee754_rem_pio2+0x2f0>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fc ff00 	bl	80001dc <__adddf3>
 80033dc:	a380      	add	r3, pc, #512	; (adr r3, 80035e0 <__ieee754_rem_pio2+0x2f8>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	4606      	mov	r6, r0
 80033e4:	460f      	mov	r7, r1
 80033e6:	f7fc fef9 	bl	80001dc <__adddf3>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	e9c4 2300 	strd	r2, r3, [r4]
 80033f2:	4630      	mov	r0, r6
 80033f4:	4639      	mov	r1, r7
 80033f6:	f7fc feef 	bl	80001d8 <__aeabi_dsub>
 80033fa:	a379      	add	r3, pc, #484	; (adr r3, 80035e0 <__ieee754_rem_pio2+0x2f8>)
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	e7e0      	b.n	80033c4 <__ieee754_rem_pio2+0xdc>
 8003402:	4b82      	ldr	r3, [pc, #520]	; (800360c <__ieee754_rem_pio2+0x324>)
 8003404:	4598      	cmp	r8, r3
 8003406:	f300 80d0 	bgt.w	80035aa <__ieee754_rem_pio2+0x2c2>
 800340a:	f000 fe23 	bl	8004054 <fabs>
 800340e:	ec57 6b10 	vmov	r6, r7, d0
 8003412:	ee10 0a10 	vmov	r0, s0
 8003416:	a374      	add	r3, pc, #464	; (adr r3, 80035e8 <__ieee754_rem_pio2+0x300>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	4639      	mov	r1, r7
 800341e:	f7fd f893 	bl	8000548 <__aeabi_dmul>
 8003422:	2200      	movs	r2, #0
 8003424:	4b7a      	ldr	r3, [pc, #488]	; (8003610 <__ieee754_rem_pio2+0x328>)
 8003426:	f7fc fed9 	bl	80001dc <__adddf3>
 800342a:	f7fd fb27 	bl	8000a7c <__aeabi_d2iz>
 800342e:	4605      	mov	r5, r0
 8003430:	f7fd f820 	bl	8000474 <__aeabi_i2d>
 8003434:	a364      	add	r3, pc, #400	; (adr r3, 80035c8 <__ieee754_rem_pio2+0x2e0>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800343e:	f7fd f883 	bl	8000548 <__aeabi_dmul>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4630      	mov	r0, r6
 8003448:	4639      	mov	r1, r7
 800344a:	f7fc fec5 	bl	80001d8 <__aeabi_dsub>
 800344e:	a360      	add	r3, pc, #384	; (adr r3, 80035d0 <__ieee754_rem_pio2+0x2e8>)
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	4682      	mov	sl, r0
 8003456:	468b      	mov	fp, r1
 8003458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800345c:	f7fd f874 	bl	8000548 <__aeabi_dmul>
 8003460:	2d1f      	cmp	r5, #31
 8003462:	4606      	mov	r6, r0
 8003464:	460f      	mov	r7, r1
 8003466:	dc0c      	bgt.n	8003482 <__ieee754_rem_pio2+0x19a>
 8003468:	1e6a      	subs	r2, r5, #1
 800346a:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <__ieee754_rem_pio2+0x32c>)
 800346c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003470:	4543      	cmp	r3, r8
 8003472:	d006      	beq.n	8003482 <__ieee754_rem_pio2+0x19a>
 8003474:	4632      	mov	r2, r6
 8003476:	463b      	mov	r3, r7
 8003478:	4650      	mov	r0, sl
 800347a:	4659      	mov	r1, fp
 800347c:	f7fc feac 	bl	80001d8 <__aeabi_dsub>
 8003480:	e00e      	b.n	80034a0 <__ieee754_rem_pio2+0x1b8>
 8003482:	4632      	mov	r2, r6
 8003484:	463b      	mov	r3, r7
 8003486:	4650      	mov	r0, sl
 8003488:	4659      	mov	r1, fp
 800348a:	f7fc fea5 	bl	80001d8 <__aeabi_dsub>
 800348e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003492:	9305      	str	r3, [sp, #20]
 8003494:	9a05      	ldr	r2, [sp, #20]
 8003496:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b10      	cmp	r3, #16
 800349e:	dc02      	bgt.n	80034a6 <__ieee754_rem_pio2+0x1be>
 80034a0:	e9c4 0100 	strd	r0, r1, [r4]
 80034a4:	e039      	b.n	800351a <__ieee754_rem_pio2+0x232>
 80034a6:	a34c      	add	r3, pc, #304	; (adr r3, 80035d8 <__ieee754_rem_pio2+0x2f0>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034b0:	f7fd f84a 	bl	8000548 <__aeabi_dmul>
 80034b4:	4606      	mov	r6, r0
 80034b6:	460f      	mov	r7, r1
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4650      	mov	r0, sl
 80034be:	4659      	mov	r1, fp
 80034c0:	f7fc fe8a 	bl	80001d8 <__aeabi_dsub>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4680      	mov	r8, r0
 80034ca:	4689      	mov	r9, r1
 80034cc:	4650      	mov	r0, sl
 80034ce:	4659      	mov	r1, fp
 80034d0:	f7fc fe82 	bl	80001d8 <__aeabi_dsub>
 80034d4:	4632      	mov	r2, r6
 80034d6:	463b      	mov	r3, r7
 80034d8:	f7fc fe7e 	bl	80001d8 <__aeabi_dsub>
 80034dc:	a340      	add	r3, pc, #256	; (adr r3, 80035e0 <__ieee754_rem_pio2+0x2f8>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	4606      	mov	r6, r0
 80034e4:	460f      	mov	r7, r1
 80034e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034ea:	f7fd f82d 	bl	8000548 <__aeabi_dmul>
 80034ee:	4632      	mov	r2, r6
 80034f0:	463b      	mov	r3, r7
 80034f2:	f7fc fe71 	bl	80001d8 <__aeabi_dsub>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4606      	mov	r6, r0
 80034fc:	460f      	mov	r7, r1
 80034fe:	4640      	mov	r0, r8
 8003500:	4649      	mov	r1, r9
 8003502:	f7fc fe69 	bl	80001d8 <__aeabi_dsub>
 8003506:	9a05      	ldr	r2, [sp, #20]
 8003508:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b31      	cmp	r3, #49	; 0x31
 8003510:	dc20      	bgt.n	8003554 <__ieee754_rem_pio2+0x26c>
 8003512:	e9c4 0100 	strd	r0, r1, [r4]
 8003516:	46c2      	mov	sl, r8
 8003518:	46cb      	mov	fp, r9
 800351a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800351e:	4650      	mov	r0, sl
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	4659      	mov	r1, fp
 8003526:	f7fc fe57 	bl	80001d8 <__aeabi_dsub>
 800352a:	463b      	mov	r3, r7
 800352c:	4632      	mov	r2, r6
 800352e:	f7fc fe53 	bl	80001d8 <__aeabi_dsub>
 8003532:	9b04      	ldr	r3, [sp, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800353a:	f6bf af11 	bge.w	8003360 <__ieee754_rem_pio2+0x78>
 800353e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003542:	6063      	str	r3, [r4, #4]
 8003544:	f8c4 8000 	str.w	r8, [r4]
 8003548:	60a0      	str	r0, [r4, #8]
 800354a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800354e:	60e3      	str	r3, [r4, #12]
 8003550:	426d      	negs	r5, r5
 8003552:	e705      	b.n	8003360 <__ieee754_rem_pio2+0x78>
 8003554:	a326      	add	r3, pc, #152	; (adr r3, 80035f0 <__ieee754_rem_pio2+0x308>)
 8003556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800355e:	f7fc fff3 	bl	8000548 <__aeabi_dmul>
 8003562:	4606      	mov	r6, r0
 8003564:	460f      	mov	r7, r1
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4640      	mov	r0, r8
 800356c:	4649      	mov	r1, r9
 800356e:	f7fc fe33 	bl	80001d8 <__aeabi_dsub>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4682      	mov	sl, r0
 8003578:	468b      	mov	fp, r1
 800357a:	4640      	mov	r0, r8
 800357c:	4649      	mov	r1, r9
 800357e:	f7fc fe2b 	bl	80001d8 <__aeabi_dsub>
 8003582:	4632      	mov	r2, r6
 8003584:	463b      	mov	r3, r7
 8003586:	f7fc fe27 	bl	80001d8 <__aeabi_dsub>
 800358a:	a31b      	add	r3, pc, #108	; (adr r3, 80035f8 <__ieee754_rem_pio2+0x310>)
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	4606      	mov	r6, r0
 8003592:	460f      	mov	r7, r1
 8003594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003598:	f7fc ffd6 	bl	8000548 <__aeabi_dmul>
 800359c:	4632      	mov	r2, r6
 800359e:	463b      	mov	r3, r7
 80035a0:	f7fc fe1a 	bl	80001d8 <__aeabi_dsub>
 80035a4:	4606      	mov	r6, r0
 80035a6:	460f      	mov	r7, r1
 80035a8:	e764      	b.n	8003474 <__ieee754_rem_pio2+0x18c>
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <__ieee754_rem_pio2+0x330>)
 80035ac:	4598      	cmp	r8, r3
 80035ae:	dd35      	ble.n	800361c <__ieee754_rem_pio2+0x334>
 80035b0:	ee10 2a10 	vmov	r2, s0
 80035b4:	463b      	mov	r3, r7
 80035b6:	4630      	mov	r0, r6
 80035b8:	4639      	mov	r1, r7
 80035ba:	f7fc fe0d 	bl	80001d8 <__aeabi_dsub>
 80035be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80035c2:	e9c4 0100 	strd	r0, r1, [r4]
 80035c6:	e6a1      	b.n	800330c <__ieee754_rem_pio2+0x24>
 80035c8:	54400000 	.word	0x54400000
 80035cc:	3ff921fb 	.word	0x3ff921fb
 80035d0:	1a626331 	.word	0x1a626331
 80035d4:	3dd0b461 	.word	0x3dd0b461
 80035d8:	1a600000 	.word	0x1a600000
 80035dc:	3dd0b461 	.word	0x3dd0b461
 80035e0:	2e037073 	.word	0x2e037073
 80035e4:	3ba3198a 	.word	0x3ba3198a
 80035e8:	6dc9c883 	.word	0x6dc9c883
 80035ec:	3fe45f30 	.word	0x3fe45f30
 80035f0:	2e000000 	.word	0x2e000000
 80035f4:	3ba3198a 	.word	0x3ba3198a
 80035f8:	252049c1 	.word	0x252049c1
 80035fc:	397b839a 	.word	0x397b839a
 8003600:	3fe921fb 	.word	0x3fe921fb
 8003604:	4002d97b 	.word	0x4002d97b
 8003608:	3ff921fb 	.word	0x3ff921fb
 800360c:	413921fb 	.word	0x413921fb
 8003610:	3fe00000 	.word	0x3fe00000
 8003614:	080042d8 	.word	0x080042d8
 8003618:	7fefffff 	.word	0x7fefffff
 800361c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003620:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003624:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003628:	4630      	mov	r0, r6
 800362a:	460f      	mov	r7, r1
 800362c:	f7fd fa26 	bl	8000a7c <__aeabi_d2iz>
 8003630:	f7fc ff20 	bl	8000474 <__aeabi_i2d>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4630      	mov	r0, r6
 800363a:	4639      	mov	r1, r7
 800363c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003640:	f7fc fdca 	bl	80001d8 <__aeabi_dsub>
 8003644:	2200      	movs	r2, #0
 8003646:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <__ieee754_rem_pio2+0x3dc>)
 8003648:	f7fc ff7e 	bl	8000548 <__aeabi_dmul>
 800364c:	460f      	mov	r7, r1
 800364e:	4606      	mov	r6, r0
 8003650:	f7fd fa14 	bl	8000a7c <__aeabi_d2iz>
 8003654:	f7fc ff0e 	bl	8000474 <__aeabi_i2d>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4630      	mov	r0, r6
 800365e:	4639      	mov	r1, r7
 8003660:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003664:	f7fc fdb8 	bl	80001d8 <__aeabi_dsub>
 8003668:	2200      	movs	r2, #0
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <__ieee754_rem_pio2+0x3dc>)
 800366c:	f7fc ff6c 	bl	8000548 <__aeabi_dmul>
 8003670:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003674:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003678:	f04f 0803 	mov.w	r8, #3
 800367c:	2600      	movs	r6, #0
 800367e:	2700      	movs	r7, #0
 8003680:	4632      	mov	r2, r6
 8003682:	463b      	mov	r3, r7
 8003684:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003688:	f108 3aff 	add.w	sl, r8, #4294967295
 800368c:	f7fd f9c4 	bl	8000a18 <__aeabi_dcmpeq>
 8003690:	b9b0      	cbnz	r0, 80036c0 <__ieee754_rem_pio2+0x3d8>
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <__ieee754_rem_pio2+0x3e0>)
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	2302      	movs	r3, #2
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	462a      	mov	r2, r5
 800369c:	4643      	mov	r3, r8
 800369e:	4621      	mov	r1, r4
 80036a0:	a806      	add	r0, sp, #24
 80036a2:	f000 f8dd 	bl	8003860 <__kernel_rem_pio2>
 80036a6:	9b04      	ldr	r3, [sp, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	4605      	mov	r5, r0
 80036ac:	f6bf ae58 	bge.w	8003360 <__ieee754_rem_pio2+0x78>
 80036b0:	6863      	ldr	r3, [r4, #4]
 80036b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80036b6:	6063      	str	r3, [r4, #4]
 80036b8:	68e3      	ldr	r3, [r4, #12]
 80036ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80036be:	e746      	b.n	800354e <__ieee754_rem_pio2+0x266>
 80036c0:	46d0      	mov	r8, sl
 80036c2:	e7dd      	b.n	8003680 <__ieee754_rem_pio2+0x398>
 80036c4:	41700000 	.word	0x41700000
 80036c8:	08004358 	.word	0x08004358
 80036cc:	00000000 	.word	0x00000000

080036d0 <__kernel_cos>:
 80036d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d4:	ec59 8b10 	vmov	r8, r9, d0
 80036d8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80036dc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80036e0:	ed2d 8b02 	vpush	{d8}
 80036e4:	eeb0 8a41 	vmov.f32	s16, s2
 80036e8:	eef0 8a61 	vmov.f32	s17, s3
 80036ec:	da07      	bge.n	80036fe <__kernel_cos+0x2e>
 80036ee:	ee10 0a10 	vmov	r0, s0
 80036f2:	4649      	mov	r1, r9
 80036f4:	f7fd f9c2 	bl	8000a7c <__aeabi_d2iz>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	f000 8089 	beq.w	8003810 <__kernel_cos+0x140>
 80036fe:	4642      	mov	r2, r8
 8003700:	464b      	mov	r3, r9
 8003702:	4640      	mov	r0, r8
 8003704:	4649      	mov	r1, r9
 8003706:	f7fc ff1f 	bl	8000548 <__aeabi_dmul>
 800370a:	2200      	movs	r2, #0
 800370c:	4b4e      	ldr	r3, [pc, #312]	; (8003848 <__kernel_cos+0x178>)
 800370e:	4604      	mov	r4, r0
 8003710:	460d      	mov	r5, r1
 8003712:	f7fc ff19 	bl	8000548 <__aeabi_dmul>
 8003716:	a340      	add	r3, pc, #256	; (adr r3, 8003818 <__kernel_cos+0x148>)
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	4682      	mov	sl, r0
 800371e:	468b      	mov	fp, r1
 8003720:	4620      	mov	r0, r4
 8003722:	4629      	mov	r1, r5
 8003724:	f7fc ff10 	bl	8000548 <__aeabi_dmul>
 8003728:	a33d      	add	r3, pc, #244	; (adr r3, 8003820 <__kernel_cos+0x150>)
 800372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372e:	f7fc fd55 	bl	80001dc <__adddf3>
 8003732:	4622      	mov	r2, r4
 8003734:	462b      	mov	r3, r5
 8003736:	f7fc ff07 	bl	8000548 <__aeabi_dmul>
 800373a:	a33b      	add	r3, pc, #236	; (adr r3, 8003828 <__kernel_cos+0x158>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f7fc fd4a 	bl	80001d8 <__aeabi_dsub>
 8003744:	4622      	mov	r2, r4
 8003746:	462b      	mov	r3, r5
 8003748:	f7fc fefe 	bl	8000548 <__aeabi_dmul>
 800374c:	a338      	add	r3, pc, #224	; (adr r3, 8003830 <__kernel_cos+0x160>)
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f7fc fd43 	bl	80001dc <__adddf3>
 8003756:	4622      	mov	r2, r4
 8003758:	462b      	mov	r3, r5
 800375a:	f7fc fef5 	bl	8000548 <__aeabi_dmul>
 800375e:	a336      	add	r3, pc, #216	; (adr r3, 8003838 <__kernel_cos+0x168>)
 8003760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003764:	f7fc fd38 	bl	80001d8 <__aeabi_dsub>
 8003768:	4622      	mov	r2, r4
 800376a:	462b      	mov	r3, r5
 800376c:	f7fc feec 	bl	8000548 <__aeabi_dmul>
 8003770:	a333      	add	r3, pc, #204	; (adr r3, 8003840 <__kernel_cos+0x170>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f7fc fd31 	bl	80001dc <__adddf3>
 800377a:	4622      	mov	r2, r4
 800377c:	462b      	mov	r3, r5
 800377e:	f7fc fee3 	bl	8000548 <__aeabi_dmul>
 8003782:	4622      	mov	r2, r4
 8003784:	462b      	mov	r3, r5
 8003786:	f7fc fedf 	bl	8000548 <__aeabi_dmul>
 800378a:	ec53 2b18 	vmov	r2, r3, d8
 800378e:	4604      	mov	r4, r0
 8003790:	460d      	mov	r5, r1
 8003792:	4640      	mov	r0, r8
 8003794:	4649      	mov	r1, r9
 8003796:	f7fc fed7 	bl	8000548 <__aeabi_dmul>
 800379a:	460b      	mov	r3, r1
 800379c:	4602      	mov	r2, r0
 800379e:	4629      	mov	r1, r5
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7fc fd19 	bl	80001d8 <__aeabi_dsub>
 80037a6:	4b29      	ldr	r3, [pc, #164]	; (800384c <__kernel_cos+0x17c>)
 80037a8:	429e      	cmp	r6, r3
 80037aa:	4680      	mov	r8, r0
 80037ac:	4689      	mov	r9, r1
 80037ae:	dc11      	bgt.n	80037d4 <__kernel_cos+0x104>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4650      	mov	r0, sl
 80037b6:	4659      	mov	r1, fp
 80037b8:	f7fc fd0e 	bl	80001d8 <__aeabi_dsub>
 80037bc:	460b      	mov	r3, r1
 80037be:	4924      	ldr	r1, [pc, #144]	; (8003850 <__kernel_cos+0x180>)
 80037c0:	4602      	mov	r2, r0
 80037c2:	2000      	movs	r0, #0
 80037c4:	f7fc fd08 	bl	80001d8 <__aeabi_dsub>
 80037c8:	ecbd 8b02 	vpop	{d8}
 80037cc:	ec41 0b10 	vmov	d0, r0, r1
 80037d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037d4:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <__kernel_cos+0x184>)
 80037d6:	491e      	ldr	r1, [pc, #120]	; (8003850 <__kernel_cos+0x180>)
 80037d8:	429e      	cmp	r6, r3
 80037da:	bfcc      	ite	gt
 80037dc:	4d1e      	ldrgt	r5, [pc, #120]	; (8003858 <__kernel_cos+0x188>)
 80037de:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80037e2:	2400      	movs	r4, #0
 80037e4:	4622      	mov	r2, r4
 80037e6:	462b      	mov	r3, r5
 80037e8:	2000      	movs	r0, #0
 80037ea:	f7fc fcf5 	bl	80001d8 <__aeabi_dsub>
 80037ee:	4622      	mov	r2, r4
 80037f0:	4606      	mov	r6, r0
 80037f2:	460f      	mov	r7, r1
 80037f4:	462b      	mov	r3, r5
 80037f6:	4650      	mov	r0, sl
 80037f8:	4659      	mov	r1, fp
 80037fa:	f7fc fced 	bl	80001d8 <__aeabi_dsub>
 80037fe:	4642      	mov	r2, r8
 8003800:	464b      	mov	r3, r9
 8003802:	f7fc fce9 	bl	80001d8 <__aeabi_dsub>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4630      	mov	r0, r6
 800380c:	4639      	mov	r1, r7
 800380e:	e7d9      	b.n	80037c4 <__kernel_cos+0xf4>
 8003810:	2000      	movs	r0, #0
 8003812:	490f      	ldr	r1, [pc, #60]	; (8003850 <__kernel_cos+0x180>)
 8003814:	e7d8      	b.n	80037c8 <__kernel_cos+0xf8>
 8003816:	bf00      	nop
 8003818:	be8838d4 	.word	0xbe8838d4
 800381c:	bda8fae9 	.word	0xbda8fae9
 8003820:	bdb4b1c4 	.word	0xbdb4b1c4
 8003824:	3e21ee9e 	.word	0x3e21ee9e
 8003828:	809c52ad 	.word	0x809c52ad
 800382c:	3e927e4f 	.word	0x3e927e4f
 8003830:	19cb1590 	.word	0x19cb1590
 8003834:	3efa01a0 	.word	0x3efa01a0
 8003838:	16c15177 	.word	0x16c15177
 800383c:	3f56c16c 	.word	0x3f56c16c
 8003840:	5555554c 	.word	0x5555554c
 8003844:	3fa55555 	.word	0x3fa55555
 8003848:	3fe00000 	.word	0x3fe00000
 800384c:	3fd33332 	.word	0x3fd33332
 8003850:	3ff00000 	.word	0x3ff00000
 8003854:	3fe90000 	.word	0x3fe90000
 8003858:	3fd20000 	.word	0x3fd20000
 800385c:	00000000 	.word	0x00000000

08003860 <__kernel_rem_pio2>:
 8003860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003864:	ed2d 8b02 	vpush	{d8}
 8003868:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800386c:	1ed4      	subs	r4, r2, #3
 800386e:	9308      	str	r3, [sp, #32]
 8003870:	9101      	str	r1, [sp, #4]
 8003872:	4bc5      	ldr	r3, [pc, #788]	; (8003b88 <__kernel_rem_pio2+0x328>)
 8003874:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8003876:	9009      	str	r0, [sp, #36]	; 0x24
 8003878:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800387c:	9304      	str	r3, [sp, #16]
 800387e:	9b08      	ldr	r3, [sp, #32]
 8003880:	3b01      	subs	r3, #1
 8003882:	9307      	str	r3, [sp, #28]
 8003884:	2318      	movs	r3, #24
 8003886:	fb94 f4f3 	sdiv	r4, r4, r3
 800388a:	f06f 0317 	mvn.w	r3, #23
 800388e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003892:	fb04 3303 	mla	r3, r4, r3, r3
 8003896:	eb03 0a02 	add.w	sl, r3, r2
 800389a:	9b04      	ldr	r3, [sp, #16]
 800389c:	9a07      	ldr	r2, [sp, #28]
 800389e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8003b78 <__kernel_rem_pio2+0x318>
 80038a2:	eb03 0802 	add.w	r8, r3, r2
 80038a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80038a8:	1aa7      	subs	r7, r4, r2
 80038aa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80038ae:	ae22      	add	r6, sp, #136	; 0x88
 80038b0:	2500      	movs	r5, #0
 80038b2:	4545      	cmp	r5, r8
 80038b4:	dd13      	ble.n	80038de <__kernel_rem_pio2+0x7e>
 80038b6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8003b78 <__kernel_rem_pio2+0x318>
 80038ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80038be:	2600      	movs	r6, #0
 80038c0:	9b04      	ldr	r3, [sp, #16]
 80038c2:	429e      	cmp	r6, r3
 80038c4:	dc32      	bgt.n	800392c <__kernel_rem_pio2+0xcc>
 80038c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c8:	9302      	str	r3, [sp, #8]
 80038ca:	9b08      	ldr	r3, [sp, #32]
 80038cc:	199d      	adds	r5, r3, r6
 80038ce:	ab22      	add	r3, sp, #136	; 0x88
 80038d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80038d4:	9306      	str	r3, [sp, #24]
 80038d6:	ec59 8b18 	vmov	r8, r9, d8
 80038da:	2700      	movs	r7, #0
 80038dc:	e01f      	b.n	800391e <__kernel_rem_pio2+0xbe>
 80038de:	42ef      	cmn	r7, r5
 80038e0:	d407      	bmi.n	80038f2 <__kernel_rem_pio2+0x92>
 80038e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80038e6:	f7fc fdc5 	bl	8000474 <__aeabi_i2d>
 80038ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80038ee:	3501      	adds	r5, #1
 80038f0:	e7df      	b.n	80038b2 <__kernel_rem_pio2+0x52>
 80038f2:	ec51 0b18 	vmov	r0, r1, d8
 80038f6:	e7f8      	b.n	80038ea <__kernel_rem_pio2+0x8a>
 80038f8:	9906      	ldr	r1, [sp, #24]
 80038fa:	9d02      	ldr	r5, [sp, #8]
 80038fc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003900:	9106      	str	r1, [sp, #24]
 8003902:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003906:	9502      	str	r5, [sp, #8]
 8003908:	f7fc fe1e 	bl	8000548 <__aeabi_dmul>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4640      	mov	r0, r8
 8003912:	4649      	mov	r1, r9
 8003914:	f7fc fc62 	bl	80001dc <__adddf3>
 8003918:	3701      	adds	r7, #1
 800391a:	4680      	mov	r8, r0
 800391c:	4689      	mov	r9, r1
 800391e:	9b07      	ldr	r3, [sp, #28]
 8003920:	429f      	cmp	r7, r3
 8003922:	dde9      	ble.n	80038f8 <__kernel_rem_pio2+0x98>
 8003924:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003928:	3601      	adds	r6, #1
 800392a:	e7c9      	b.n	80038c0 <__kernel_rem_pio2+0x60>
 800392c:	9b04      	ldr	r3, [sp, #16]
 800392e:	aa0e      	add	r2, sp, #56	; 0x38
 8003930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003934:	930c      	str	r3, [sp, #48]	; 0x30
 8003936:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003938:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800393c:	9c04      	ldr	r4, [sp, #16]
 800393e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003940:	ab9a      	add	r3, sp, #616	; 0x268
 8003942:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8003946:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800394a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800394e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8003952:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8003956:	ab9a      	add	r3, sp, #616	; 0x268
 8003958:	445b      	add	r3, fp
 800395a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800395e:	2500      	movs	r5, #0
 8003960:	1b63      	subs	r3, r4, r5
 8003962:	2b00      	cmp	r3, #0
 8003964:	dc78      	bgt.n	8003a58 <__kernel_rem_pio2+0x1f8>
 8003966:	4650      	mov	r0, sl
 8003968:	ec49 8b10 	vmov	d0, r8, r9
 800396c:	f000 fc00 	bl	8004170 <scalbn>
 8003970:	ec57 6b10 	vmov	r6, r7, d0
 8003974:	2200      	movs	r2, #0
 8003976:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800397a:	ee10 0a10 	vmov	r0, s0
 800397e:	4639      	mov	r1, r7
 8003980:	f7fc fde2 	bl	8000548 <__aeabi_dmul>
 8003984:	ec41 0b10 	vmov	d0, r0, r1
 8003988:	f000 fb6e 	bl	8004068 <floor>
 800398c:	2200      	movs	r2, #0
 800398e:	ec51 0b10 	vmov	r0, r1, d0
 8003992:	4b7e      	ldr	r3, [pc, #504]	; (8003b8c <__kernel_rem_pio2+0x32c>)
 8003994:	f7fc fdd8 	bl	8000548 <__aeabi_dmul>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4630      	mov	r0, r6
 800399e:	4639      	mov	r1, r7
 80039a0:	f7fc fc1a 	bl	80001d8 <__aeabi_dsub>
 80039a4:	460f      	mov	r7, r1
 80039a6:	4606      	mov	r6, r0
 80039a8:	f7fd f868 	bl	8000a7c <__aeabi_d2iz>
 80039ac:	9006      	str	r0, [sp, #24]
 80039ae:	f7fc fd61 	bl	8000474 <__aeabi_i2d>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4630      	mov	r0, r6
 80039b8:	4639      	mov	r1, r7
 80039ba:	f7fc fc0d 	bl	80001d8 <__aeabi_dsub>
 80039be:	f1ba 0f00 	cmp.w	sl, #0
 80039c2:	4606      	mov	r6, r0
 80039c4:	460f      	mov	r7, r1
 80039c6:	dd6c      	ble.n	8003aa2 <__kernel_rem_pio2+0x242>
 80039c8:	1e62      	subs	r2, r4, #1
 80039ca:	ab0e      	add	r3, sp, #56	; 0x38
 80039cc:	f1ca 0118 	rsb	r1, sl, #24
 80039d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80039d4:	9d06      	ldr	r5, [sp, #24]
 80039d6:	fa40 f301 	asr.w	r3, r0, r1
 80039da:	441d      	add	r5, r3
 80039dc:	408b      	lsls	r3, r1
 80039de:	1ac0      	subs	r0, r0, r3
 80039e0:	ab0e      	add	r3, sp, #56	; 0x38
 80039e2:	9506      	str	r5, [sp, #24]
 80039e4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80039e8:	f1ca 0317 	rsb	r3, sl, #23
 80039ec:	fa40 f303 	asr.w	r3, r0, r3
 80039f0:	9302      	str	r3, [sp, #8]
 80039f2:	9b02      	ldr	r3, [sp, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	dd62      	ble.n	8003abe <__kernel_rem_pio2+0x25e>
 80039f8:	9b06      	ldr	r3, [sp, #24]
 80039fa:	2200      	movs	r2, #0
 80039fc:	3301      	adds	r3, #1
 80039fe:	9306      	str	r3, [sp, #24]
 8003a00:	4615      	mov	r5, r2
 8003a02:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003a06:	4294      	cmp	r4, r2
 8003a08:	f300 8095 	bgt.w	8003b36 <__kernel_rem_pio2+0x2d6>
 8003a0c:	f1ba 0f00 	cmp.w	sl, #0
 8003a10:	dd07      	ble.n	8003a22 <__kernel_rem_pio2+0x1c2>
 8003a12:	f1ba 0f01 	cmp.w	sl, #1
 8003a16:	f000 80a2 	beq.w	8003b5e <__kernel_rem_pio2+0x2fe>
 8003a1a:	f1ba 0f02 	cmp.w	sl, #2
 8003a1e:	f000 80c1 	beq.w	8003ba4 <__kernel_rem_pio2+0x344>
 8003a22:	9b02      	ldr	r3, [sp, #8]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d14a      	bne.n	8003abe <__kernel_rem_pio2+0x25e>
 8003a28:	4632      	mov	r2, r6
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	4958      	ldr	r1, [pc, #352]	; (8003b90 <__kernel_rem_pio2+0x330>)
 8003a30:	f7fc fbd2 	bl	80001d8 <__aeabi_dsub>
 8003a34:	4606      	mov	r6, r0
 8003a36:	460f      	mov	r7, r1
 8003a38:	2d00      	cmp	r5, #0
 8003a3a:	d040      	beq.n	8003abe <__kernel_rem_pio2+0x25e>
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8003b80 <__kernel_rem_pio2+0x320>
 8003a42:	f000 fb95 	bl	8004170 <scalbn>
 8003a46:	4630      	mov	r0, r6
 8003a48:	4639      	mov	r1, r7
 8003a4a:	ec53 2b10 	vmov	r2, r3, d0
 8003a4e:	f7fc fbc3 	bl	80001d8 <__aeabi_dsub>
 8003a52:	4606      	mov	r6, r0
 8003a54:	460f      	mov	r7, r1
 8003a56:	e032      	b.n	8003abe <__kernel_rem_pio2+0x25e>
 8003a58:	2200      	movs	r2, #0
 8003a5a:	4b4e      	ldr	r3, [pc, #312]	; (8003b94 <__kernel_rem_pio2+0x334>)
 8003a5c:	4640      	mov	r0, r8
 8003a5e:	4649      	mov	r1, r9
 8003a60:	f7fc fd72 	bl	8000548 <__aeabi_dmul>
 8003a64:	f7fd f80a 	bl	8000a7c <__aeabi_d2iz>
 8003a68:	f7fc fd04 	bl	8000474 <__aeabi_i2d>
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4b4a      	ldr	r3, [pc, #296]	; (8003b98 <__kernel_rem_pio2+0x338>)
 8003a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a74:	f7fc fd68 	bl	8000548 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	4649      	mov	r1, r9
 8003a80:	f7fc fbaa 	bl	80001d8 <__aeabi_dsub>
 8003a84:	f7fc fffa 	bl	8000a7c <__aeabi_d2iz>
 8003a88:	ab0e      	add	r3, sp, #56	; 0x38
 8003a8a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003a8e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a96:	f7fc fba1 	bl	80001dc <__adddf3>
 8003a9a:	3501      	adds	r5, #1
 8003a9c:	4680      	mov	r8, r0
 8003a9e:	4689      	mov	r9, r1
 8003aa0:	e75e      	b.n	8003960 <__kernel_rem_pio2+0x100>
 8003aa2:	d105      	bne.n	8003ab0 <__kernel_rem_pio2+0x250>
 8003aa4:	1e63      	subs	r3, r4, #1
 8003aa6:	aa0e      	add	r2, sp, #56	; 0x38
 8003aa8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003aac:	15c3      	asrs	r3, r0, #23
 8003aae:	e79f      	b.n	80039f0 <__kernel_rem_pio2+0x190>
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <__kernel_rem_pio2+0x33c>)
 8003ab4:	f7fc ffce 	bl	8000a54 <__aeabi_dcmpge>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d139      	bne.n	8003b30 <__kernel_rem_pio2+0x2d0>
 8003abc:	9002      	str	r0, [sp, #8]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	4639      	mov	r1, r7
 8003ac6:	f7fc ffa7 	bl	8000a18 <__aeabi_dcmpeq>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	f000 80c7 	beq.w	8003c5e <__kernel_rem_pio2+0x3fe>
 8003ad0:	1e65      	subs	r5, r4, #1
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	9904      	ldr	r1, [sp, #16]
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	da6a      	bge.n	8003bb2 <__kernel_rem_pio2+0x352>
 8003adc:	2a00      	cmp	r2, #0
 8003ade:	f000 8088 	beq.w	8003bf2 <__kernel_rem_pio2+0x392>
 8003ae2:	ab0e      	add	r3, sp, #56	; 0x38
 8003ae4:	f1aa 0a18 	sub.w	sl, sl, #24
 8003ae8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80b4 	beq.w	8003c5a <__kernel_rem_pio2+0x3fa>
 8003af2:	4650      	mov	r0, sl
 8003af4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8003b80 <__kernel_rem_pio2+0x320>
 8003af8:	f000 fb3a 	bl	8004170 <scalbn>
 8003afc:	00ec      	lsls	r4, r5, #3
 8003afe:	ab72      	add	r3, sp, #456	; 0x1c8
 8003b00:	191e      	adds	r6, r3, r4
 8003b02:	ec59 8b10 	vmov	r8, r9, d0
 8003b06:	f106 0a08 	add.w	sl, r6, #8
 8003b0a:	462f      	mov	r7, r5
 8003b0c:	2f00      	cmp	r7, #0
 8003b0e:	f280 80df 	bge.w	8003cd0 <__kernel_rem_pio2+0x470>
 8003b12:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8003b78 <__kernel_rem_pio2+0x318>
 8003b16:	f04f 0a00 	mov.w	sl, #0
 8003b1a:	eba5 030a 	sub.w	r3, r5, sl
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f2c0 810a 	blt.w	8003d38 <__kernel_rem_pio2+0x4d8>
 8003b24:	f8df b078 	ldr.w	fp, [pc, #120]	; 8003ba0 <__kernel_rem_pio2+0x340>
 8003b28:	ec59 8b18 	vmov	r8, r9, d8
 8003b2c:	2700      	movs	r7, #0
 8003b2e:	e0f5      	b.n	8003d1c <__kernel_rem_pio2+0x4bc>
 8003b30:	2302      	movs	r3, #2
 8003b32:	9302      	str	r3, [sp, #8]
 8003b34:	e760      	b.n	80039f8 <__kernel_rem_pio2+0x198>
 8003b36:	ab0e      	add	r3, sp, #56	; 0x38
 8003b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3c:	b94d      	cbnz	r5, 8003b52 <__kernel_rem_pio2+0x2f2>
 8003b3e:	b12b      	cbz	r3, 8003b4c <__kernel_rem_pio2+0x2ec>
 8003b40:	a80e      	add	r0, sp, #56	; 0x38
 8003b42:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003b46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	3201      	adds	r2, #1
 8003b4e:	461d      	mov	r5, r3
 8003b50:	e759      	b.n	8003a06 <__kernel_rem_pio2+0x1a6>
 8003b52:	a80e      	add	r0, sp, #56	; 0x38
 8003b54:	1acb      	subs	r3, r1, r3
 8003b56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003b5a:	462b      	mov	r3, r5
 8003b5c:	e7f6      	b.n	8003b4c <__kernel_rem_pio2+0x2ec>
 8003b5e:	1e62      	subs	r2, r4, #1
 8003b60:	ab0e      	add	r3, sp, #56	; 0x38
 8003b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003b6a:	a90e      	add	r1, sp, #56	; 0x38
 8003b6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003b70:	e757      	b.n	8003a22 <__kernel_rem_pio2+0x1c2>
 8003b72:	bf00      	nop
 8003b74:	f3af 8000 	nop.w
	...
 8003b84:	3ff00000 	.word	0x3ff00000
 8003b88:	080044a0 	.word	0x080044a0
 8003b8c:	40200000 	.word	0x40200000
 8003b90:	3ff00000 	.word	0x3ff00000
 8003b94:	3e700000 	.word	0x3e700000
 8003b98:	41700000 	.word	0x41700000
 8003b9c:	3fe00000 	.word	0x3fe00000
 8003ba0:	08004460 	.word	0x08004460
 8003ba4:	1e62      	subs	r2, r4, #1
 8003ba6:	ab0e      	add	r3, sp, #56	; 0x38
 8003ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003bb0:	e7db      	b.n	8003b6a <__kernel_rem_pio2+0x30a>
 8003bb2:	a90e      	add	r1, sp, #56	; 0x38
 8003bb4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	e78b      	b.n	8003ad6 <__kernel_rem_pio2+0x276>
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d0fa      	beq.n	8003bbe <__kernel_rem_pio2+0x35e>
 8003bc8:	9a08      	ldr	r2, [sp, #32]
 8003bca:	4422      	add	r2, r4
 8003bcc:	00d2      	lsls	r2, r2, #3
 8003bce:	a922      	add	r1, sp, #136	; 0x88
 8003bd0:	18e3      	adds	r3, r4, r3
 8003bd2:	9206      	str	r2, [sp, #24]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	9302      	str	r3, [sp, #8]
 8003bd8:	f10b 0108 	add.w	r1, fp, #8
 8003bdc:	f102 0308 	add.w	r3, r2, #8
 8003be0:	1c66      	adds	r6, r4, #1
 8003be2:	910a      	str	r1, [sp, #40]	; 0x28
 8003be4:	2500      	movs	r5, #0
 8003be6:	930d      	str	r3, [sp, #52]	; 0x34
 8003be8:	9b02      	ldr	r3, [sp, #8]
 8003bea:	42b3      	cmp	r3, r6
 8003bec:	da04      	bge.n	8003bf8 <__kernel_rem_pio2+0x398>
 8003bee:	461c      	mov	r4, r3
 8003bf0:	e6a6      	b.n	8003940 <__kernel_rem_pio2+0xe0>
 8003bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e7e3      	b.n	8003bc0 <__kernel_rem_pio2+0x360>
 8003bf8:	9b06      	ldr	r3, [sp, #24]
 8003bfa:	18ef      	adds	r7, r5, r3
 8003bfc:	ab22      	add	r3, sp, #136	; 0x88
 8003bfe:	441f      	add	r7, r3
 8003c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003c06:	f7fc fc35 	bl	8000474 <__aeabi_i2d>
 8003c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c0c:	461c      	mov	r4, r3
 8003c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c10:	e9c7 0100 	strd	r0, r1, [r7]
 8003c14:	eb03 0b05 	add.w	fp, r3, r5
 8003c18:	2700      	movs	r7, #0
 8003c1a:	f04f 0800 	mov.w	r8, #0
 8003c1e:	f04f 0900 	mov.w	r9, #0
 8003c22:	9b07      	ldr	r3, [sp, #28]
 8003c24:	429f      	cmp	r7, r3
 8003c26:	dd08      	ble.n	8003c3a <__kernel_rem_pio2+0x3da>
 8003c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c2a:	aa72      	add	r2, sp, #456	; 0x1c8
 8003c2c:	18eb      	adds	r3, r5, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8003c34:	3601      	adds	r6, #1
 8003c36:	3508      	adds	r5, #8
 8003c38:	e7d6      	b.n	8003be8 <__kernel_rem_pio2+0x388>
 8003c3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003c3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003c42:	f7fc fc81 	bl	8000548 <__aeabi_dmul>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4640      	mov	r0, r8
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	f7fc fac5 	bl	80001dc <__adddf3>
 8003c52:	3701      	adds	r7, #1
 8003c54:	4680      	mov	r8, r0
 8003c56:	4689      	mov	r9, r1
 8003c58:	e7e3      	b.n	8003c22 <__kernel_rem_pio2+0x3c2>
 8003c5a:	3d01      	subs	r5, #1
 8003c5c:	e741      	b.n	8003ae2 <__kernel_rem_pio2+0x282>
 8003c5e:	f1ca 0000 	rsb	r0, sl, #0
 8003c62:	ec47 6b10 	vmov	d0, r6, r7
 8003c66:	f000 fa83 	bl	8004170 <scalbn>
 8003c6a:	ec57 6b10 	vmov	r6, r7, d0
 8003c6e:	2200      	movs	r2, #0
 8003c70:	4b99      	ldr	r3, [pc, #612]	; (8003ed8 <__kernel_rem_pio2+0x678>)
 8003c72:	ee10 0a10 	vmov	r0, s0
 8003c76:	4639      	mov	r1, r7
 8003c78:	f7fc feec 	bl	8000a54 <__aeabi_dcmpge>
 8003c7c:	b1f8      	cbz	r0, 8003cbe <__kernel_rem_pio2+0x45e>
 8003c7e:	2200      	movs	r2, #0
 8003c80:	4b96      	ldr	r3, [pc, #600]	; (8003edc <__kernel_rem_pio2+0x67c>)
 8003c82:	4630      	mov	r0, r6
 8003c84:	4639      	mov	r1, r7
 8003c86:	f7fc fc5f 	bl	8000548 <__aeabi_dmul>
 8003c8a:	f7fc fef7 	bl	8000a7c <__aeabi_d2iz>
 8003c8e:	4680      	mov	r8, r0
 8003c90:	f7fc fbf0 	bl	8000474 <__aeabi_i2d>
 8003c94:	2200      	movs	r2, #0
 8003c96:	4b90      	ldr	r3, [pc, #576]	; (8003ed8 <__kernel_rem_pio2+0x678>)
 8003c98:	f7fc fc56 	bl	8000548 <__aeabi_dmul>
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	4639      	mov	r1, r7
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7fc fa98 	bl	80001d8 <__aeabi_dsub>
 8003ca8:	f7fc fee8 	bl	8000a7c <__aeabi_d2iz>
 8003cac:	1c65      	adds	r5, r4, #1
 8003cae:	ab0e      	add	r3, sp, #56	; 0x38
 8003cb0:	f10a 0a18 	add.w	sl, sl, #24
 8003cb4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003cb8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003cbc:	e719      	b.n	8003af2 <__kernel_rem_pio2+0x292>
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	4639      	mov	r1, r7
 8003cc2:	f7fc fedb 	bl	8000a7c <__aeabi_d2iz>
 8003cc6:	ab0e      	add	r3, sp, #56	; 0x38
 8003cc8:	4625      	mov	r5, r4
 8003cca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003cce:	e710      	b.n	8003af2 <__kernel_rem_pio2+0x292>
 8003cd0:	ab0e      	add	r3, sp, #56	; 0x38
 8003cd2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003cd6:	f7fc fbcd 	bl	8000474 <__aeabi_i2d>
 8003cda:	4642      	mov	r2, r8
 8003cdc:	464b      	mov	r3, r9
 8003cde:	f7fc fc33 	bl	8000548 <__aeabi_dmul>
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8003ce8:	4b7c      	ldr	r3, [pc, #496]	; (8003edc <__kernel_rem_pio2+0x67c>)
 8003cea:	4640      	mov	r0, r8
 8003cec:	4649      	mov	r1, r9
 8003cee:	f7fc fc2b 	bl	8000548 <__aeabi_dmul>
 8003cf2:	3f01      	subs	r7, #1
 8003cf4:	4680      	mov	r8, r0
 8003cf6:	4689      	mov	r9, r1
 8003cf8:	e708      	b.n	8003b0c <__kernel_rem_pio2+0x2ac>
 8003cfa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8003d06:	f7fc fc1f 	bl	8000548 <__aeabi_dmul>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4640      	mov	r0, r8
 8003d10:	4649      	mov	r1, r9
 8003d12:	f7fc fa63 	bl	80001dc <__adddf3>
 8003d16:	3701      	adds	r7, #1
 8003d18:	4680      	mov	r8, r0
 8003d1a:	4689      	mov	r9, r1
 8003d1c:	9b04      	ldr	r3, [sp, #16]
 8003d1e:	429f      	cmp	r7, r3
 8003d20:	dc01      	bgt.n	8003d26 <__kernel_rem_pio2+0x4c6>
 8003d22:	45ba      	cmp	sl, r7
 8003d24:	dae9      	bge.n	8003cfa <__kernel_rem_pio2+0x49a>
 8003d26:	ab4a      	add	r3, sp, #296	; 0x128
 8003d28:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003d2c:	e9c3 8900 	strd	r8, r9, [r3]
 8003d30:	f10a 0a01 	add.w	sl, sl, #1
 8003d34:	3e08      	subs	r6, #8
 8003d36:	e6f0      	b.n	8003b1a <__kernel_rem_pio2+0x2ba>
 8003d38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d85b      	bhi.n	8003df6 <__kernel_rem_pio2+0x596>
 8003d3e:	e8df f003 	tbb	[pc, r3]
 8003d42:	264a      	.short	0x264a
 8003d44:	0226      	.short	0x0226
 8003d46:	ab9a      	add	r3, sp, #616	; 0x268
 8003d48:	441c      	add	r4, r3
 8003d4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003d4e:	46a2      	mov	sl, r4
 8003d50:	46ab      	mov	fp, r5
 8003d52:	f1bb 0f00 	cmp.w	fp, #0
 8003d56:	dc6c      	bgt.n	8003e32 <__kernel_rem_pio2+0x5d2>
 8003d58:	46a2      	mov	sl, r4
 8003d5a:	46ab      	mov	fp, r5
 8003d5c:	f1bb 0f01 	cmp.w	fp, #1
 8003d60:	f300 8086 	bgt.w	8003e70 <__kernel_rem_pio2+0x610>
 8003d64:	2000      	movs	r0, #0
 8003d66:	2100      	movs	r1, #0
 8003d68:	2d01      	cmp	r5, #1
 8003d6a:	f300 80a0 	bgt.w	8003eae <__kernel_rem_pio2+0x64e>
 8003d6e:	9b02      	ldr	r3, [sp, #8]
 8003d70:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8003d74:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f040 809e 	bne.w	8003eba <__kernel_rem_pio2+0x65a>
 8003d7e:	9b01      	ldr	r3, [sp, #4]
 8003d80:	e9c3 7800 	strd	r7, r8, [r3]
 8003d84:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003d88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003d8c:	e033      	b.n	8003df6 <__kernel_rem_pio2+0x596>
 8003d8e:	3408      	adds	r4, #8
 8003d90:	ab4a      	add	r3, sp, #296	; 0x128
 8003d92:	441c      	add	r4, r3
 8003d94:	462e      	mov	r6, r5
 8003d96:	2000      	movs	r0, #0
 8003d98:	2100      	movs	r1, #0
 8003d9a:	2e00      	cmp	r6, #0
 8003d9c:	da3a      	bge.n	8003e14 <__kernel_rem_pio2+0x5b4>
 8003d9e:	9b02      	ldr	r3, [sp, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d03d      	beq.n	8003e20 <__kernel_rem_pio2+0x5c0>
 8003da4:	4602      	mov	r2, r0
 8003da6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003daa:	9c01      	ldr	r4, [sp, #4]
 8003dac:	e9c4 2300 	strd	r2, r3, [r4]
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8003db8:	f7fc fa0e 	bl	80001d8 <__aeabi_dsub>
 8003dbc:	ae4c      	add	r6, sp, #304	; 0x130
 8003dbe:	2401      	movs	r4, #1
 8003dc0:	42a5      	cmp	r5, r4
 8003dc2:	da30      	bge.n	8003e26 <__kernel_rem_pio2+0x5c6>
 8003dc4:	9b02      	ldr	r3, [sp, #8]
 8003dc6:	b113      	cbz	r3, 8003dce <__kernel_rem_pio2+0x56e>
 8003dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dcc:	4619      	mov	r1, r3
 8003dce:	9b01      	ldr	r3, [sp, #4]
 8003dd0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003dd4:	e00f      	b.n	8003df6 <__kernel_rem_pio2+0x596>
 8003dd6:	ab9a      	add	r3, sp, #616	; 0x268
 8003dd8:	441c      	add	r4, r3
 8003dda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003dde:	2000      	movs	r0, #0
 8003de0:	2100      	movs	r1, #0
 8003de2:	2d00      	cmp	r5, #0
 8003de4:	da10      	bge.n	8003e08 <__kernel_rem_pio2+0x5a8>
 8003de6:	9b02      	ldr	r3, [sp, #8]
 8003de8:	b113      	cbz	r3, 8003df0 <__kernel_rem_pio2+0x590>
 8003dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dee:	4619      	mov	r1, r3
 8003df0:	9b01      	ldr	r3, [sp, #4]
 8003df2:	e9c3 0100 	strd	r0, r1, [r3]
 8003df6:	9b06      	ldr	r3, [sp, #24]
 8003df8:	f003 0007 	and.w	r0, r3, #7
 8003dfc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003e00:	ecbd 8b02 	vpop	{d8}
 8003e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e08:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003e0c:	f7fc f9e6 	bl	80001dc <__adddf3>
 8003e10:	3d01      	subs	r5, #1
 8003e12:	e7e6      	b.n	8003de2 <__kernel_rem_pio2+0x582>
 8003e14:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003e18:	f7fc f9e0 	bl	80001dc <__adddf3>
 8003e1c:	3e01      	subs	r6, #1
 8003e1e:	e7bc      	b.n	8003d9a <__kernel_rem_pio2+0x53a>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	e7c1      	b.n	8003daa <__kernel_rem_pio2+0x54a>
 8003e26:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003e2a:	f7fc f9d7 	bl	80001dc <__adddf3>
 8003e2e:	3401      	adds	r4, #1
 8003e30:	e7c6      	b.n	8003dc0 <__kernel_rem_pio2+0x560>
 8003e32:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8003e36:	ed3a 7b02 	vldmdb	sl!, {d7}
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	ec53 2b17 	vmov	r2, r3, d7
 8003e40:	4649      	mov	r1, r9
 8003e42:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003e46:	f7fc f9c9 	bl	80001dc <__adddf3>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4606      	mov	r6, r0
 8003e50:	460f      	mov	r7, r1
 8003e52:	4640      	mov	r0, r8
 8003e54:	4649      	mov	r1, r9
 8003e56:	f7fc f9bf 	bl	80001d8 <__aeabi_dsub>
 8003e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e5e:	f7fc f9bd 	bl	80001dc <__adddf3>
 8003e62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e66:	e9ca 0100 	strd	r0, r1, [sl]
 8003e6a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8003e6e:	e770      	b.n	8003d52 <__kernel_rem_pio2+0x4f2>
 8003e70:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8003e74:	ed3a 7b02 	vldmdb	sl!, {d7}
 8003e78:	4630      	mov	r0, r6
 8003e7a:	ec53 2b17 	vmov	r2, r3, d7
 8003e7e:	4639      	mov	r1, r7
 8003e80:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003e84:	f7fc f9aa 	bl	80001dc <__adddf3>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4680      	mov	r8, r0
 8003e8e:	4689      	mov	r9, r1
 8003e90:	4630      	mov	r0, r6
 8003e92:	4639      	mov	r1, r7
 8003e94:	f7fc f9a0 	bl	80001d8 <__aeabi_dsub>
 8003e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e9c:	f7fc f99e 	bl	80001dc <__adddf3>
 8003ea0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ea4:	e9ca 0100 	strd	r0, r1, [sl]
 8003ea8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8003eac:	e756      	b.n	8003d5c <__kernel_rem_pio2+0x4fc>
 8003eae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003eb2:	f7fc f993 	bl	80001dc <__adddf3>
 8003eb6:	3d01      	subs	r5, #1
 8003eb8:	e756      	b.n	8003d68 <__kernel_rem_pio2+0x508>
 8003eba:	9b01      	ldr	r3, [sp, #4]
 8003ebc:	9a01      	ldr	r2, [sp, #4]
 8003ebe:	601f      	str	r7, [r3, #0]
 8003ec0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8003ec4:	605c      	str	r4, [r3, #4]
 8003ec6:	609d      	str	r5, [r3, #8]
 8003ec8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003ecc:	60d3      	str	r3, [r2, #12]
 8003ece:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ed2:	6110      	str	r0, [r2, #16]
 8003ed4:	6153      	str	r3, [r2, #20]
 8003ed6:	e78e      	b.n	8003df6 <__kernel_rem_pio2+0x596>
 8003ed8:	41700000 	.word	0x41700000
 8003edc:	3e700000 	.word	0x3e700000

08003ee0 <__kernel_sin>:
 8003ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee4:	ec55 4b10 	vmov	r4, r5, d0
 8003ee8:	b085      	sub	sp, #20
 8003eea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003eee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003ef2:	ed8d 1b00 	vstr	d1, [sp]
 8003ef6:	9002      	str	r0, [sp, #8]
 8003ef8:	da06      	bge.n	8003f08 <__kernel_sin+0x28>
 8003efa:	ee10 0a10 	vmov	r0, s0
 8003efe:	4629      	mov	r1, r5
 8003f00:	f7fc fdbc 	bl	8000a7c <__aeabi_d2iz>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d051      	beq.n	8003fac <__kernel_sin+0xcc>
 8003f08:	4622      	mov	r2, r4
 8003f0a:	462b      	mov	r3, r5
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	4629      	mov	r1, r5
 8003f10:	f7fc fb1a 	bl	8000548 <__aeabi_dmul>
 8003f14:	4682      	mov	sl, r0
 8003f16:	468b      	mov	fp, r1
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc fb12 	bl	8000548 <__aeabi_dmul>
 8003f24:	a341      	add	r3, pc, #260	; (adr r3, 800402c <__kernel_sin+0x14c>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	4680      	mov	r8, r0
 8003f2c:	4689      	mov	r9, r1
 8003f2e:	4650      	mov	r0, sl
 8003f30:	4659      	mov	r1, fp
 8003f32:	f7fc fb09 	bl	8000548 <__aeabi_dmul>
 8003f36:	a33f      	add	r3, pc, #252	; (adr r3, 8004034 <__kernel_sin+0x154>)
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f7fc f94c 	bl	80001d8 <__aeabi_dsub>
 8003f40:	4652      	mov	r2, sl
 8003f42:	465b      	mov	r3, fp
 8003f44:	f7fc fb00 	bl	8000548 <__aeabi_dmul>
 8003f48:	a33c      	add	r3, pc, #240	; (adr r3, 800403c <__kernel_sin+0x15c>)
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f7fc f945 	bl	80001dc <__adddf3>
 8003f52:	4652      	mov	r2, sl
 8003f54:	465b      	mov	r3, fp
 8003f56:	f7fc faf7 	bl	8000548 <__aeabi_dmul>
 8003f5a:	a33a      	add	r3, pc, #232	; (adr r3, 8004044 <__kernel_sin+0x164>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc f93a 	bl	80001d8 <__aeabi_dsub>
 8003f64:	4652      	mov	r2, sl
 8003f66:	465b      	mov	r3, fp
 8003f68:	f7fc faee 	bl	8000548 <__aeabi_dmul>
 8003f6c:	a337      	add	r3, pc, #220	; (adr r3, 800404c <__kernel_sin+0x16c>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f7fc f933 	bl	80001dc <__adddf3>
 8003f76:	9b02      	ldr	r3, [sp, #8]
 8003f78:	4606      	mov	r6, r0
 8003f7a:	460f      	mov	r7, r1
 8003f7c:	b9db      	cbnz	r3, 8003fb6 <__kernel_sin+0xd6>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4650      	mov	r0, sl
 8003f84:	4659      	mov	r1, fp
 8003f86:	f7fc fadf 	bl	8000548 <__aeabi_dmul>
 8003f8a:	a325      	add	r3, pc, #148	; (adr r3, 8004020 <__kernel_sin+0x140>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f7fc f922 	bl	80001d8 <__aeabi_dsub>
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	f7fc fad6 	bl	8000548 <__aeabi_dmul>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	f7fc f91a 	bl	80001dc <__adddf3>
 8003fa8:	4604      	mov	r4, r0
 8003faa:	460d      	mov	r5, r1
 8003fac:	ec45 4b10 	vmov	d0, r4, r5
 8003fb0:	b005      	add	sp, #20
 8003fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <__kernel_sin+0x148>)
 8003fba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fbe:	f7fc fac3 	bl	8000548 <__aeabi_dmul>
 8003fc2:	4632      	mov	r2, r6
 8003fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fc8:	463b      	mov	r3, r7
 8003fca:	4640      	mov	r0, r8
 8003fcc:	4649      	mov	r1, r9
 8003fce:	f7fc fabb 	bl	8000548 <__aeabi_dmul>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fda:	f7fc f8fd 	bl	80001d8 <__aeabi_dsub>
 8003fde:	4652      	mov	r2, sl
 8003fe0:	465b      	mov	r3, fp
 8003fe2:	f7fc fab1 	bl	8000548 <__aeabi_dmul>
 8003fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fea:	f7fc f8f5 	bl	80001d8 <__aeabi_dsub>
 8003fee:	a30c      	add	r3, pc, #48	; (adr r3, 8004020 <__kernel_sin+0x140>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	4606      	mov	r6, r0
 8003ff6:	460f      	mov	r7, r1
 8003ff8:	4640      	mov	r0, r8
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	f7fc faa4 	bl	8000548 <__aeabi_dmul>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4630      	mov	r0, r6
 8004006:	4639      	mov	r1, r7
 8004008:	f7fc f8e8 	bl	80001dc <__adddf3>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4620      	mov	r0, r4
 8004012:	4629      	mov	r1, r5
 8004014:	f7fc f8e0 	bl	80001d8 <__aeabi_dsub>
 8004018:	e7c6      	b.n	8003fa8 <__kernel_sin+0xc8>
 800401a:	bf00      	nop
 800401c:	f3af 8000 	nop.w
 8004020:	55555549 	.word	0x55555549
 8004024:	3fc55555 	.word	0x3fc55555
 8004028:	3fe00000 	.word	0x3fe00000
 800402c:	5acfd57c 	.word	0x5acfd57c
 8004030:	3de5d93a 	.word	0x3de5d93a
 8004034:	8a2b9ceb 	.word	0x8a2b9ceb
 8004038:	3e5ae5e6 	.word	0x3e5ae5e6
 800403c:	57b1fe7d 	.word	0x57b1fe7d
 8004040:	3ec71de3 	.word	0x3ec71de3
 8004044:	19c161d5 	.word	0x19c161d5
 8004048:	3f2a01a0 	.word	0x3f2a01a0
 800404c:	1110f8a6 	.word	0x1110f8a6
 8004050:	3f811111 	.word	0x3f811111

08004054 <fabs>:
 8004054:	ec51 0b10 	vmov	r0, r1, d0
 8004058:	ee10 2a10 	vmov	r2, s0
 800405c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004060:	ec43 2b10 	vmov	d0, r2, r3
 8004064:	4770      	bx	lr
	...

08004068 <floor>:
 8004068:	ec51 0b10 	vmov	r0, r1, d0
 800406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004070:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004074:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004078:	2e13      	cmp	r6, #19
 800407a:	460c      	mov	r4, r1
 800407c:	ee10 5a10 	vmov	r5, s0
 8004080:	4680      	mov	r8, r0
 8004082:	dc34      	bgt.n	80040ee <floor+0x86>
 8004084:	2e00      	cmp	r6, #0
 8004086:	da16      	bge.n	80040b6 <floor+0x4e>
 8004088:	a335      	add	r3, pc, #212	; (adr r3, 8004160 <floor+0xf8>)
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f7fc f8a5 	bl	80001dc <__adddf3>
 8004092:	2200      	movs	r2, #0
 8004094:	2300      	movs	r3, #0
 8004096:	f7fc fce7 	bl	8000a68 <__aeabi_dcmpgt>
 800409a:	b148      	cbz	r0, 80040b0 <floor+0x48>
 800409c:	2c00      	cmp	r4, #0
 800409e:	da59      	bge.n	8004154 <floor+0xec>
 80040a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80040a4:	4a30      	ldr	r2, [pc, #192]	; (8004168 <floor+0x100>)
 80040a6:	432b      	orrs	r3, r5
 80040a8:	2500      	movs	r5, #0
 80040aa:	42ab      	cmp	r3, r5
 80040ac:	bf18      	it	ne
 80040ae:	4614      	movne	r4, r2
 80040b0:	4621      	mov	r1, r4
 80040b2:	4628      	mov	r0, r5
 80040b4:	e025      	b.n	8004102 <floor+0x9a>
 80040b6:	4f2d      	ldr	r7, [pc, #180]	; (800416c <floor+0x104>)
 80040b8:	4137      	asrs	r7, r6
 80040ba:	ea01 0307 	and.w	r3, r1, r7
 80040be:	4303      	orrs	r3, r0
 80040c0:	d01f      	beq.n	8004102 <floor+0x9a>
 80040c2:	a327      	add	r3, pc, #156	; (adr r3, 8004160 <floor+0xf8>)
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f7fc f888 	bl	80001dc <__adddf3>
 80040cc:	2200      	movs	r2, #0
 80040ce:	2300      	movs	r3, #0
 80040d0:	f7fc fcca 	bl	8000a68 <__aeabi_dcmpgt>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d0eb      	beq.n	80040b0 <floor+0x48>
 80040d8:	2c00      	cmp	r4, #0
 80040da:	bfbe      	ittt	lt
 80040dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80040e0:	fa43 f606 	asrlt.w	r6, r3, r6
 80040e4:	19a4      	addlt	r4, r4, r6
 80040e6:	ea24 0407 	bic.w	r4, r4, r7
 80040ea:	2500      	movs	r5, #0
 80040ec:	e7e0      	b.n	80040b0 <floor+0x48>
 80040ee:	2e33      	cmp	r6, #51	; 0x33
 80040f0:	dd0b      	ble.n	800410a <floor+0xa2>
 80040f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80040f6:	d104      	bne.n	8004102 <floor+0x9a>
 80040f8:	ee10 2a10 	vmov	r2, s0
 80040fc:	460b      	mov	r3, r1
 80040fe:	f7fc f86d 	bl	80001dc <__adddf3>
 8004102:	ec41 0b10 	vmov	d0, r0, r1
 8004106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800410a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	fa23 f707 	lsr.w	r7, r3, r7
 8004116:	4207      	tst	r7, r0
 8004118:	d0f3      	beq.n	8004102 <floor+0x9a>
 800411a:	a311      	add	r3, pc, #68	; (adr r3, 8004160 <floor+0xf8>)
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f7fc f85c 	bl	80001dc <__adddf3>
 8004124:	2200      	movs	r2, #0
 8004126:	2300      	movs	r3, #0
 8004128:	f7fc fc9e 	bl	8000a68 <__aeabi_dcmpgt>
 800412c:	2800      	cmp	r0, #0
 800412e:	d0bf      	beq.n	80040b0 <floor+0x48>
 8004130:	2c00      	cmp	r4, #0
 8004132:	da02      	bge.n	800413a <floor+0xd2>
 8004134:	2e14      	cmp	r6, #20
 8004136:	d103      	bne.n	8004140 <floor+0xd8>
 8004138:	3401      	adds	r4, #1
 800413a:	ea25 0507 	bic.w	r5, r5, r7
 800413e:	e7b7      	b.n	80040b0 <floor+0x48>
 8004140:	2301      	movs	r3, #1
 8004142:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004146:	fa03 f606 	lsl.w	r6, r3, r6
 800414a:	4435      	add	r5, r6
 800414c:	4545      	cmp	r5, r8
 800414e:	bf38      	it	cc
 8004150:	18e4      	addcc	r4, r4, r3
 8004152:	e7f2      	b.n	800413a <floor+0xd2>
 8004154:	2500      	movs	r5, #0
 8004156:	462c      	mov	r4, r5
 8004158:	e7aa      	b.n	80040b0 <floor+0x48>
 800415a:	bf00      	nop
 800415c:	f3af 8000 	nop.w
 8004160:	8800759c 	.word	0x8800759c
 8004164:	7e37e43c 	.word	0x7e37e43c
 8004168:	bff00000 	.word	0xbff00000
 800416c:	000fffff 	.word	0x000fffff

08004170 <scalbn>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	ec55 4b10 	vmov	r4, r5, d0
 8004176:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800417a:	4606      	mov	r6, r0
 800417c:	462b      	mov	r3, r5
 800417e:	b9aa      	cbnz	r2, 80041ac <scalbn+0x3c>
 8004180:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004184:	4323      	orrs	r3, r4
 8004186:	d03b      	beq.n	8004200 <scalbn+0x90>
 8004188:	4b31      	ldr	r3, [pc, #196]	; (8004250 <scalbn+0xe0>)
 800418a:	4629      	mov	r1, r5
 800418c:	2200      	movs	r2, #0
 800418e:	ee10 0a10 	vmov	r0, s0
 8004192:	f7fc f9d9 	bl	8000548 <__aeabi_dmul>
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <scalbn+0xe4>)
 8004198:	429e      	cmp	r6, r3
 800419a:	4604      	mov	r4, r0
 800419c:	460d      	mov	r5, r1
 800419e:	da12      	bge.n	80041c6 <scalbn+0x56>
 80041a0:	a327      	add	r3, pc, #156	; (adr r3, 8004240 <scalbn+0xd0>)
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f7fc f9cf 	bl	8000548 <__aeabi_dmul>
 80041aa:	e009      	b.n	80041c0 <scalbn+0x50>
 80041ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80041b0:	428a      	cmp	r2, r1
 80041b2:	d10c      	bne.n	80041ce <scalbn+0x5e>
 80041b4:	ee10 2a10 	vmov	r2, s0
 80041b8:	4620      	mov	r0, r4
 80041ba:	4629      	mov	r1, r5
 80041bc:	f7fc f80e 	bl	80001dc <__adddf3>
 80041c0:	4604      	mov	r4, r0
 80041c2:	460d      	mov	r5, r1
 80041c4:	e01c      	b.n	8004200 <scalbn+0x90>
 80041c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80041ca:	460b      	mov	r3, r1
 80041cc:	3a36      	subs	r2, #54	; 0x36
 80041ce:	4432      	add	r2, r6
 80041d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80041d4:	428a      	cmp	r2, r1
 80041d6:	dd0b      	ble.n	80041f0 <scalbn+0x80>
 80041d8:	ec45 4b11 	vmov	d1, r4, r5
 80041dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004248 <scalbn+0xd8>
 80041e0:	f000 f83c 	bl	800425c <copysign>
 80041e4:	a318      	add	r3, pc, #96	; (adr r3, 8004248 <scalbn+0xd8>)
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	ec51 0b10 	vmov	r0, r1, d0
 80041ee:	e7da      	b.n	80041a6 <scalbn+0x36>
 80041f0:	2a00      	cmp	r2, #0
 80041f2:	dd08      	ble.n	8004206 <scalbn+0x96>
 80041f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80041f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80041fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004200:	ec45 4b10 	vmov	d0, r4, r5
 8004204:	bd70      	pop	{r4, r5, r6, pc}
 8004206:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800420a:	da0d      	bge.n	8004228 <scalbn+0xb8>
 800420c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004210:	429e      	cmp	r6, r3
 8004212:	ec45 4b11 	vmov	d1, r4, r5
 8004216:	dce1      	bgt.n	80041dc <scalbn+0x6c>
 8004218:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004240 <scalbn+0xd0>
 800421c:	f000 f81e 	bl	800425c <copysign>
 8004220:	a307      	add	r3, pc, #28	; (adr r3, 8004240 <scalbn+0xd0>)
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	e7e0      	b.n	80041ea <scalbn+0x7a>
 8004228:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800422c:	3236      	adds	r2, #54	; 0x36
 800422e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004232:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004236:	4620      	mov	r0, r4
 8004238:	4629      	mov	r1, r5
 800423a:	2200      	movs	r2, #0
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <scalbn+0xe8>)
 800423e:	e7b2      	b.n	80041a6 <scalbn+0x36>
 8004240:	c2f8f359 	.word	0xc2f8f359
 8004244:	01a56e1f 	.word	0x01a56e1f
 8004248:	8800759c 	.word	0x8800759c
 800424c:	7e37e43c 	.word	0x7e37e43c
 8004250:	43500000 	.word	0x43500000
 8004254:	ffff3cb0 	.word	0xffff3cb0
 8004258:	3c900000 	.word	0x3c900000

0800425c <copysign>:
 800425c:	ec51 0b10 	vmov	r0, r1, d0
 8004260:	ee11 0a90 	vmov	r0, s3
 8004264:	ee10 2a10 	vmov	r2, s0
 8004268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800426c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004270:	ea41 0300 	orr.w	r3, r1, r0
 8004274:	ec43 2b10 	vmov	d0, r2, r3
 8004278:	4770      	bx	lr
	...

0800427c <_init>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr

08004288 <_fini>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr
