
DMAread.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030cc  080030cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030d4  080030d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  080030e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080030e8  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009497  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001715  00000000  00000000  000294d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e0  00000000  00000000  0002abe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000818  00000000  00000000  0002b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f00f  00000000  00000000  0002bce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007312  00000000  00000000  0004acef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bc6f4  00000000  00000000  00052001  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e6f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002344  00000000  00000000  0010e770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003048 	.word	0x08003048

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003048 	.word	0x08003048

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fa14 	bl	80008fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f821 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8cd 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 80004de:	f000 f8ad 	bl	800063c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f87b 	bl	80005dc <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t Prueba [] = "TE AMO MICHELLE SILES ROMERO  <3\r\n" ;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <main+0x48>)
 80004e8:	1d3c      	adds	r4, r7, #4
 80004ea:	461d      	mov	r5, r3
 80004ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f4:	682b      	ldr	r3, [r5, #0]
 80004f6:	461a      	mov	r2, r3
 80004f8:	8022      	strh	r2, [r4, #0]
 80004fa:	3402      	adds	r4, #2
 80004fc:	0c1b      	lsrs	r3, r3, #16
 80004fe:	7023      	strb	r3, [r4, #0]





	  	  	  HAL_UART_Transmit_DMA(&huart2, Prueba, sizeof(Prueba));
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2223      	movs	r2, #35	; 0x23
 8000504:	4619      	mov	r1, r3
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x4c>)
 8000508:	f002 f8bc 	bl	8002684 <HAL_UART_Transmit_DMA>

	  	  	  HAL_Delay(100);
 800050c:	2064      	movs	r0, #100	; 0x64
 800050e:	f000 fa6b 	bl	80009e8 <HAL_Delay>
  {
 8000512:	e7e8      	b.n	80004e6 <main+0x1a>
 8000514:	08003060 	.word	0x08003060
 8000518:	20000070 	.word	0x20000070

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0ac      	sub	sp, #176	; 0xb0
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fd84 	bl	8003038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2254      	movs	r2, #84	; 0x54
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fd76 	bl	8003038 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054c:	2310      	movs	r3, #16
 800054e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800056c:	4618      	mov	r0, r3
 800056e:	f000 ff35 	bl	80013dc <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000578:	f000 f896 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000580:	2300      	movs	r3, #0
 8000582:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fb40 	bl	8001c1c <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005a2:	f000 f881 	bl	80006a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fd37 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005bc:	f000 f874 	bl	80006a8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c4:	f000 feb4 	bl	8001330 <HAL_PWREx_ControlVoltageScaling>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005ce:	f000 f86b 	bl	80006a8 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	37b0      	adds	r7, #176	; 0xb0
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_USART2_UART_Init+0x58>)
 80005e2:	4a15      	ldr	r2, [pc, #84]	; (8000638 <MX_USART2_UART_Init+0x5c>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MX_USART2_UART_Init+0x58>)
 80005e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_USART2_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_USART2_UART_Init+0x58>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_USART2_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_USART2_UART_Init+0x58>)
 8000620:	f001 ffe2 	bl	80025e8 <HAL_UART_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800062a:	f000 f83d 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000070 	.word	0x20000070
 8000638:	40004400 	.word	0x40004400

0800063c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_DMA_Init+0x38>)
 8000644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <MX_DMA_Init+0x38>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6493      	str	r3, [r2, #72]	; 0x48
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_DMA_Init+0x38>)
 8000650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	2011      	movs	r0, #17
 8000660:	f000 fabf 	bl	8000be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000664:	2011      	movs	r0, #17
 8000666:	f000 fad8 	bl	8000c1a <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_GPIO_Init+0x2c>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <MX_GPIO_Init+0x2c>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_GPIO_Init+0x2c>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ae:	e7fe      	b.n	80006ae <Error_Handler+0x6>

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_MspInit+0x44>)
 80006b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_MspInit+0x44>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6613      	str	r3, [r2, #96]	; 0x60
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_MspInit+0x44>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_MspInit+0x44>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_MspInit+0x44>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6593      	str	r3, [r2, #88]	; 0x58
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_MspInit+0x44>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <HAL_UART_MspInit+0xd0>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d151      	bne.n	80007be <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800071a:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <HAL_UART_MspInit+0xd4>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071e:	4a2b      	ldr	r2, [pc, #172]	; (80007cc <HAL_UART_MspInit+0xd4>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	6593      	str	r3, [r2, #88]	; 0x58
 8000726:	4b29      	ldr	r3, [pc, #164]	; (80007cc <HAL_UART_MspInit+0xd4>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <HAL_UART_MspInit+0xd4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a25      	ldr	r2, [pc, #148]	; (80007cc <HAL_UART_MspInit+0xd4>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <HAL_UART_MspInit+0xd4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800074a:	230c      	movs	r3, #12
 800074c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800075a:	2307      	movs	r3, #7
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f000 fc6a 	bl	8001040 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 800076e:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <HAL_UART_MspInit+0xdc>)
 8000770:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 8000774:	2202      	movs	r2, #2
 8000776:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 800077a:	2210      	movs	r2, #16
 800077c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 8000798:	2220      	movs	r2, #32
 800079a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80007a2:	480b      	ldr	r0, [pc, #44]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 80007a4:	f000 fa54 	bl	8000c50 <HAL_DMA_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80007ae:	f7ff ff7b 	bl	80006a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 80007b6:	669a      	str	r2, [r3, #104]	; 0x68
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <HAL_UART_MspInit+0xd8>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007be:	bf00      	nop
 80007c0:	3728      	adds	r7, #40	; 0x28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40004400 	.word	0x40004400
 80007cc:	40021000 	.word	0x40021000
 80007d0:	20000028 	.word	0x20000028
 80007d4:	40020080 	.word	0x40020080

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f8c0 	bl	80009a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <DMA1_Channel7_IRQHandler+0x10>)
 8000832:	f000 fb25 	bl	8000e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000028 	.word	0x20000028

08000840 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <SystemInit+0x64>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <SystemInit+0x64>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <SystemInit+0x68>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <SystemInit+0x68>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <SystemInit+0x68>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <SystemInit+0x68>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <SystemInit+0x68>)
 800086c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000870:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000874:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <SystemInit+0x68>)
 8000878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800087c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <SystemInit+0x68>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <SystemInit+0x68>)
 8000884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000888:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <SystemInit+0x68>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SystemInit+0x64>)
 8000892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000896:	609a      	str	r2, [r3, #8]
#endif
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00
 80008a8:	40021000 	.word	0x40021000

080008ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b0:	f7ff ffc6 	bl	8000840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008b6:	e003      	b.n	80008c0 <LoopCopyDataInit>

080008b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008be:	3104      	adds	r1, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008c8:	d3f6      	bcc.n	80008b8 <CopyDataInit>
	ldr	r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008cc:	e002      	b.n	80008d4 <LoopFillZerobss>

080008ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008d0:	f842 3b04 	str.w	r3, [r2], #4

080008d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <LoopForever+0x16>)
	cmp	r2, r3
 80008d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008d8:	d3f9      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008da:	f002 fb89 	bl	8002ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008de:	f7ff fdf5 	bl	80004cc <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008e4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80008e8:	080030dc 	.word	0x080030dc
	ldr	r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008f0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80008f4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80008f8:	200000f4 	.word	0x200000f4

080008fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_IRQHandler>

080008fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000904:	2300      	movs	r3, #0
 8000906:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000908:	2003      	movs	r0, #3
 800090a:	f000 f95f 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f80e 	bl	8000930 <HAL_InitTick>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	e001      	b.n	8000924 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000920:	f7ff fec6 	bl	80006b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000924:	79fb      	ldrb	r3, [r7, #7]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_InitTick+0x6c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d023      	beq.n	800098c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_InitTick+0x70>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_InitTick+0x6c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f96b 	bl	8000c36 <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d10f      	bne.n	8000986 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d809      	bhi.n	8000980 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f000 f935 	bl	8000be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_InitTick+0x74>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	e007      	b.n	8000990 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	73fb      	strb	r3, [r7, #15]
 8000984:	e004      	b.n	8000990 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	e001      	b.n	8000990 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000990:	7bfb      	ldrb	r3, [r7, #15]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000004 	.word	0x20000004

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x20>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_IncTick+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <HAL_IncTick+0x24>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000008 	.word	0x20000008
 80009cc:	200000f0 	.word	0x200000f0

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	200000f0 	.word	0x200000f0

080009e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f0:	f7ff ffee 	bl	80009d0 <HAL_GetTick>
 80009f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	d005      	beq.n	8000a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_Delay+0x40>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0e:	bf00      	nop
 8000a10:	f7ff ffde 	bl	80009d0 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d8f7      	bhi.n	8000a10 <HAL_Delay+0x28>
  {
  }
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000008 	.word	0x20000008

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db0b      	blt.n	8000aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 021f 	and.w	r2, r3, #31
 8000aa8:	4907      	ldr	r1, [pc, #28]	; (8000ac8 <__NVIC_EnableIRQ+0x38>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	; 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b98:	d301      	bcc.n	8000b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00f      	b.n	8000bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <SysTick_Config+0x40>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f7ff ff8e 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff29 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf4:	f7ff ff3e 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f7ff ff8e 	bl	8000b20 <NVIC_EncodePriority>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff5d 	bl	8000acc <__NVIC_SetPriority>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff31 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffa2 	bl	8000b88 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e098      	b.n	8000d94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <HAL_DMA_Init+0x150>)
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d80f      	bhi.n	8000c8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <HAL_DMA_Init+0x154>)
 8000c76:	4413      	add	r3, r2
 8000c78:	4a4b      	ldr	r2, [pc, #300]	; (8000da8 <HAL_DMA_Init+0x158>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	009a      	lsls	r2, r3, #2
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a48      	ldr	r2, [pc, #288]	; (8000dac <HAL_DMA_Init+0x15c>)
 8000c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c8c:	e00e      	b.n	8000cac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <HAL_DMA_Init+0x160>)
 8000c96:	4413      	add	r3, r2
 8000c98:	4a43      	ldr	r2, [pc, #268]	; (8000da8 <HAL_DMA_Init+0x158>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	009a      	lsls	r2, r3, #2
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a42      	ldr	r2, [pc, #264]	; (8000db4 <HAL_DMA_Init+0x164>)
 8000caa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2202      	movs	r2, #2
 8000cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d06:	d039      	beq.n	8000d7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a27      	ldr	r2, [pc, #156]	; (8000dac <HAL_DMA_Init+0x15c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d11a      	bne.n	8000d48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d12:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <HAL_DMA_Init+0x168>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f003 031c 	and.w	r3, r3, #28
 8000d1e:	210f      	movs	r1, #15
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	4924      	ldr	r1, [pc, #144]	; (8000db8 <HAL_DMA_Init+0x168>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <HAL_DMA_Init+0x168>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6859      	ldr	r1, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d38:	f003 031c 	and.w	r3, r3, #28
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	491d      	ldr	r1, [pc, #116]	; (8000db8 <HAL_DMA_Init+0x168>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
 8000d46:	e019      	b.n	8000d7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_DMA_Init+0x16c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	f003 031c 	and.w	r3, r3, #28
 8000d54:	210f      	movs	r1, #15
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4917      	ldr	r1, [pc, #92]	; (8000dbc <HAL_DMA_Init+0x16c>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_DMA_Init+0x16c>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6859      	ldr	r1, [r3, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f003 031c 	and.w	r3, r3, #28
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	4911      	ldr	r1, [pc, #68]	; (8000dbc <HAL_DMA_Init+0x16c>)
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40020407 	.word	0x40020407
 8000da4:	bffdfff8 	.word	0xbffdfff8
 8000da8:	cccccccd 	.word	0xcccccccd
 8000dac:	40020000 	.word	0x40020000
 8000db0:	bffdfbf8 	.word	0xbffdfbf8
 8000db4:	40020400 	.word	0x40020400
 8000db8:	400200a8 	.word	0x400200a8
 8000dbc:	400204a8 	.word	0x400204a8

08000dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d101      	bne.n	8000de0 <HAL_DMA_Start_IT+0x20>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e04b      	b.n	8000e78 <HAL_DMA_Start_IT+0xb8>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d13a      	bne.n	8000e6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2202      	movs	r2, #2
 8000df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0201 	bic.w	r2, r2, #1
 8000e10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f000 f8e0 	bl	8000fde <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d008      	beq.n	8000e38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f042 020e 	orr.w	r2, r2, #14
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e00f      	b.n	8000e58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0204 	bic.w	r2, r2, #4
 8000e46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 020a 	orr.w	r2, r2, #10
 8000e56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0201 	orr.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e005      	b.n	8000e76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e72:	2302      	movs	r3, #2
 8000e74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9c:	f003 031c 	and.w	r3, r3, #28
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d026      	beq.n	8000efa <HAL_DMA_IRQHandler+0x7a>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d021      	beq.n	8000efa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0320 	and.w	r3, r3, #32
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d107      	bne.n	8000ed4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0204 	bic.w	r2, r2, #4
 8000ed2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed8:	f003 021c 	and.w	r2, r3, #28
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d071      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000ef8:	e06c      	b.n	8000fd4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f003 031c 	and.w	r3, r3, #28
 8000f02:	2202      	movs	r2, #2
 8000f04:	409a      	lsls	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d02e      	beq.n	8000f6c <HAL_DMA_IRQHandler+0xec>
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d029      	beq.n	8000f6c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0320 	and.w	r3, r3, #32
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10b      	bne.n	8000f3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 020a 	bic.w	r2, r2, #10
 8000f34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f003 021c 	and.w	r2, r3, #28
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d038      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f6a:	e033      	b.n	8000fd4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f70:	f003 031c 	and.w	r3, r3, #28
 8000f74:	2208      	movs	r2, #8
 8000f76:	409a      	lsls	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d02a      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0x156>
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d025      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 020e 	bic.w	r2, r2, #14
 8000f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f003 021c 	and.w	r2, r3, #28
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
}
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b085      	sub	sp, #20
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	f003 021c 	and.w	r2, r3, #28
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b10      	cmp	r3, #16
 800100e:	d108      	bne.n	8001022 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001020:	e007      	b.n	8001032 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	60da      	str	r2, [r3, #12]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104e:	e148      	b.n	80012e2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 813a 	beq.w	80012dc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d00b      	beq.n	8001088 <HAL_GPIO_Init+0x48>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d007      	beq.n	8001088 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107c:	2b11      	cmp	r3, #17
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b12      	cmp	r3, #18
 8001086:	d130      	bne.n	80010ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010be:	2201      	movs	r2, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	f003 0201 	and.w	r2, r3, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0xea>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b12      	cmp	r3, #18
 8001128:	d123      	bne.n	8001172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	6939      	ldr	r1, [r7, #16]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8094 	beq.w	80012dc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	4b52      	ldr	r3, [pc, #328]	; (8001300 <HAL_GPIO_Init+0x2c0>)
 80011b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b8:	4a51      	ldr	r2, [pc, #324]	; (8001300 <HAL_GPIO_Init+0x2c0>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6613      	str	r3, [r2, #96]	; 0x60
 80011c0:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <HAL_GPIO_Init+0x2c0>)
 80011c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011cc:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <HAL_GPIO_Init+0x2c4>)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f6:	d00d      	beq.n	8001214 <HAL_GPIO_Init+0x1d4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a43      	ldr	r2, [pc, #268]	; (8001308 <HAL_GPIO_Init+0x2c8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x1d0>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a42      	ldr	r2, [pc, #264]	; (800130c <HAL_GPIO_Init+0x2cc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d101      	bne.n	800120c <HAL_GPIO_Init+0x1cc>
 8001208:	2302      	movs	r3, #2
 800120a:	e004      	b.n	8001216 <HAL_GPIO_Init+0x1d6>
 800120c:	2307      	movs	r3, #7
 800120e:	e002      	b.n	8001216 <HAL_GPIO_Init+0x1d6>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <HAL_GPIO_Init+0x1d6>
 8001214:	2300      	movs	r3, #0
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	f002 0203 	and.w	r2, r2, #3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4093      	lsls	r3, r2
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001226:	4937      	ldr	r1, [pc, #220]	; (8001304 <HAL_GPIO_Init+0x2c4>)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001234:	4b36      	ldr	r3, [pc, #216]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001258:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800125e:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001282:	4a23      	ldr	r2, [pc, #140]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ac:	4a18      	ldr	r2, [pc, #96]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f47f aeaf 	bne.w	8001050 <HAL_GPIO_Init+0x10>
  }
}
 80012f2:	bf00      	nop
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000
 8001308:	48000400 	.word	0x48000400
 800130c:	48000800 	.word	0x48000800
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <HAL_PWREx_GetVoltageRange+0x18>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40007000 	.word	0x40007000

08001330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800133e:	d130      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800134c:	d038      	beq.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2232      	movs	r2, #50	; 0x32
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0c9b      	lsrs	r3, r3, #18
 8001370:	3301      	adds	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001374:	e002      	b.n	800137c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3b01      	subs	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001388:	d102      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x60>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f2      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139c:	d110      	bne.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e00f      	b.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ae:	d007      	beq.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013b8:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40007000 	.word	0x40007000
 80013d4:	20000000 	.word	0x20000000
 80013d8:	431bde83 	.word	0x431bde83

080013dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f000 bc11 	b.w	8001c12 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f0:	4ba0      	ldr	r3, [pc, #640]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fa:	4b9e      	ldr	r3, [pc, #632]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80e4 	beq.w	80015da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d007      	beq.n	8001428 <HAL_RCC_OscConfig+0x4c>
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b0c      	cmp	r3, #12
 800141c:	f040 808b 	bne.w	8001536 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b01      	cmp	r3, #1
 8001424:	f040 8087 	bne.w	8001536 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001428:	4b92      	ldr	r3, [pc, #584]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_OscConfig+0x64>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e3e8      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1a      	ldr	r2, [r3, #32]
 8001444:	4b8b      	ldr	r3, [pc, #556]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d004      	beq.n	800145a <HAL_RCC_OscConfig+0x7e>
 8001450:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001458:	e005      	b.n	8001466 <HAL_RCC_OscConfig+0x8a>
 800145a:	4b86      	ldr	r3, [pc, #536]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800145c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001466:	4293      	cmp	r3, r2
 8001468:	d223      	bcs.n	80014b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fd78 	bl	8001f64 <RCC_SetFlashLatencyFromMSIRange>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e3c9      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147e:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a7c      	ldr	r2, [pc, #496]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b7a      	ldr	r3, [pc, #488]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4977      	ldr	r1, [pc, #476]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149c:	4b75      	ldr	r3, [pc, #468]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	4972      	ldr	r1, [pc, #456]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
 80014b0:	e025      	b.n	80014fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6f      	ldr	r2, [pc, #444]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	496a      	ldr	r1, [pc, #424]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d0:	4b68      	ldr	r3, [pc, #416]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	4965      	ldr	r1, [pc, #404]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d109      	bne.n	80014fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fd38 	bl	8001f64 <RCC_SetFlashLatencyFromMSIRange>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e389      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014fe:	f000 fc6f 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001502:	4601      	mov	r1, r0
 8001504:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	4a5a      	ldr	r2, [pc, #360]	; (8001678 <HAL_RCC_OscConfig+0x29c>)
 8001510:	5cd3      	ldrb	r3, [r2, r3]
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	fa21 f303 	lsr.w	r3, r1, r3
 800151a:	4a58      	ldr	r2, [pc, #352]	; (800167c <HAL_RCC_OscConfig+0x2a0>)
 800151c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800151e:	4b58      	ldr	r3, [pc, #352]	; (8001680 <HAL_RCC_OscConfig+0x2a4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fa04 	bl	8000930 <HAL_InitTick>
 8001528:	4603      	mov	r3, r0
 800152a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d052      	beq.n	80015d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	e36d      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d032      	beq.n	80015a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800153e:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800154a:	f7ff fa41 	bl	80009d0 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001552:	f7ff fa3d 	bl	80009d0 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e356      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001564:	4b43      	ldr	r3, [pc, #268]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001570:	4b40      	ldr	r3, [pc, #256]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a3f      	ldr	r2, [pc, #252]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	493a      	ldr	r1, [pc, #232]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158e:	4b39      	ldr	r3, [pc, #228]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	4935      	ldr	r1, [pc, #212]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
 80015a2:	e01a      	b.n	80015da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a32      	ldr	r2, [pc, #200]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fa0e 	bl	80009d0 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b8:	f7ff fa0a 	bl	80009d0 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e323      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1dc>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d073      	beq.n	80016ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x21c>
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d10e      	bne.n	8001610 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d10b      	bne.n	8001610 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d063      	beq.n	80016cc <HAL_RCC_OscConfig+0x2f0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d15f      	bne.n	80016cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e300      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d106      	bne.n	8001628 <HAL_RCC_OscConfig+0x24c>
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0x288>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x270>
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x288>
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01b      	beq.n	80016a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff f9b0 	bl	80009d0 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001672:	e010      	b.n	8001696 <HAL_RCC_OscConfig+0x2ba>
 8001674:	40021000 	.word	0x40021000
 8001678:	08003084 	.word	0x08003084
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff f9a4 	bl	80009d0 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e2bd      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001696:	4baf      	ldr	r3, [pc, #700]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x2a8>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff f994 	bl	80009d0 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff f990 	bl	80009d0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e2a9      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016be:	4ba5      	ldr	r3, [pc, #660]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x2d0>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d060      	beq.n	800179c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d005      	beq.n	80016ec <HAL_RCC_OscConfig+0x310>
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d119      	bne.n	800171a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d116      	bne.n	800171a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ec:	4b99      	ldr	r3, [pc, #612]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_OscConfig+0x328>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e286      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b93      	ldr	r3, [pc, #588]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	4990      	ldr	r1, [pc, #576]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001718:	e040      	b.n	800179c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d023      	beq.n	800176a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001722:	4b8c      	ldr	r3, [pc, #560]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a8b      	ldr	r2, [pc, #556]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff f94f 	bl	80009d0 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff f94b 	bl	80009d0 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e264      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001748:	4b82      	ldr	r3, [pc, #520]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b7f      	ldr	r3, [pc, #508]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	497c      	ldr	r1, [pc, #496]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
 8001768:	e018      	b.n	800179c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b7a      	ldr	r3, [pc, #488]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a79      	ldr	r2, [pc, #484]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff f92b 	bl	80009d0 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff f927 	bl	80009d0 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e240      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001790:	4b70      	ldr	r3, [pc, #448]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d03c      	beq.n	8001822 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01c      	beq.n	80017ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	4a67      	ldr	r2, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff f906 	bl	80009d0 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff f902 	bl	80009d0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e21b      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017da:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80017dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ef      	beq.n	80017c8 <HAL_RCC_OscConfig+0x3ec>
 80017e8:	e01b      	b.n	8001822 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ea:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff f8e9 	bl	80009d0 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff f8e5 	bl	80009d0 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1fe      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001814:	4b4f      	ldr	r3, [pc, #316]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ef      	bne.n	8001802 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80a6 	beq.w	800197c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001834:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10d      	bne.n	800185c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	4b44      	ldr	r3, [pc, #272]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	4a43      	ldr	r2, [pc, #268]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184a:	6593      	str	r3, [r2, #88]	; 0x58
 800184c:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001858:	2301      	movs	r3, #1
 800185a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185c:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <HAL_RCC_OscConfig+0x57c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d118      	bne.n	800189a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001868:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_RCC_OscConfig+0x57c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a3a      	ldr	r2, [pc, #232]	; (8001958 <HAL_RCC_OscConfig+0x57c>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001874:	f7ff f8ac 	bl	80009d0 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187c:	f7ff f8a8 	bl	80009d0 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1c1      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188e:	4b32      	ldr	r3, [pc, #200]	; (8001958 <HAL_RCC_OscConfig+0x57c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d108      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4d8>
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a8:	4a2a      	ldr	r2, [pc, #168]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b2:	e024      	b.n	80018fe <HAL_RCC_OscConfig+0x522>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d110      	bne.n	80018de <HAL_RCC_OscConfig+0x502>
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c2:	4a24      	ldr	r2, [pc, #144]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	4a20      	ldr	r2, [pc, #128]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018dc:	e00f      	b.n	80018fe <HAL_RCC_OscConfig+0x522>
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80018e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80018f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f4:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f023 0304 	bic.w	r3, r3, #4
 80018fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d016      	beq.n	8001934 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff f863 	bl	80009d0 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff f85f 	bl	80009d0 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e176      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_OscConfig+0x578>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ed      	beq.n	800190e <HAL_RCC_OscConfig+0x532>
 8001932:	e01a      	b.n	800196a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff f84c 	bl	80009d0 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800193a:	e00f      	b.n	800195c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7ff f848 	bl	80009d0 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d906      	bls.n	800195c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e15f      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195c:	4baa      	ldr	r3, [pc, #680]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e8      	bne.n	800193c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800196a:	7ffb      	ldrb	r3, [r7, #31]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4ba5      	ldr	r3, [pc, #660]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	4aa4      	ldr	r2, [pc, #656]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01c      	beq.n	80019ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001990:	4b9d      	ldr	r3, [pc, #628]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001996:	4a9c      	ldr	r2, [pc, #624]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff f816 	bl	80009d0 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a8:	f7ff f812 	bl	80009d0 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e12b      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ba:	4b93      	ldr	r3, [pc, #588]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 80019bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ef      	beq.n	80019a8 <HAL_RCC_OscConfig+0x5cc>
 80019c8:	e01b      	b.n	8001a02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ca:	4b8f      	ldr	r3, [pc, #572]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 80019cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d0:	4a8d      	ldr	r2, [pc, #564]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7fe fff9 	bl	80009d0 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e2:	f7fe fff5 	bl	80009d0 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e10e      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f4:	4b84      	ldr	r3, [pc, #528]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 80019f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8102 	beq.w	8001c10 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	f040 80c5 	bne.w	8001ba0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a16:	4b7c      	ldr	r3, [pc, #496]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0203 	and.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d12c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	3b01      	subs	r3, #1
 8001a36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d123      	bne.n	8001a84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d11b      	bne.n	8001a84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d113      	bne.n	8001a84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a66:	085b      	lsrs	r3, r3, #1
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d109      	bne.n	8001a84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d067      	beq.n	8001b54 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d062      	beq.n	8001b50 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e0bb      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aa6:	f7fe ff93 	bl	80009d0 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7fe ff8f 	bl	80009d0 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e0a8      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac0:	4b51      	ldr	r3, [pc, #324]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f0      	bne.n	8001aae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001acc:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b4e      	ldr	r3, [pc, #312]	; (8001c0c <HAL_RCC_OscConfig+0x830>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001adc:	3a01      	subs	r2, #1
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	4311      	orrs	r1, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ae6:	0212      	lsls	r2, r2, #8
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001aee:	0852      	lsrs	r2, r2, #1
 8001af0:	3a01      	subs	r2, #1
 8001af2:	0552      	lsls	r2, r2, #21
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001afa:	0852      	lsrs	r2, r2, #1
 8001afc:	3a01      	subs	r2, #1
 8001afe:	0652      	lsls	r2, r2, #25
 8001b00:	4311      	orrs	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b06:	06d2      	lsls	r2, r2, #27
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	493f      	ldr	r1, [pc, #252]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b10:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a3c      	ldr	r2, [pc, #240]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b1c:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a39      	ldr	r2, [pc, #228]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b28:	f7fe ff52 	bl	80009d0 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7fe ff4e 	bl	80009d0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e067      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b4e:	e05f      	b.n	8001c10 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e05e      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d157      	bne.n	8001c10 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b6c:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b78:	f7fe ff2a 	bl	80009d0 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b80:	f7fe ff26 	bl	80009d0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e03f      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x7a4>
 8001b9e:	e037      	b.n	8001c10 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d02d      	beq.n	8001c02 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bb0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001bc4:	f023 0303 	bic.w	r3, r3, #3
 8001bc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001bd0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7fe fef9 	bl	80009d0 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be2:	f7fe fef5 	bl	80009d0 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e00e      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_RCC_OscConfig+0x82c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x806>
 8001c00:	e006      	b.n	8001c10 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e005      	b.n	8001c12 <HAL_RCC_OscConfig+0x836>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop

08001c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0c8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c30:	4b66      	ldr	r3, [pc, #408]	; (8001dcc <HAL_RCC_ClockConfig+0x1b0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d910      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_ClockConfig+0x1b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 0207 	bic.w	r2, r3, #7
 8001c46:	4961      	ldr	r1, [pc, #388]	; (8001dcc <HAL_RCC_ClockConfig+0x1b0>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	; (8001dcc <HAL_RCC_ClockConfig+0x1b0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0b0      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d04c      	beq.n	8001d06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c74:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d121      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e09e      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d115      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e092      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e086      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e07e      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc4:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f023 0203 	bic.w	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	493f      	ldr	r1, [pc, #252]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd6:	f7fe fe7b 	bl	80009d0 <HAL_GetTick>
 8001cda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cde:	f7fe fe77 	bl	80009d0 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e066      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 020c 	and.w	r2, r3, #12
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d1eb      	bne.n	8001cde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	492c      	ldr	r1, [pc, #176]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_ClockConfig+0x1b0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d210      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_RCC_ClockConfig+0x1b0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	4924      	ldr	r1, [pc, #144]	; (8001dcc <HAL_RCC_ClockConfig+0x1b0>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_RCC_ClockConfig+0x1b0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e036      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4918      	ldr	r1, [pc, #96]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4910      	ldr	r1, [pc, #64]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d92:	f000 f825 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d96:	4601      	mov	r1, r0
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	fa21 f303 	lsr.w	r3, r1, r3
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fdba 	bl	8000930 <HAL_InitTick>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	08003084 	.word	0x08003084
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000004 	.word	0x20000004

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df8:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x34>
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d121      	bne.n	8001e52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d11e      	bne.n	8001e52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e14:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e005      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10d      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	e004      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d133      	bne.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d002      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0xaa>
 8001e82:	e005      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e86:	617b      	str	r3, [r7, #20]
      break;
 8001e88:	e005      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e8c:	617b      	str	r3, [r7, #20]
      break;
 8001e8e:	e002      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	617b      	str	r3, [r7, #20]
      break;
 8001e94:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	fb02 f203 	mul.w	r2, r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0e5b      	lsrs	r3, r3, #25
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3724      	adds	r7, #36	; 0x24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	0800309c 	.word	0x0800309c
 8001eec:	00f42400 	.word	0x00f42400
 8001ef0:	007a1200 	.word	0x007a1200

08001ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000000 	.word	0x20000000

08001f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f10:	f7ff fff0 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f14:	4601      	mov	r1, r0
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08003094 	.word	0x08003094

08001f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f3c:	f7ff ffda 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f40:	4601      	mov	r1, r0
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0adb      	lsrs	r3, r3, #11
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08003094 	.word	0x08003094

08001f64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f7c:	f7ff f9ca 	bl	8001314 <HAL_PWREx_GetVoltageRange>
 8001f80:	6178      	str	r0, [r7, #20]
 8001f82:	e014      	b.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	4a24      	ldr	r2, [pc, #144]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f9c:	f7ff f9ba 	bl	8001314 <HAL_PWREx_GetVoltageRange>
 8001fa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4a1d      	ldr	r2, [pc, #116]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb4:	d10b      	bne.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b80      	cmp	r3, #128	; 0x80
 8001fba:	d919      	bls.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2ba0      	cmp	r3, #160	; 0xa0
 8001fc0:	d902      	bls.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	e013      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc8:	2301      	movs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e010      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b80      	cmp	r3, #128	; 0x80
 8001fd2:	d902      	bls.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e00a      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b80      	cmp	r3, #128	; 0x80
 8001fde:	d102      	bne.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	e004      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b70      	cmp	r3, #112	; 0x70
 8001fea:	d101      	bne.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fec:	2301      	movs	r3, #1
 8001fee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 0207 	bic.w	r2, r3, #7
 8001ff8:	4909      	ldr	r1, [pc, #36]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	40022000 	.word	0x40022000

08002024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800202c:	2300      	movs	r3, #0
 800202e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002030:	2300      	movs	r3, #0
 8002032:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203c:	2b00      	cmp	r3, #0
 800203e:	d02f      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002048:	d005      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800204a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800204e:	d015      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002054:	e00f      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002056:	4bac      	ldr	r3, [pc, #688]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	4aab      	ldr	r2, [pc, #684]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002062:	e00c      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f9cc 	bl	8002408 <RCCEx_PLLSAI1_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002074:	e003      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	74fb      	strb	r3, [r7, #19]
      break;
 800207a:	e000      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800207c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800207e:	7cfb      	ldrb	r3, [r7, #19]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10b      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002084:	4ba0      	ldr	r3, [pc, #640]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	499d      	ldr	r1, [pc, #628]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800209a:	e001      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8099 	beq.w	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020b2:	4b95      	ldr	r3, [pc, #596]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00d      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	4b8f      	ldr	r3, [pc, #572]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	4a8e      	ldr	r2, [pc, #568]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	; 0x58
 80020d4:	4b8c      	ldr	r3, [pc, #560]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e4:	4b89      	ldr	r3, [pc, #548]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a88      	ldr	r2, [pc, #544]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020f0:	f7fe fc6e 	bl	80009d0 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f6:	e009      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f8:	f7fe fc6a 	bl	80009d0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d902      	bls.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	74fb      	strb	r3, [r7, #19]
        break;
 800210a:	e005      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800210c:	4b7f      	ldr	r3, [pc, #508]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ef      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d155      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800211e:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002128:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01e      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	429a      	cmp	r2, r3
 8002138:	d019      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800213a:	4b73      	ldr	r3, [pc, #460]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002144:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002146:	4b70      	ldr	r3, [pc, #448]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	4a6e      	ldr	r2, [pc, #440]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002156:	4b6c      	ldr	r3, [pc, #432]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	4a6a      	ldr	r2, [pc, #424]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800215e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002166:	4a68      	ldr	r2, [pc, #416]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d016      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe fc2a 	bl	80009d0 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217e:	e00b      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7fe fc26 	bl	80009d0 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d902      	bls.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	74fb      	strb	r3, [r7, #19]
            break;
 8002196:	e006      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002198:	4b5b      	ldr	r3, [pc, #364]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ec      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80021a6:	7cfb      	ldrb	r3, [r7, #19]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ac:	4b56      	ldr	r3, [pc, #344]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ba:	4953      	ldr	r1, [pc, #332]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021c2:	e004      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	74bb      	strb	r3, [r7, #18]
 80021c8:	e001      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ce:	7c7b      	ldrb	r3, [r7, #17]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d4:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4943      	ldr	r1, [pc, #268]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800220e:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f023 020c 	bic.w	r2, r3, #12
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	493a      	ldr	r1, [pc, #232]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002230:	4b35      	ldr	r3, [pc, #212]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	4932      	ldr	r1, [pc, #200]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002260:	4929      	ldr	r1, [pc, #164]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	4921      	ldr	r1, [pc, #132]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	4918      	ldr	r1, [pc, #96]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4910      	ldr	r1, [pc, #64]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d02c      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f8:	d10a      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fa:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4a02      	ldr	r2, [pc, #8]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002304:	60d3      	str	r3, [r2, #12]
 8002306:	e015      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002308:	40021000 	.word	0x40021000
 800230c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002318:	d10c      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	2101      	movs	r1, #1
 8002320:	4618      	mov	r0, r3
 8002322:	f000 f871 	bl	8002408 <RCCEx_PLLSAI1_Config>
 8002326:	4603      	mov	r3, r0
 8002328:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d028      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	492d      	ldr	r1, [pc, #180]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235e:	d106      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a27      	ldr	r2, [pc, #156]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800236a:	60d3      	str	r3, [r2, #12]
 800236c:	e011      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002376:	d10c      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f842 	bl	8002408 <RCCEx_PLLSAI1_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01c      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ac:	4915      	ldr	r1, [pc, #84]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2102      	movs	r1, #2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f81f 	bl	8002408 <RCCEx_PLLSAI1_Config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ce:	7cfb      	ldrb	r3, [r7, #19]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	4904      	ldr	r1, [pc, #16]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002416:	4b73      	ldr	r3, [pc, #460]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d018      	beq.n	8002454 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002422:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0203 	and.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d10d      	bne.n	800244e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
       ||
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800243a:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
       ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d044      	beq.n	80024d8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	e041      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d00c      	beq.n	8002476 <RCCEx_PLLSAI1_Config+0x6e>
 800245c:	2b03      	cmp	r3, #3
 800245e:	d013      	beq.n	8002488 <RCCEx_PLLSAI1_Config+0x80>
 8002460:	2b01      	cmp	r3, #1
 8002462:	d120      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002464:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d11d      	bne.n	80024ac <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002474:	e01a      	b.n	80024ac <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002476:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	2b00      	cmp	r3, #0
 8002480:	d116      	bne.n	80024b0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002486:	e013      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002488:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10f      	bne.n	80024b4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002494:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024a4:	e006      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
      break;
 80024aa:	e004      	b.n	80024b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024ac:	bf00      	nop
 80024ae:	e002      	b.n	80024b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024b0:	bf00      	nop
 80024b2:	e000      	b.n	80024b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024b4:	bf00      	nop
    }

    if(status == HAL_OK)
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10d      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024bc:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6819      	ldr	r1, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	430b      	orrs	r3, r1
 80024d2:	4944      	ldr	r1, [pc, #272]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d17c      	bne.n	80025d8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024de:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a40      	ldr	r2, [pc, #256]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ea:	f7fe fa71 	bl	80009d0 <HAL_GetTick>
 80024ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024f0:	e009      	b.n	8002506 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024f2:	f7fe fa6d 	bl	80009d0 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d902      	bls.n	8002506 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	73fb      	strb	r3, [r7, #15]
        break;
 8002504:	e005      	b.n	8002512 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002506:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ef      	bne.n	80024f2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d15f      	bne.n	80025d8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d110      	bne.n	8002540 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002526:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6892      	ldr	r2, [r2, #8]
 800252e:	0211      	lsls	r1, r2, #8
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68d2      	ldr	r2, [r2, #12]
 8002534:	06d2      	lsls	r2, r2, #27
 8002536:	430a      	orrs	r2, r1
 8002538:	492a      	ldr	r1, [pc, #168]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	610b      	str	r3, [r1, #16]
 800253e:	e027      	b.n	8002590 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d112      	bne.n	800256c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800254e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6892      	ldr	r2, [r2, #8]
 8002556:	0211      	lsls	r1, r2, #8
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6912      	ldr	r2, [r2, #16]
 800255c:	0852      	lsrs	r2, r2, #1
 800255e:	3a01      	subs	r2, #1
 8002560:	0552      	lsls	r2, r2, #21
 8002562:	430a      	orrs	r2, r1
 8002564:	491f      	ldr	r1, [pc, #124]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	610b      	str	r3, [r1, #16]
 800256a:	e011      	b.n	8002590 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	0211      	lsls	r1, r2, #8
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6952      	ldr	r2, [r2, #20]
 8002582:	0852      	lsrs	r2, r2, #1
 8002584:	3a01      	subs	r2, #1
 8002586:	0652      	lsls	r2, r2, #25
 8002588:	430a      	orrs	r2, r1
 800258a:	4916      	ldr	r1, [pc, #88]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800258c:	4313      	orrs	r3, r2
 800258e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800259a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe fa18 	bl	80009d0 <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025a2:	e009      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a4:	f7fe fa14 	bl	80009d0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	73fb      	strb	r3, [r7, #15]
          break;
 80025b6:	e005      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	4904      	ldr	r1, [pc, #16]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e040      	b.n	800267c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe f874 	bl	80006f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2224      	movs	r2, #36	; 0x24
 8002614:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8c6 	bl	80027b8 <UART_SetConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e022      	b.n	800267c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 faca 	bl	8002bd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fb51 	bl	8002d1c <UART_CheckIdleState>
 800267a:	4603      	mov	r3, r0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002696:	2b20      	cmp	r3, #32
 8002698:	d164      	bne.n	8002764 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_UART_Transmit_DMA+0x22>
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e05d      	b.n	8002766 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_UART_Transmit_DMA+0x34>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e056      	b.n	8002766 <HAL_UART_Transmit_DMA+0xe2>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	88fa      	ldrh	r2, [r7, #6]
 80026d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2221      	movs	r2, #33	; 0x21
 80026e0:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d02a      	beq.n	8002740 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <HAL_UART_Transmit_DMA+0xec>)
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f6:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <HAL_UART_Transmit_DMA+0xf0>)
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026fe:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_UART_Transmit_DMA+0xf4>)
 8002700:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002706:	2200      	movs	r2, #0
 8002708:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	4619      	mov	r1, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3328      	adds	r3, #40	; 0x28
 800271a:	461a      	mov	r2, r3
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	f7fe fb4f 	bl	8000dc0 <HAL_DMA_Start_IT>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2210      	movs	r2, #16
 800272c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e012      	b.n	8002766 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800275e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	08002f07 	.word	0x08002f07
 8002774:	08002f5b 	.word	0x08002f5b
 8002778:	08002f77 	.word	0x08002f77

0800277c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80027bc:	b088      	sub	sp, #32
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4bb0      	ldr	r3, [pc, #704]	; (8002aa8 <UART_SetConfig+0x2f0>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	69f9      	ldr	r1, [r7, #28]
 80027ee:	430b      	orrs	r3, r1
 80027f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4aa6      	ldr	r2, [pc, #664]	; (8002aac <UART_SetConfig+0x2f4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	4313      	orrs	r3, r2
 8002820:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a9d      	ldr	r2, [pc, #628]	; (8002ab0 <UART_SetConfig+0x2f8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d121      	bne.n	8002884 <UART_SetConfig+0xcc>
 8002840:	4b9c      	ldr	r3, [pc, #624]	; (8002ab4 <UART_SetConfig+0x2fc>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b03      	cmp	r3, #3
 800284c:	d816      	bhi.n	800287c <UART_SetConfig+0xc4>
 800284e:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <UART_SetConfig+0x9c>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	08002865 	.word	0x08002865
 8002858:	08002871 	.word	0x08002871
 800285c:	0800286b 	.word	0x0800286b
 8002860:	08002877 	.word	0x08002877
 8002864:	2301      	movs	r3, #1
 8002866:	76fb      	strb	r3, [r7, #27]
 8002868:	e072      	b.n	8002950 <UART_SetConfig+0x198>
 800286a:	2302      	movs	r3, #2
 800286c:	76fb      	strb	r3, [r7, #27]
 800286e:	e06f      	b.n	8002950 <UART_SetConfig+0x198>
 8002870:	2304      	movs	r3, #4
 8002872:	76fb      	strb	r3, [r7, #27]
 8002874:	e06c      	b.n	8002950 <UART_SetConfig+0x198>
 8002876:	2308      	movs	r3, #8
 8002878:	76fb      	strb	r3, [r7, #27]
 800287a:	e069      	b.n	8002950 <UART_SetConfig+0x198>
 800287c:	2310      	movs	r3, #16
 800287e:	76fb      	strb	r3, [r7, #27]
 8002880:	bf00      	nop
 8002882:	e065      	b.n	8002950 <UART_SetConfig+0x198>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a8b      	ldr	r2, [pc, #556]	; (8002ab8 <UART_SetConfig+0x300>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d134      	bne.n	80028f8 <UART_SetConfig+0x140>
 800288e:	4b89      	ldr	r3, [pc, #548]	; (8002ab4 <UART_SetConfig+0x2fc>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b0c      	cmp	r3, #12
 800289a:	d829      	bhi.n	80028f0 <UART_SetConfig+0x138>
 800289c:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <UART_SetConfig+0xec>)
 800289e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a2:	bf00      	nop
 80028a4:	080028d9 	.word	0x080028d9
 80028a8:	080028f1 	.word	0x080028f1
 80028ac:	080028f1 	.word	0x080028f1
 80028b0:	080028f1 	.word	0x080028f1
 80028b4:	080028e5 	.word	0x080028e5
 80028b8:	080028f1 	.word	0x080028f1
 80028bc:	080028f1 	.word	0x080028f1
 80028c0:	080028f1 	.word	0x080028f1
 80028c4:	080028df 	.word	0x080028df
 80028c8:	080028f1 	.word	0x080028f1
 80028cc:	080028f1 	.word	0x080028f1
 80028d0:	080028f1 	.word	0x080028f1
 80028d4:	080028eb 	.word	0x080028eb
 80028d8:	2300      	movs	r3, #0
 80028da:	76fb      	strb	r3, [r7, #27]
 80028dc:	e038      	b.n	8002950 <UART_SetConfig+0x198>
 80028de:	2302      	movs	r3, #2
 80028e0:	76fb      	strb	r3, [r7, #27]
 80028e2:	e035      	b.n	8002950 <UART_SetConfig+0x198>
 80028e4:	2304      	movs	r3, #4
 80028e6:	76fb      	strb	r3, [r7, #27]
 80028e8:	e032      	b.n	8002950 <UART_SetConfig+0x198>
 80028ea:	2308      	movs	r3, #8
 80028ec:	76fb      	strb	r3, [r7, #27]
 80028ee:	e02f      	b.n	8002950 <UART_SetConfig+0x198>
 80028f0:	2310      	movs	r3, #16
 80028f2:	76fb      	strb	r3, [r7, #27]
 80028f4:	bf00      	nop
 80028f6:	e02b      	b.n	8002950 <UART_SetConfig+0x198>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6b      	ldr	r2, [pc, #428]	; (8002aac <UART_SetConfig+0x2f4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d124      	bne.n	800294c <UART_SetConfig+0x194>
 8002902:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <UART_SetConfig+0x2fc>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800290c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002910:	d012      	beq.n	8002938 <UART_SetConfig+0x180>
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d802      	bhi.n	800291e <UART_SetConfig+0x166>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <UART_SetConfig+0x174>
 800291c:	e012      	b.n	8002944 <UART_SetConfig+0x18c>
 800291e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002922:	d006      	beq.n	8002932 <UART_SetConfig+0x17a>
 8002924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002928:	d009      	beq.n	800293e <UART_SetConfig+0x186>
 800292a:	e00b      	b.n	8002944 <UART_SetConfig+0x18c>
 800292c:	2300      	movs	r3, #0
 800292e:	76fb      	strb	r3, [r7, #27]
 8002930:	e00e      	b.n	8002950 <UART_SetConfig+0x198>
 8002932:	2302      	movs	r3, #2
 8002934:	76fb      	strb	r3, [r7, #27]
 8002936:	e00b      	b.n	8002950 <UART_SetConfig+0x198>
 8002938:	2304      	movs	r3, #4
 800293a:	76fb      	strb	r3, [r7, #27]
 800293c:	e008      	b.n	8002950 <UART_SetConfig+0x198>
 800293e:	2308      	movs	r3, #8
 8002940:	76fb      	strb	r3, [r7, #27]
 8002942:	e005      	b.n	8002950 <UART_SetConfig+0x198>
 8002944:	2310      	movs	r3, #16
 8002946:	76fb      	strb	r3, [r7, #27]
 8002948:	bf00      	nop
 800294a:	e001      	b.n	8002950 <UART_SetConfig+0x198>
 800294c:	2310      	movs	r3, #16
 800294e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a55      	ldr	r2, [pc, #340]	; (8002aac <UART_SetConfig+0x2f4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d174      	bne.n	8002a44 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800295a:	7efb      	ldrb	r3, [r7, #27]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d824      	bhi.n	80029aa <UART_SetConfig+0x1f2>
 8002960:	a201      	add	r2, pc, #4	; (adr r2, 8002968 <UART_SetConfig+0x1b0>)
 8002962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002966:	bf00      	nop
 8002968:	0800298d 	.word	0x0800298d
 800296c:	080029ab 	.word	0x080029ab
 8002970:	08002995 	.word	0x08002995
 8002974:	080029ab 	.word	0x080029ab
 8002978:	0800299b 	.word	0x0800299b
 800297c:	080029ab 	.word	0x080029ab
 8002980:	080029ab 	.word	0x080029ab
 8002984:	080029ab 	.word	0x080029ab
 8002988:	080029a3 	.word	0x080029a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800298c:	f7ff fabe 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 8002990:	6178      	str	r0, [r7, #20]
        break;
 8002992:	e00f      	b.n	80029b4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002994:	4b49      	ldr	r3, [pc, #292]	; (8002abc <UART_SetConfig+0x304>)
 8002996:	617b      	str	r3, [r7, #20]
        break;
 8002998:	e00c      	b.n	80029b4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800299a:	f7ff fa21 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800299e:	6178      	str	r0, [r7, #20]
        break;
 80029a0:	e008      	b.n	80029b4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a6:	617b      	str	r3, [r7, #20]
        break;
 80029a8:	e004      	b.n	80029b4 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	76bb      	strb	r3, [r7, #26]
        break;
 80029b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8100 	beq.w	8002bbc <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d305      	bcc.n	80029d8 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d902      	bls.n	80029de <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	76bb      	strb	r3, [r7, #26]
 80029dc:	e0ee      	b.n	8002bbc <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	4619      	mov	r1, r3
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	f04f 0400 	mov.w	r4, #0
 80029ee:	0214      	lsls	r4, r2, #8
 80029f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80029f4:	020b      	lsls	r3, r1, #8
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6852      	ldr	r2, [r2, #4]
 80029fa:	0852      	lsrs	r2, r2, #1
 80029fc:	4611      	mov	r1, r2
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	eb13 0b01 	adds.w	fp, r3, r1
 8002a06:	eb44 0c02 	adc.w	ip, r4, r2
 8002a0a:	4658      	mov	r0, fp
 8002a0c:	4661      	mov	r1, ip
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f04f 0400 	mov.w	r4, #0
 8002a16:	461a      	mov	r2, r3
 8002a18:	4623      	mov	r3, r4
 8002a1a:	f7fd fbd7 	bl	80001cc <__aeabi_uldivmod>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460c      	mov	r4, r1
 8002a22:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a2a:	d308      	bcc.n	8002a3e <UART_SetConfig+0x286>
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a32:	d204      	bcs.n	8002a3e <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	e0be      	b.n	8002bbc <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	76bb      	strb	r3, [r7, #26]
 8002a42:	e0bb      	b.n	8002bbc <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4c:	d169      	bne.n	8002b22 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8002a4e:	7efb      	ldrb	r3, [r7, #27]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d835      	bhi.n	8002ac0 <UART_SetConfig+0x308>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <UART_SetConfig+0x2a4>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a81 	.word	0x08002a81
 8002a60:	08002a89 	.word	0x08002a89
 8002a64:	08002a91 	.word	0x08002a91
 8002a68:	08002ac1 	.word	0x08002ac1
 8002a6c:	08002a97 	.word	0x08002a97
 8002a70:	08002ac1 	.word	0x08002ac1
 8002a74:	08002ac1 	.word	0x08002ac1
 8002a78:	08002ac1 	.word	0x08002ac1
 8002a7c:	08002a9f 	.word	0x08002a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a80:	f7ff fa44 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 8002a84:	6178      	str	r0, [r7, #20]
        break;
 8002a86:	e020      	b.n	8002aca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a88:	f7ff fa56 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
 8002a8c:	6178      	str	r0, [r7, #20]
        break;
 8002a8e:	e01c      	b.n	8002aca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <UART_SetConfig+0x304>)
 8002a92:	617b      	str	r3, [r7, #20]
        break;
 8002a94:	e019      	b.n	8002aca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a96:	f7ff f9a3 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8002a9a:	6178      	str	r0, [r7, #20]
        break;
 8002a9c:	e015      	b.n	8002aca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aa2:	617b      	str	r3, [r7, #20]
        break;
 8002aa4:	e011      	b.n	8002aca <UART_SetConfig+0x312>
 8002aa6:	bf00      	nop
 8002aa8:	efff69f3 	.word	0xefff69f3
 8002aac:	40008000 	.word	0x40008000
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40004400 	.word	0x40004400
 8002abc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	76bb      	strb	r3, [r7, #26]
        break;
 8002ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d075      	beq.n	8002bbc <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	005a      	lsls	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	441a      	add	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d916      	bls.n	8002b1c <UART_SetConfig+0x364>
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af4:	d212      	bcs.n	8002b1c <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f023 030f 	bic.w	r3, r3, #15
 8002afe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	89fb      	ldrh	r3, [r7, #14]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	89fa      	ldrh	r2, [r7, #14]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	e04f      	b.n	8002bbc <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	76bb      	strb	r3, [r7, #26]
 8002b20:	e04c      	b.n	8002bbc <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b22:	7efb      	ldrb	r3, [r7, #27]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d828      	bhi.n	8002b7a <UART_SetConfig+0x3c2>
 8002b28:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <UART_SetConfig+0x378>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b55 	.word	0x08002b55
 8002b34:	08002b5d 	.word	0x08002b5d
 8002b38:	08002b65 	.word	0x08002b65
 8002b3c:	08002b7b 	.word	0x08002b7b
 8002b40:	08002b6b 	.word	0x08002b6b
 8002b44:	08002b7b 	.word	0x08002b7b
 8002b48:	08002b7b 	.word	0x08002b7b
 8002b4c:	08002b7b 	.word	0x08002b7b
 8002b50:	08002b73 	.word	0x08002b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b54:	f7ff f9da 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 8002b58:	6178      	str	r0, [r7, #20]
        break;
 8002b5a:	e013      	b.n	8002b84 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b5c:	f7ff f9ec 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
 8002b60:	6178      	str	r0, [r7, #20]
        break;
 8002b62:	e00f      	b.n	8002b84 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <UART_SetConfig+0x41c>)
 8002b66:	617b      	str	r3, [r7, #20]
        break;
 8002b68:	e00c      	b.n	8002b84 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6a:	f7ff f939 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8002b6e:	6178      	str	r0, [r7, #20]
        break;
 8002b70:	e008      	b.n	8002b84 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b76:	617b      	str	r3, [r7, #20]
        break;
 8002b78:	e004      	b.n	8002b84 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	76bb      	strb	r3, [r7, #26]
        break;
 8002b82:	bf00      	nop
    }

    if (pclk != 0U)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d018      	beq.n	8002bbc <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	085a      	lsrs	r2, r3, #1
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	441a      	add	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b0f      	cmp	r3, #15
 8002ba4:	d908      	bls.n	8002bb8 <UART_SetConfig+0x400>
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bac:	d204      	bcs.n	8002bb8 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	e001      	b.n	8002bbc <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002bc8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002bd4:	00f42400 	.word	0x00f42400

08002bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01a      	beq.n	8002cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd6:	d10a      	bne.n	8002cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]
  }
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d2a:	f7fd fe51 	bl	80009d0 <HAL_GetTick>
 8002d2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d10e      	bne.n	8002d5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f82a 	bl	8002da6 <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e020      	b.n	8002d9e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d10e      	bne.n	8002d88 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f814 	bl	8002da6 <UART_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e00a      	b.n	8002d9e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db6:	e05d      	b.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbe:	d059      	beq.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc0:	f7fd fe06 	bl	80009d0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d302      	bcc.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11b      	bne.n	8002e0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002de4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e042      	b.n	8002e94 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d02b      	beq.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e2a:	d123      	bne.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e44:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e00f      	b.n	8002e94 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d092      	beq.n	8002db8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002eb2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002edc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d114      	bne.n	8002f4c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f38:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f48:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f4a:	e002      	b.n	8002f52 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff fc15 	bl	800277c <HAL_UART_TxCpltCallback>
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff fc11 	bl	8002790 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d109      	bne.n	8002fb2 <UART_DMAError+0x3c>
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b21      	cmp	r3, #33	; 0x21
 8002fa2:	d106      	bne.n	8002fb2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8002fac:	6978      	ldr	r0, [r7, #20]
 8002fae:	f7ff ff75 	bl	8002e9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d109      	bne.n	8002fd4 <UART_DMAError+0x5e>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b22      	cmp	r3, #34	; 0x22
 8002fc4:	d106      	bne.n	8002fd4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8002fce:	6978      	ldr	r0, [r7, #20]
 8002fd0:	f7ff ff79 	bl	8002ec6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd8:	f043 0210 	orr.w	r2, r3, #16
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f7ff fbdf 	bl	80027a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fe6:	bf00      	nop
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <__libc_init_array>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	4e0d      	ldr	r6, [pc, #52]	; (8003028 <__libc_init_array+0x38>)
 8002ff4:	4c0d      	ldr	r4, [pc, #52]	; (800302c <__libc_init_array+0x3c>)
 8002ff6:	1ba4      	subs	r4, r4, r6
 8002ff8:	10a4      	asrs	r4, r4, #2
 8002ffa:	2500      	movs	r5, #0
 8002ffc:	42a5      	cmp	r5, r4
 8002ffe:	d109      	bne.n	8003014 <__libc_init_array+0x24>
 8003000:	4e0b      	ldr	r6, [pc, #44]	; (8003030 <__libc_init_array+0x40>)
 8003002:	4c0c      	ldr	r4, [pc, #48]	; (8003034 <__libc_init_array+0x44>)
 8003004:	f000 f820 	bl	8003048 <_init>
 8003008:	1ba4      	subs	r4, r4, r6
 800300a:	10a4      	asrs	r4, r4, #2
 800300c:	2500      	movs	r5, #0
 800300e:	42a5      	cmp	r5, r4
 8003010:	d105      	bne.n	800301e <__libc_init_array+0x2e>
 8003012:	bd70      	pop	{r4, r5, r6, pc}
 8003014:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003018:	4798      	blx	r3
 800301a:	3501      	adds	r5, #1
 800301c:	e7ee      	b.n	8002ffc <__libc_init_array+0xc>
 800301e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003022:	4798      	blx	r3
 8003024:	3501      	adds	r5, #1
 8003026:	e7f2      	b.n	800300e <__libc_init_array+0x1e>
 8003028:	080030d4 	.word	0x080030d4
 800302c:	080030d4 	.word	0x080030d4
 8003030:	080030d4 	.word	0x080030d4
 8003034:	080030d8 	.word	0x080030d8

08003038 <memset>:
 8003038:	4402      	add	r2, r0
 800303a:	4603      	mov	r3, r0
 800303c:	4293      	cmp	r3, r2
 800303e:	d100      	bne.n	8003042 <memset+0xa>
 8003040:	4770      	bx	lr
 8003042:	f803 1b01 	strb.w	r1, [r3], #1
 8003046:	e7f9      	b.n	800303c <memset+0x4>

08003048 <_init>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	bf00      	nop
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr

08003054 <_fini>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	bf00      	nop
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr
