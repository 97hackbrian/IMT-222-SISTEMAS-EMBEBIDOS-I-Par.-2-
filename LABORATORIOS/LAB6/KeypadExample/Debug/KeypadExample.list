
KeypadExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001624  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080017b0  080017b0  000117b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017f0  080017f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080017f0  080017f0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017f0  080017f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017f0  080017f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080017f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  08001808  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001808  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005497  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001004  00000000  00000000  000254d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000540  00000000  00000000  000264e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004a8  00000000  00000000  00026a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e42a  00000000  00000000  00026ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004b89  00000000  00000000  000452f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b72f2  00000000  00000000  00049e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010116d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000130c  00000000  00000000  001011e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001798 	.word	0x08001798

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08001798 	.word	0x08001798

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 f971 	bl	80004b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f81c 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f860 	bl	800029c <MX_GPIO_Init>
	          else
	          {
	        	  ledState=0;
	          }*/

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e6:	f000 fc43 	bl	8000a70 <HAL_GPIO_WritePin>


	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)==1)
 80001ea:	2140      	movs	r1, #64	; 0x40
 80001ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f0:	f000 fc26 	bl	8000a40 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d103      	bne.n	8000202 <main+0x36>
	  	          {
	  	        	  ledState=2;
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <main+0x40>)
 80001fc:	2202      	movs	r2, #2
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	e7ec      	b.n	80001dc <main+0x10>
	  	          }
	  else
	  	          {
	  	        	  ledState=0;
 8000202:	4b02      	ldr	r3, [pc, #8]	; (800020c <main+0x40>)
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8000208:	e7e8      	b.n	80001dc <main+0x10>
 800020a:	bf00      	nop
 800020c:	20000000 	.word	0x20000000

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b096      	sub	sp, #88	; 0x58
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2244      	movs	r2, #68	; 0x44
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fab2 	bl	8001788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000232:	2310      	movs	r3, #16
 8000234:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800023e:	2360      	movs	r3, #96	; 0x60
 8000240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000242:	2300      	movs	r3, #0
 8000244:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fc8c 	bl	8000b68 <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000256:	f000 f87d 	bl	8000354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	230f      	movs	r3, #15
 800025c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026e:	463b      	mov	r3, r7
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 f898 	bl	80013a8 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800027e:	f000 f869 	bl	8000354 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000282:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000286:	f000 fc19 	bl	8000abc <HAL_PWREx_ControlVoltageScaling>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000290:	f000 f860 	bl	8000354 <Error_Handler>
  }
}
 8000294:	bf00      	nop
 8000296:	3758      	adds	r7, #88	; 0x58
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 030c 	add.w	r3, r7, #12
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	4b26      	ldr	r3, [pc, #152]	; (800034c <MX_GPIO_Init+0xb0>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b6:	4a25      	ldr	r2, [pc, #148]	; (800034c <MX_GPIO_Init+0xb0>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002be:	4b23      	ldr	r3, [pc, #140]	; (800034c <MX_GPIO_Init+0xb0>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ca:	4b20      	ldr	r3, [pc, #128]	; (800034c <MX_GPIO_Init+0xb0>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	4a1f      	ldr	r2, [pc, #124]	; (800034c <MX_GPIO_Init+0xb0>)
 80002d0:	f043 0302 	orr.w	r3, r3, #2
 80002d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002d6:	4b1d      	ldr	r3, [pc, #116]	; (800034c <MX_GPIO_Init+0xb0>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	f003 0302 	and.w	r3, r3, #2
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f641 2110 	movw	r1, #6672	; 0x1a10
 80002e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ec:	f000 fbc0 	bl	8000a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80002f0:	f641 2310 	movw	r3, #6672	; 0x1a10
 80002f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f6:	2301      	movs	r3, #1
 80002f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fe:	2300      	movs	r3, #0
 8000300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	4619      	mov	r1, r3
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f000 fa2e 	bl	800076c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000310:	23c0      	movs	r3, #192	; 0xc0
 8000312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000314:	2300      	movs	r3, #0
 8000316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000318:	2301      	movs	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031c:	f107 030c 	add.w	r3, r7, #12
 8000320:	4619      	mov	r1, r3
 8000322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000326:	f000 fa21 	bl	800076c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800032a:	2303      	movs	r3, #3
 800032c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000332:	2301      	movs	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_GPIO_Init+0xb4>)
 800033e:	f000 fa15 	bl	800076c <HAL_GPIO_Init>

}
 8000342:	bf00      	nop
 8000344:	3720      	adds	r7, #32
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	48000400 	.word	0x48000400

08000354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035a:	e7fe      	b.n	800035a <Error_Handler+0x6>

0800035c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <HAL_MspInit+0x44>)
 8000364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000366:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <HAL_MspInit+0x44>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6613      	str	r3, [r2, #96]	; 0x60
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <HAL_MspInit+0x44>)
 8000370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <HAL_MspInit+0x44>)
 800037c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800037e:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <HAL_MspInit+0x44>)
 8000380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000384:	6593      	str	r3, [r2, #88]	; 0x58
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <HAL_MspInit+0x44>)
 8000388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800038a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000

080003a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <NMI_Handler+0x4>

080003aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <HardFault_Handler+0x4>

080003b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <MemManage_Handler+0x4>

080003b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ba:	e7fe      	b.n	80003ba <BusFault_Handler+0x4>

080003bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <UsageFault_Handler+0x4>

080003c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f0:	f000 f8b6 	bl	8000560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <SystemInit+0x64>)
 80003fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000402:	4a16      	ldr	r2, [pc, #88]	; (800045c <SystemInit+0x64>)
 8000404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <SystemInit+0x68>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <SystemInit+0x68>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <SystemInit+0x68>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <SystemInit+0x68>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <SystemInit+0x68>)
 8000424:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000428:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800042c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <SystemInit+0x68>)
 8000430:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000434:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <SystemInit+0x68>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a09      	ldr	r2, [pc, #36]	; (8000460 <SystemInit+0x68>)
 800043c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000440:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <SystemInit+0x68>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <SystemInit+0x64>)
 800044a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800044e:	609a      	str	r2, [r3, #8]
#endif
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	e000ed00 	.word	0xe000ed00
 8000460:	40021000 	.word	0x40021000

08000464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800049c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000468:	f7ff ffc6 	bl	80003f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800046c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800046e:	e003      	b.n	8000478 <LoopCopyDataInit>

08000470 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000470:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000472:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000474:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000476:	3104      	adds	r1, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000478:	480a      	ldr	r0, [pc, #40]	; (80004a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800047c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800047e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000480:	d3f6      	bcc.n	8000470 <CopyDataInit>
	ldr	r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000484:	e002      	b.n	800048c <LoopFillZerobss>

08000486 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000486:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000488:	f842 3b04 	str.w	r3, [r2], #4

0800048c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <LoopForever+0x16>)
	cmp	r2, r3
 800048e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000490:	d3f9      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000492:	f001 f955 	bl	8001740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000496:	f7ff fe99 	bl	80001cc <main>

0800049a <LoopForever>:

LoopForever:
    b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800049c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80004a0:	080017f8 	.word	0x080017f8
	ldr	r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004a8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80004ac:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80004b0:	20000030 	.word	0x20000030

080004b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC1_IRQHandler>

080004b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004bc:	2300      	movs	r3, #0
 80004be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004c0:	2003      	movs	r0, #3
 80004c2:	f000 f91f 	bl	8000704 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004c6:	2000      	movs	r0, #0
 80004c8:	f000 f80e 	bl	80004e8 <HAL_InitTick>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d002      	beq.n	80004d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004d2:	2301      	movs	r3, #1
 80004d4:	71fb      	strb	r3, [r7, #7]
 80004d6:	e001      	b.n	80004dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004d8:	f7ff ff40 	bl	800035c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <HAL_InitTick+0x6c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d023      	beq.n	8000544 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <HAL_InitTick+0x70>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <HAL_InitTick+0x6c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4619      	mov	r1, r3
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	fbb3 f3f1 	udiv	r3, r3, r1
 800050e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f91d 	bl	8000752 <HAL_SYSTICK_Config>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d10f      	bne.n	800053e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b0f      	cmp	r3, #15
 8000522:	d809      	bhi.n	8000538 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000524:	2200      	movs	r2, #0
 8000526:	6879      	ldr	r1, [r7, #4]
 8000528:	f04f 30ff 	mov.w	r0, #4294967295
 800052c:	f000 f8f5 	bl	800071a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000530:	4a0a      	ldr	r2, [pc, #40]	; (800055c <HAL_InitTick+0x74>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6013      	str	r3, [r2, #0]
 8000536:	e007      	b.n	8000548 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000538:	2301      	movs	r3, #1
 800053a:	73fb      	strb	r3, [r7, #15]
 800053c:	e004      	b.n	8000548 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	73fb      	strb	r3, [r7, #15]
 8000542:	e001      	b.n	8000548 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000544:	2301      	movs	r3, #1
 8000546:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000548:	7bfb      	ldrb	r3, [r7, #15]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000000c 	.word	0x2000000c
 8000558:	20000004 	.word	0x20000004
 800055c:	20000008 	.word	0x20000008

08000560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_IncTick+0x20>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_IncTick+0x24>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4413      	add	r3, r2
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_IncTick+0x24>)
 8000572:	6013      	str	r3, [r2, #0]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	2000000c 	.word	0x2000000c
 8000584:	2000002c 	.word	0x2000002c

08000588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return uwTick;
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <HAL_GetTick+0x14>)
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000002c 	.word	0x2000002c

080005a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f003 0307 	and.w	r3, r3, #7
 80005ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005bc:	4013      	ands	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005d2:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <__NVIC_SetPriorityGrouping+0x44>)
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	60d3      	str	r3, [r2, #12]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <__NVIC_GetPriorityGrouping+0x18>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	f003 0307 	and.w	r3, r3, #7
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d0:	d301      	bcc.n	80006d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00f      	b.n	80006f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <SysTick_Config+0x40>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3b01      	subs	r3, #1
 80006dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006de:	210f      	movs	r1, #15
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f7ff ff8e 	bl	8000604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <SysTick_Config+0x40>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <SysTick_Config+0x40>)
 80006f0:	2207      	movs	r2, #7
 80006f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	e000e010 	.word	0xe000e010

08000704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ff47 	bl	80005a0 <__NVIC_SetPriorityGrouping>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b086      	sub	sp, #24
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	60b9      	str	r1, [r7, #8]
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800072c:	f7ff ff5c 	bl	80005e8 <__NVIC_GetPriorityGrouping>
 8000730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f7ff ff8e 	bl	8000658 <NVIC_EncodePriority>
 800073c:	4602      	mov	r2, r0
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5d 	bl	8000604 <__NVIC_SetPriority>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ffb0 	bl	80006c0 <SysTick_Config>
 8000760:	4603      	mov	r3, r0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800076c:	b480      	push	{r7}
 800076e:	b087      	sub	sp, #28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800077a:	e148      	b.n	8000a0e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	2101      	movs	r1, #1
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	fa01 f303 	lsl.w	r3, r1, r3
 8000788:	4013      	ands	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2b00      	cmp	r3, #0
 8000790:	f000 813a 	beq.w	8000a08 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d00b      	beq.n	80007b4 <HAL_GPIO_Init+0x48>
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d007      	beq.n	80007b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007a8:	2b11      	cmp	r3, #17
 80007aa:	d003      	beq.n	80007b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2b12      	cmp	r3, #18
 80007b2:	d130      	bne.n	8000816 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2203      	movs	r2, #3
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	43db      	mvns	r3, r3
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	4313      	orrs	r3, r2
 80007dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	693a      	ldr	r2, [r7, #16]
 80007e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007ea:	2201      	movs	r2, #1
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	4013      	ands	r3, r2
 80007f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	091b      	lsrs	r3, r3, #4
 8000800:	f003 0201 	and.w	r2, r3, #1
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4313      	orrs	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	2203      	movs	r2, #3
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43db      	mvns	r3, r3
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	4013      	ands	r3, r2
 800082c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	4313      	orrs	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d003      	beq.n	8000856 <HAL_GPIO_Init+0xea>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b12      	cmp	r3, #18
 8000854:	d123      	bne.n	800089e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	08da      	lsrs	r2, r3, #3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3208      	adds	r2, #8
 800085e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	220f      	movs	r2, #15
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43db      	mvns	r3, r3
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	4013      	ands	r3, r2
 8000878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	691a      	ldr	r2, [r3, #16]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4313      	orrs	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	08da      	lsrs	r2, r3, #3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3208      	adds	r2, #8
 8000898:	6939      	ldr	r1, [r7, #16]
 800089a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	2203      	movs	r2, #3
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43db      	mvns	r3, r3
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4013      	ands	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f003 0203 	and.w	r2, r3, #3
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 8094 	beq.w	8000a08 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e0:	4b52      	ldr	r3, [pc, #328]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80008e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e4:	4a51      	ldr	r2, [pc, #324]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6613      	str	r3, [r2, #96]	; 0x60
 80008ec:	4b4f      	ldr	r3, [pc, #316]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80008ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008f8:	4a4d      	ldr	r2, [pc, #308]	; (8000a30 <HAL_GPIO_Init+0x2c4>)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	089b      	lsrs	r3, r3, #2
 80008fe:	3302      	adds	r3, #2
 8000900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	220f      	movs	r2, #15
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000922:	d00d      	beq.n	8000940 <HAL_GPIO_Init+0x1d4>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a43      	ldr	r2, [pc, #268]	; (8000a34 <HAL_GPIO_Init+0x2c8>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d007      	beq.n	800093c <HAL_GPIO_Init+0x1d0>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a42      	ldr	r2, [pc, #264]	; (8000a38 <HAL_GPIO_Init+0x2cc>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d101      	bne.n	8000938 <HAL_GPIO_Init+0x1cc>
 8000934:	2302      	movs	r3, #2
 8000936:	e004      	b.n	8000942 <HAL_GPIO_Init+0x1d6>
 8000938:	2307      	movs	r3, #7
 800093a:	e002      	b.n	8000942 <HAL_GPIO_Init+0x1d6>
 800093c:	2301      	movs	r3, #1
 800093e:	e000      	b.n	8000942 <HAL_GPIO_Init+0x1d6>
 8000940:	2300      	movs	r3, #0
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	f002 0203 	and.w	r2, r2, #3
 8000948:	0092      	lsls	r2, r2, #2
 800094a:	4093      	lsls	r3, r2
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4313      	orrs	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000952:	4937      	ldr	r1, [pc, #220]	; (8000a30 <HAL_GPIO_Init+0x2c4>)
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	089b      	lsrs	r3, r3, #2
 8000958:	3302      	adds	r3, #2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000960:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000978:	2b00      	cmp	r3, #0
 800097a:	d003      	beq.n	8000984 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000984:	4a2d      	ldr	r2, [pc, #180]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	43db      	mvns	r3, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009d8:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	fa22 f303 	lsr.w	r3, r2, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f47f aeaf 	bne.w	800077c <HAL_GPIO_Init+0x10>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	371c      	adds	r7, #28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010000 	.word	0x40010000
 8000a34:	48000400 	.word	0x48000400
 8000a38:	48000800 	.word	0x48000800
 8000a3c:	40010400 	.word	0x40010400

08000a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	691a      	ldr	r2, [r3, #16]
 8000a50:	887b      	ldrh	r3, [r7, #2]
 8000a52:	4013      	ands	r3, r2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e001      	b.n	8000a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a80:	787b      	ldrb	r3, [r7, #1]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a86:	887a      	ldrh	r2, [r7, #2]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a8c:	e002      	b.n	8000a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a8e:	887a      	ldrh	r2, [r7, #2]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40007000 	.word	0x40007000

08000abc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aca:	d130      	bne.n	8000b2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ad8:	d038      	beq.n	8000b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ae4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2232      	movs	r2, #50	; 0x32
 8000af0:	fb02 f303 	mul.w	r3, r2, r3
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	0c9b      	lsrs	r3, r3, #18
 8000afc:	3301      	adds	r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b00:	e002      	b.n	8000b08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b14:	d102      	bne.n	8000b1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1f2      	bne.n	8000b02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b28:	d110      	bne.n	8000b4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e00f      	b.n	8000b4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3a:	d007      	beq.n	8000b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b44:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40007000 	.word	0x40007000
 8000b60:	20000004 	.word	0x20000004
 8000b64:	431bde83 	.word	0x431bde83

08000b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f000 bc11 	b.w	800139e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b7c:	4ba0      	ldr	r3, [pc, #640]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f003 030c 	and.w	r3, r3, #12
 8000b84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b86:	4b9e      	ldr	r3, [pc, #632]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f000 80e4 	beq.w	8000d66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d007      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x4c>
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	2b0c      	cmp	r3, #12
 8000ba8:	f040 808b 	bne.w	8000cc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	f040 8087 	bne.w	8000cc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bb4:	4b92      	ldr	r3, [pc, #584]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d005      	beq.n	8000bcc <HAL_RCC_OscConfig+0x64>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e3e8      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a1a      	ldr	r2, [r3, #32]
 8000bd0:	4b8b      	ldr	r3, [pc, #556]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d004      	beq.n	8000be6 <HAL_RCC_OscConfig+0x7e>
 8000bdc:	4b88      	ldr	r3, [pc, #544]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000be4:	e005      	b.n	8000bf2 <HAL_RCC_OscConfig+0x8a>
 8000be6:	4b86      	ldr	r3, [pc, #536]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bec:	091b      	lsrs	r3, r3, #4
 8000bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d223      	bcs.n	8000c3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a1b      	ldr	r3, [r3, #32]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fd40 	bl	8001680 <RCC_SetFlashLatencyFromMSIRange>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e3c9      	b.n	800139e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c0a:	4b7d      	ldr	r3, [pc, #500]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a7c      	ldr	r2, [pc, #496]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b7a      	ldr	r3, [pc, #488]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	4977      	ldr	r1, [pc, #476]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c24:	4313      	orrs	r3, r2
 8000c26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c28:	4b75      	ldr	r3, [pc, #468]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69db      	ldr	r3, [r3, #28]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	4972      	ldr	r1, [pc, #456]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	604b      	str	r3, [r1, #4]
 8000c3c:	e025      	b.n	8000c8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c3e:	4b70      	ldr	r3, [pc, #448]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a6f      	ldr	r2, [pc, #444]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	4b6d      	ldr	r3, [pc, #436]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a1b      	ldr	r3, [r3, #32]
 8000c56:	496a      	ldr	r1, [pc, #424]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c5c:	4b68      	ldr	r3, [pc, #416]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	4965      	ldr	r1, [pc, #404]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d109      	bne.n	8000c8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fd00 	bl	8001680 <RCC_SetFlashLatencyFromMSIRange>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e389      	b.n	800139e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c8a:	f000 fc6f 	bl	800156c <HAL_RCC_GetSysClockFreq>
 8000c8e:	4601      	mov	r1, r0
 8000c90:	4b5b      	ldr	r3, [pc, #364]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	091b      	lsrs	r3, r3, #4
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	4a5a      	ldr	r2, [pc, #360]	; (8000e04 <HAL_RCC_OscConfig+0x29c>)
 8000c9c:	5cd3      	ldrb	r3, [r2, r3]
 8000c9e:	f003 031f 	and.w	r3, r3, #31
 8000ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca6:	4a58      	ldr	r2, [pc, #352]	; (8000e08 <HAL_RCC_OscConfig+0x2a0>)
 8000ca8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000caa:	4b58      	ldr	r3, [pc, #352]	; (8000e0c <HAL_RCC_OscConfig+0x2a4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fc1a 	bl	80004e8 <HAL_InitTick>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d052      	beq.n	8000d64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	e36d      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d032      	beq.n	8000d30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cca:	4b4d      	ldr	r3, [pc, #308]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a4c      	ldr	r2, [pc, #304]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cd6:	f7ff fc57 	bl	8000588 <HAL_GetTick>
 8000cda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cdc:	e008      	b.n	8000cf0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cde:	f7ff fc53 	bl	8000588 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d901      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e356      	b.n	800139e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cf0:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f0      	beq.n	8000cde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cfc:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a3f      	ldr	r2, [pc, #252]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	493a      	ldr	r1, [pc, #232]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d1a:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	4935      	ldr	r1, [pc, #212]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	604b      	str	r3, [r1, #4]
 8000d2e:	e01a      	b.n	8000d66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a32      	ldr	r2, [pc, #200]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000d36:	f023 0301 	bic.w	r3, r3, #1
 8000d3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fc24 	bl	8000588 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d44:	f7ff fc20 	bl	8000588 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e323      	b.n	800139e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d56:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <HAL_RCC_OscConfig+0x1dc>
 8000d62:	e000      	b.n	8000d66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d073      	beq.n	8000e5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	2b08      	cmp	r3, #8
 8000d76:	d005      	beq.n	8000d84 <HAL_RCC_OscConfig+0x21c>
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2b0c      	cmp	r3, #12
 8000d7c:	d10e      	bne.n	8000d9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d10b      	bne.n	8000d9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d063      	beq.n	8000e58 <HAL_RCC_OscConfig+0x2f0>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d15f      	bne.n	8000e58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e300      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da4:	d106      	bne.n	8000db4 <HAL_RCC_OscConfig+0x24c>
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e01d      	b.n	8000df0 <HAL_RCC_OscConfig+0x288>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x270>
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e00b      	b.n	8000df0 <HAL_RCC_OscConfig+0x288>
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <HAL_RCC_OscConfig+0x298>)
 8000dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d01b      	beq.n	8000e30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df8:	f7ff fbc6 	bl	8000588 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dfe:	e010      	b.n	8000e22 <HAL_RCC_OscConfig+0x2ba>
 8000e00:	40021000 	.word	0x40021000
 8000e04:	080017b0 	.word	0x080017b0
 8000e08:	20000004 	.word	0x20000004
 8000e0c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e10:	f7ff fbba 	bl	8000588 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b64      	cmp	r3, #100	; 0x64
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e2bd      	b.n	800139e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e22:	4baf      	ldr	r3, [pc, #700]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f0      	beq.n	8000e10 <HAL_RCC_OscConfig+0x2a8>
 8000e2e:	e014      	b.n	8000e5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e30:	f7ff fbaa 	bl	8000588 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fba6 	bl	8000588 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e2a9      	b.n	800139e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e4a:	4ba5      	ldr	r3, [pc, #660]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f0      	bne.n	8000e38 <HAL_RCC_OscConfig+0x2d0>
 8000e56:	e000      	b.n	8000e5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d060      	beq.n	8000f28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d005      	beq.n	8000e78 <HAL_RCC_OscConfig+0x310>
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2b0c      	cmp	r3, #12
 8000e70:	d119      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d116      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e78:	4b99      	ldr	r3, [pc, #612]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d005      	beq.n	8000e90 <HAL_RCC_OscConfig+0x328>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e286      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e90:	4b93      	ldr	r3, [pc, #588]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	061b      	lsls	r3, r3, #24
 8000e9e:	4990      	ldr	r1, [pc, #576]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ea4:	e040      	b.n	8000f28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eae:	4b8c      	ldr	r3, [pc, #560]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a8b      	ldr	r2, [pc, #556]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eba:	f7ff fb65 	bl	8000588 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec2:	f7ff fb61 	bl	8000588 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e264      	b.n	800139e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ed4:	4b82      	ldr	r3, [pc, #520]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f0      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee0:	4b7f      	ldr	r3, [pc, #508]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	061b      	lsls	r3, r3, #24
 8000eee:	497c      	ldr	r1, [pc, #496]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
 8000ef4:	e018      	b.n	8000f28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ef6:	4b7a      	ldr	r3, [pc, #488]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a79      	ldr	r2, [pc, #484]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f02:	f7ff fb41 	bl	8000588 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fb3d 	bl	8000588 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e240      	b.n	800139e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f1c:	4b70      	ldr	r3, [pc, #448]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f0      	bne.n	8000f0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d03c      	beq.n	8000fae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d01c      	beq.n	8000f76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f3c:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f42:	4a67      	ldr	r2, [pc, #412]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fb1c 	bl	8000588 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f54:	f7ff fb18 	bl	8000588 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e21b      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f66:	4b5e      	ldr	r3, [pc, #376]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0ef      	beq.n	8000f54 <HAL_RCC_OscConfig+0x3ec>
 8000f74:	e01b      	b.n	8000fae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f76:	4b5a      	ldr	r3, [pc, #360]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f7c:	4a58      	ldr	r2, [pc, #352]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f86:	f7ff faff 	bl	8000588 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fafb 	bl	8000588 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e1fe      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fa0:	4b4f      	ldr	r3, [pc, #316]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1ef      	bne.n	8000f8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 80a6 	beq.w	8001108 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000fc0:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10d      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd0:	4a43      	ldr	r2, [pc, #268]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd8:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8000fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe8:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <HAL_RCC_OscConfig+0x57c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d118      	bne.n	8001026 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ff4:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <HAL_RCC_OscConfig+0x57c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a3a      	ldr	r2, [pc, #232]	; (80010e4 <HAL_RCC_OscConfig+0x57c>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001000:	f7ff fac2 	bl	8000588 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001008:	f7ff fabe 	bl	8000588 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1c1      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800101a:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <HAL_RCC_OscConfig+0x57c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <HAL_RCC_OscConfig+0x4d8>
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8001030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001034:	4a2a      	ldr	r2, [pc, #168]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800103e:	e024      	b.n	800108a <HAL_RCC_OscConfig+0x522>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b05      	cmp	r3, #5
 8001046:	d110      	bne.n	800106a <HAL_RCC_OscConfig+0x502>
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 800104a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 800105a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800105e:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001068:	e00f      	b.n	800108a <HAL_RCC_OscConfig+0x522>
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 800106c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001070:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8001072:	f023 0301 	bic.w	r3, r3, #1
 8001076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 800107c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 8001082:	f023 0304 	bic.w	r3, r3, #4
 8001086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d016      	beq.n	80010c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001092:	f7ff fa79 	bl	8000588 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001098:	e00a      	b.n	80010b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109a:	f7ff fa75 	bl	8000588 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e176      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_RCC_OscConfig+0x578>)
 80010b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0ed      	beq.n	800109a <HAL_RCC_OscConfig+0x532>
 80010be:	e01a      	b.n	80010f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c0:	f7ff fa62 	bl	8000588 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010c6:	e00f      	b.n	80010e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c8:	f7ff fa5e 	bl	8000588 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d906      	bls.n	80010e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e15f      	b.n	800139e <HAL_RCC_OscConfig+0x836>
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010e8:	4baa      	ldr	r3, [pc, #680]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80010ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1e8      	bne.n	80010c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010f6:	7ffb      	ldrb	r3, [r7, #31]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d105      	bne.n	8001108 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010fc:	4ba5      	ldr	r3, [pc, #660]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	4aa4      	ldr	r2, [pc, #656]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001106:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0320 	and.w	r3, r3, #32
 8001110:	2b00      	cmp	r3, #0
 8001112:	d03c      	beq.n	800118e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01c      	beq.n	8001156 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800111c:	4b9d      	ldr	r3, [pc, #628]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 800111e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001122:	4a9c      	ldr	r2, [pc, #624]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800112c:	f7ff fa2c 	bl	8000588 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001134:	f7ff fa28 	bl	8000588 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e12b      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001146:	4b93      	ldr	r3, [pc, #588]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0ef      	beq.n	8001134 <HAL_RCC_OscConfig+0x5cc>
 8001154:	e01b      	b.n	800118e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001156:	4b8f      	ldr	r3, [pc, #572]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800115c:	4a8d      	ldr	r2, [pc, #564]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001166:	f7ff fa0f 	bl	8000588 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800116e:	f7ff fa0b 	bl	8000588 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e10e      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001180:	4b84      	ldr	r3, [pc, #528]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001182:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1ef      	bne.n	800116e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8102 	beq.w	800139c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	2b02      	cmp	r3, #2
 800119e:	f040 80c5 	bne.w	800132c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011a2:	4b7c      	ldr	r3, [pc, #496]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f003 0203 	and.w	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d12c      	bne.n	8001210 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	3b01      	subs	r3, #1
 80011c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d123      	bne.n	8001210 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d11b      	bne.n	8001210 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d113      	bne.n	8001210 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f2:	085b      	lsrs	r3, r3, #1
 80011f4:	3b01      	subs	r3, #1
 80011f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d109      	bne.n	8001210 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	085b      	lsrs	r3, r3, #1
 8001208:	3b01      	subs	r3, #1
 800120a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800120c:	429a      	cmp	r2, r3
 800120e:	d067      	beq.n	80012e0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b0c      	cmp	r3, #12
 8001214:	d062      	beq.n	80012dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001216:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e0bb      	b.n	800139e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001226:	4b5b      	ldr	r3, [pc, #364]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a5a      	ldr	r2, [pc, #360]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 800122c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001230:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001232:	f7ff f9a9 	bl	8000588 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123a:	f7ff f9a5 	bl	8000588 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e0a8      	b.n	800139e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800124c:	4b51      	ldr	r3, [pc, #324]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f0      	bne.n	800123a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001258:	4b4e      	ldr	r3, [pc, #312]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	4b4e      	ldr	r3, [pc, #312]	; (8001398 <HAL_RCC_OscConfig+0x830>)
 800125e:	4013      	ands	r3, r2
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001268:	3a01      	subs	r2, #1
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	4311      	orrs	r1, r2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001272:	0212      	lsls	r2, r2, #8
 8001274:	4311      	orrs	r1, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800127a:	0852      	lsrs	r2, r2, #1
 800127c:	3a01      	subs	r2, #1
 800127e:	0552      	lsls	r2, r2, #21
 8001280:	4311      	orrs	r1, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001286:	0852      	lsrs	r2, r2, #1
 8001288:	3a01      	subs	r2, #1
 800128a:	0652      	lsls	r2, r2, #25
 800128c:	4311      	orrs	r1, r2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001292:	06d2      	lsls	r2, r2, #27
 8001294:	430a      	orrs	r2, r1
 8001296:	493f      	ldr	r1, [pc, #252]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001298:	4313      	orrs	r3, r2
 800129a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800129c:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a3c      	ldr	r2, [pc, #240]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80012a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012a8:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4a39      	ldr	r2, [pc, #228]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80012ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012b4:	f7ff f968 	bl	8000588 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012bc:	f7ff f964 	bl	8000588 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e067      	b.n	800139e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012da:	e05f      	b.n	800139c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e05e      	b.n	800139e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d157      	bne.n	800139c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80012f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4a25      	ldr	r2, [pc, #148]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 80012fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001302:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001304:	f7ff f940 	bl	8000588 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130c:	f7ff f93c 	bl	8000588 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e03f      	b.n	800139e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x7a4>
 800132a:	e037      	b.n	800139c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d02d      	beq.n	800138e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800133c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001350:	f023 0303 	bic.w	r3, r3, #3
 8001354:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 800135c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001364:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff f90f 	bl	8000588 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff f90b 	bl	8000588 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e00e      	b.n	800139e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <HAL_RCC_OscConfig+0x82c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x806>
 800138c:	e006      	b.n	800139c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e005      	b.n	800139e <HAL_RCC_OscConfig+0x836>
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3720      	adds	r7, #32
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop

080013a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0c8      	b.n	800154e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013bc:	4b66      	ldr	r3, [pc, #408]	; (8001558 <HAL_RCC_ClockConfig+0x1b0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d910      	bls.n	80013ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b63      	ldr	r3, [pc, #396]	; (8001558 <HAL_RCC_ClockConfig+0x1b0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 0207 	bic.w	r2, r3, #7
 80013d2:	4961      	ldr	r1, [pc, #388]	; (8001558 <HAL_RCC_ClockConfig+0x1b0>)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013da:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <HAL_RCC_ClockConfig+0x1b0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0b0      	b.n	800154e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d04c      	beq.n	8001492 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d107      	bne.n	8001410 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001400:	4b56      	ldr	r3, [pc, #344]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d121      	bne.n	8001450 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e09e      	b.n	800154e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d107      	bne.n	8001428 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001418:	4b50      	ldr	r3, [pc, #320]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d115      	bne.n	8001450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e092      	b.n	800154e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d107      	bne.n	8001440 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001430:	4b4a      	ldr	r3, [pc, #296]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e086      	b.n	800154e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e07e      	b.n	800154e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001450:	4b42      	ldr	r3, [pc, #264]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 0203 	bic.w	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	493f      	ldr	r1, [pc, #252]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 800145e:	4313      	orrs	r3, r2
 8001460:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001462:	f7ff f891 	bl	8000588 <HAL_GetTick>
 8001466:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001468:	e00a      	b.n	8001480 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146a:	f7ff f88d 	bl	8000588 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	f241 3288 	movw	r2, #5000	; 0x1388
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e066      	b.n	800154e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001480:	4b36      	ldr	r3, [pc, #216]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 020c 	and.w	r2, r3, #12
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	429a      	cmp	r2, r3
 8001490:	d1eb      	bne.n	800146a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d008      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	492c      	ldr	r1, [pc, #176]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_RCC_ClockConfig+0x1b0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d210      	bcs.n	80014e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_RCC_ClockConfig+0x1b0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0207 	bic.w	r2, r3, #7
 80014c6:	4924      	ldr	r1, [pc, #144]	; (8001558 <HAL_RCC_ClockConfig+0x1b0>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_RCC_ClockConfig+0x1b0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e036      	b.n	800154e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4918      	ldr	r1, [pc, #96]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4910      	ldr	r1, [pc, #64]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800151e:	f000 f825 	bl	800156c <HAL_RCC_GetSysClockFreq>
 8001522:	4601      	mov	r1, r0
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_RCC_ClockConfig+0x1b4>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	fa21 f303 	lsr.w	r3, r1, r3
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ffd0 	bl	80004e8 <HAL_InitTick>
 8001548:	4603      	mov	r3, r0
 800154a:	72fb      	strb	r3, [r7, #11]

  return status;
 800154c:	7afb      	ldrb	r3, [r7, #11]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40022000 	.word	0x40022000
 800155c:	40021000 	.word	0x40021000
 8001560:	080017b0 	.word	0x080017b0
 8001564:	20000004 	.word	0x20000004
 8001568:	20000008 	.word	0x20000008

0800156c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157a:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <HAL_RCC_GetSysClockFreq+0x104>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001584:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_RCC_GetSysClockFreq+0x104>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x34>
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d121      	bne.n	80015de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d11e      	bne.n	80015de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <HAL_RCC_GetSysClockFreq+0x104>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015ac:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_RCC_GetSysClockFreq+0x104>)
 80015ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b2:	0a1b      	lsrs	r3, r3, #8
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	e005      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015bc:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <HAL_RCC_GetSysClockFreq+0x104>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015c8:	4a2a      	ldr	r2, [pc, #168]	; (8001674 <HAL_RCC_GetSysClockFreq+0x108>)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10d      	bne.n	80015f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d102      	bne.n	80015ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_RCC_GetSysClockFreq+0x10c>)
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	e004      	b.n	80015f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_RCC_GetSysClockFreq+0x110>)
 80015f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d133      	bne.n	8001662 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_RCC_GetSysClockFreq+0x104>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d002      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0xa4>
 800160a:	2b03      	cmp	r3, #3
 800160c:	d003      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0xaa>
 800160e:	e005      	b.n	800161c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001612:	617b      	str	r3, [r7, #20]
      break;
 8001614:	e005      	b.n	8001622 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_RCC_GetSysClockFreq+0x110>)
 8001618:	617b      	str	r3, [r7, #20]
      break;
 800161a:	e002      	b.n	8001622 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	617b      	str	r3, [r7, #20]
      break;
 8001620:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <HAL_RCC_GetSysClockFreq+0x104>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	3301      	adds	r3, #1
 800162e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_RCC_GetSysClockFreq+0x104>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	fb02 f203 	mul.w	r2, r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_GetSysClockFreq+0x104>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0e5b      	lsrs	r3, r3, #25
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	3301      	adds	r3, #1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001660:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001662:	69bb      	ldr	r3, [r7, #24]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3724      	adds	r7, #36	; 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40021000 	.word	0x40021000
 8001674:	080017c0 	.word	0x080017c0
 8001678:	00f42400 	.word	0x00f42400
 800167c:	007a1200 	.word	0x007a1200

08001680 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001698:	f7ff fa02 	bl	8000aa0 <HAL_PWREx_GetVoltageRange>
 800169c:	6178      	str	r0, [r7, #20]
 800169e:	e014      	b.n	80016ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	4a24      	ldr	r2, [pc, #144]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6593      	str	r3, [r2, #88]	; 0x58
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80016b8:	f7ff f9f2 	bl	8000aa0 <HAL_PWREx_GetVoltageRange>
 80016bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80016be:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d0:	d10b      	bne.n	80016ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b80      	cmp	r3, #128	; 0x80
 80016d6:	d919      	bls.n	800170c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2ba0      	cmp	r3, #160	; 0xa0
 80016dc:	d902      	bls.n	80016e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016de:	2302      	movs	r3, #2
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	e013      	b.n	800170c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016e4:	2301      	movs	r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	e010      	b.n	800170c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b80      	cmp	r3, #128	; 0x80
 80016ee:	d902      	bls.n	80016f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80016f0:	2303      	movs	r3, #3
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	e00a      	b.n	800170c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b80      	cmp	r3, #128	; 0x80
 80016fa:	d102      	bne.n	8001702 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016fc:	2302      	movs	r3, #2
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	e004      	b.n	800170c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b70      	cmp	r3, #112	; 0x70
 8001706:	d101      	bne.n	800170c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001708:	2301      	movs	r3, #1
 800170a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 0207 	bic.w	r2, r3, #7
 8001714:	4909      	ldr	r1, [pc, #36]	; (800173c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	429a      	cmp	r2, r3
 8001728:	d001      	beq.n	800172e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	40022000 	.word	0x40022000

08001740 <__libc_init_array>:
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	4e0d      	ldr	r6, [pc, #52]	; (8001778 <__libc_init_array+0x38>)
 8001744:	4c0d      	ldr	r4, [pc, #52]	; (800177c <__libc_init_array+0x3c>)
 8001746:	1ba4      	subs	r4, r4, r6
 8001748:	10a4      	asrs	r4, r4, #2
 800174a:	2500      	movs	r5, #0
 800174c:	42a5      	cmp	r5, r4
 800174e:	d109      	bne.n	8001764 <__libc_init_array+0x24>
 8001750:	4e0b      	ldr	r6, [pc, #44]	; (8001780 <__libc_init_array+0x40>)
 8001752:	4c0c      	ldr	r4, [pc, #48]	; (8001784 <__libc_init_array+0x44>)
 8001754:	f000 f820 	bl	8001798 <_init>
 8001758:	1ba4      	subs	r4, r4, r6
 800175a:	10a4      	asrs	r4, r4, #2
 800175c:	2500      	movs	r5, #0
 800175e:	42a5      	cmp	r5, r4
 8001760:	d105      	bne.n	800176e <__libc_init_array+0x2e>
 8001762:	bd70      	pop	{r4, r5, r6, pc}
 8001764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001768:	4798      	blx	r3
 800176a:	3501      	adds	r5, #1
 800176c:	e7ee      	b.n	800174c <__libc_init_array+0xc>
 800176e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001772:	4798      	blx	r3
 8001774:	3501      	adds	r5, #1
 8001776:	e7f2      	b.n	800175e <__libc_init_array+0x1e>
 8001778:	080017f0 	.word	0x080017f0
 800177c:	080017f0 	.word	0x080017f0
 8001780:	080017f0 	.word	0x080017f0
 8001784:	080017f4 	.word	0x080017f4

08001788 <memset>:
 8001788:	4402      	add	r2, r0
 800178a:	4603      	mov	r3, r0
 800178c:	4293      	cmp	r3, r2
 800178e:	d100      	bne.n	8001792 <memset+0xa>
 8001790:	4770      	bx	lr
 8001792:	f803 1b01 	strb.w	r1, [r3], #1
 8001796:	e7f9      	b.n	800178c <memset+0x4>

08001798 <_init>:
 8001798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179a:	bf00      	nop
 800179c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179e:	bc08      	pop	{r3}
 80017a0:	469e      	mov	lr, r3
 80017a2:	4770      	bx	lr

080017a4 <_fini>:
 80017a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a6:	bf00      	nop
 80017a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017aa:	bc08      	pop	{r3}
 80017ac:	469e      	mov	lr, r3
 80017ae:	4770      	bx	lr
