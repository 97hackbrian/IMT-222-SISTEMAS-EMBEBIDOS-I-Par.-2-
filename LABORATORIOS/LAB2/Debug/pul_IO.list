
pul_IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017d0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800195c  0800195c  0001195c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800199c  0800199c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800199c  0800199c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800199c  0800199c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800199c  0800199c  0001199c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019a0  080019a0  000119a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080019a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  080019b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080019b4  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005324  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fc5  00000000  00000000  00025364  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000530  00000000  00000000  00026330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000498  00000000  00000000  00026860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e3c3  00000000  00000000  00026cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004a03  00000000  00000000  000450bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b71da  00000000  00000000  00049abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00100c98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012c4  00000000  00000000  00100d14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001944 	.word	0x08001944

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08001944 	.word	0x08001944

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fa25 	bl	800061e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f8bc 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f900 	bl	80003dc <MX_GPIO_Init>
    /* USER CODE END WHILE */




	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7))==1){
 80001dc:	2180      	movs	r1, #128	; 0x80
 80001de:	485a      	ldr	r0, [pc, #360]	; (8000348 <main+0x17c>)
 80001e0:	f000 fd04 	bl	8000bec <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d114      	bne.n	8000214 <main+0x48>
		  		  while (1){
		  			  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7))==0){
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	4856      	ldr	r0, [pc, #344]	; (8000348 <main+0x17c>)
 80001ee:	f000 fcfd 	bl	8000bec <HAL_GPIO_ReadPin>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d1f8      	bne.n	80001ea <main+0x1e>
		  				  bot=bot+1;
 80001f8:	4b54      	ldr	r3, [pc, #336]	; (800034c <main+0x180>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	3301      	adds	r3, #1
 80001fe:	4a53      	ldr	r2, [pc, #332]	; (800034c <main+0x180>)
 8000200:	6013      	str	r3, [r2, #0]
		  				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000202:	2201      	movs	r2, #1
 8000204:	2110      	movs	r1, #16
 8000206:	4850      	ldr	r0, [pc, #320]	; (8000348 <main+0x17c>)
 8000208:	f000 fd08 	bl	8000c1c <HAL_GPIO_WritePin>
		  				HAL_Delay(300);
 800020c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000210:	f000 fa7a 	bl	8000708 <HAL_Delay>
		  				  break;
		  			  }
		  		  }
		  	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000214:	2200      	movs	r2, #0
 8000216:	2110      	movs	r1, #16
 8000218:	484b      	ldr	r0, [pc, #300]	; (8000348 <main+0x17c>)
 800021a:	f000 fcff 	bl	8000c1c <HAL_GPIO_WritePin>
		  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))==1){
			  bot=bot+1;
		  }
*/

		  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800021e:	2201      	movs	r2, #1
 8000220:	2140      	movs	r1, #64	; 0x40
 8000222:	4849      	ldr	r0, [pc, #292]	; (8000348 <main+0x17c>)
 8000224:	f000 fcfa 	bl	8000c1c <HAL_GPIO_WritePin>
		  	  HAL_Delay(1000-(bot*100));
 8000228:	4b48      	ldr	r3, [pc, #288]	; (800034c <main+0x180>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000230:	fb02 f303 	mul.w	r3, r2, r3
 8000234:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fa65 	bl	8000708 <HAL_Delay>
		  	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))==1){
 800023e:	2101      	movs	r1, #1
 8000240:	4841      	ldr	r0, [pc, #260]	; (8000348 <main+0x17c>)
 8000242:	f000 fcd3 	bl	8000bec <HAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	2b01      	cmp	r3, #1
 800024a:	d104      	bne.n	8000256 <main+0x8a>
		  				  bot=bot+1;
 800024c:	4b3f      	ldr	r3, [pc, #252]	; (800034c <main+0x180>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	4a3e      	ldr	r2, [pc, #248]	; (800034c <main+0x180>)
 8000254:	6013      	str	r3, [r2, #0]
		  			  }

		  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000256:	2200      	movs	r2, #0
 8000258:	2140      	movs	r1, #64	; 0x40
 800025a:	483b      	ldr	r0, [pc, #236]	; (8000348 <main+0x17c>)
 800025c:	f000 fcde 	bl	8000c1c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000260:	2201      	movs	r2, #1
 8000262:	2102      	movs	r1, #2
 8000264:	4838      	ldr	r0, [pc, #224]	; (8000348 <main+0x17c>)
 8000266:	f000 fcd9 	bl	8000c1c <HAL_GPIO_WritePin>
		  	  HAL_Delay(1000-(bot*100));
 800026a:	4b38      	ldr	r3, [pc, #224]	; (800034c <main+0x180>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000272:	fb02 f303 	mul.w	r3, r2, r3
 8000276:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fa44 	bl	8000708 <HAL_Delay>
		  	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))==1){
 8000280:	2101      	movs	r1, #1
 8000282:	4831      	ldr	r0, [pc, #196]	; (8000348 <main+0x17c>)
 8000284:	f000 fcb2 	bl	8000bec <HAL_GPIO_ReadPin>
 8000288:	4603      	mov	r3, r0
 800028a:	2b01      	cmp	r3, #1
 800028c:	d104      	bne.n	8000298 <main+0xcc>
		  				  bot=bot+1;
 800028e:	4b2f      	ldr	r3, [pc, #188]	; (800034c <main+0x180>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3301      	adds	r3, #1
 8000294:	4a2d      	ldr	r2, [pc, #180]	; (800034c <main+0x180>)
 8000296:	6013      	str	r3, [r2, #0]
		  			  }

		  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000298:	2200      	movs	r2, #0
 800029a:	2102      	movs	r1, #2
 800029c:	482a      	ldr	r0, [pc, #168]	; (8000348 <main+0x17c>)
 800029e:	f000 fcbd 	bl	8000c1c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80002a2:	2201      	movs	r2, #1
 80002a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ac:	f000 fcb6 	bl	8000c1c <HAL_GPIO_WritePin>
		  	  HAL_Delay(1000-(bot*100));
 80002b0:	4b26      	ldr	r3, [pc, #152]	; (800034c <main+0x180>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80002b8:	fb02 f303 	mul.w	r3, r2, r3
 80002bc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fa21 	bl	8000708 <HAL_Delay>
		  	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))==1){
 80002c6:	2101      	movs	r1, #1
 80002c8:	481f      	ldr	r0, [pc, #124]	; (8000348 <main+0x17c>)
 80002ca:	f000 fc8f 	bl	8000bec <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d104      	bne.n	80002de <main+0x112>
		  				  bot=bot+1;
 80002d4:	4b1d      	ldr	r3, [pc, #116]	; (800034c <main+0x180>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3301      	adds	r3, #1
 80002da:	4a1c      	ldr	r2, [pc, #112]	; (800034c <main+0x180>)
 80002dc:	6013      	str	r3, [r2, #0]
		  			  }

		  	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f000 fc98 	bl	8000c1c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f6:	f000 fc91 	bl	8000c1c <HAL_GPIO_WritePin>
		  	  HAL_Delay(1000-(bot*100));
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <main+0x180>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000302:	fb02 f303 	mul.w	r3, r2, r3
 8000306:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800030a:	4618      	mov	r0, r3
 800030c:	f000 f9fc 	bl	8000708 <HAL_Delay>
		  	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))==1){
 8000310:	2101      	movs	r1, #1
 8000312:	480d      	ldr	r0, [pc, #52]	; (8000348 <main+0x17c>)
 8000314:	f000 fc6a 	bl	8000bec <HAL_GPIO_ReadPin>
 8000318:	4603      	mov	r3, r0
 800031a:	2b01      	cmp	r3, #1
 800031c:	d104      	bne.n	8000328 <main+0x15c>
		  				  bot=bot+1;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <main+0x180>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	3301      	adds	r3, #1
 8000324:	4a09      	ldr	r2, [pc, #36]	; (800034c <main+0x180>)
 8000326:	6013      	str	r3, [r2, #0]
		  			  }

		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800032e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000332:	f000 fc73 	bl	8000c1c <HAL_GPIO_WritePin>


		  	  if(bot>=10){
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <main+0x180>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b09      	cmp	r3, #9
 800033c:	f77f af4e 	ble.w	80001dc <main+0x10>
		  		  bot=1;
 8000340:	4b02      	ldr	r3, [pc, #8]	; (800034c <main+0x180>)
 8000342:	2201      	movs	r2, #1
 8000344:	601a      	str	r2, [r3, #0]
	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7))==1){
 8000346:	e749      	b.n	80001dc <main+0x10>
 8000348:	48000400 	.word	0x48000400
 800034c:	20000000 	.word	0x20000000

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b096      	sub	sp, #88	; 0x58
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	2244      	movs	r2, #68	; 0x44
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fae8 	bl	8001934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	463b      	mov	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000372:	2310      	movs	r3, #16
 8000374:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000376:	2301      	movs	r3, #1
 8000378:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800037e:	2360      	movs	r3, #96	; 0x60
 8000380:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000382:	2300      	movs	r3, #0
 8000384:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fcc2 	bl	8000d14 <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000396:	f000 f891 	bl	80004bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	230f      	movs	r3, #15
 800039c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800039e:	2300      	movs	r3, #0
 80003a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ae:	463b      	mov	r3, r7
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 f8ce 	bl	8001554 <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003be:	f000 f87d 	bl	80004bc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003c6:	f000 fc4f 	bl	8000c68 <HAL_PWREx_ControlVoltageScaling>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003d0:	f000 f874 	bl	80004bc <Error_Handler>
  }
}
 80003d4:	bf00      	nop
 80003d6:	3758      	adds	r7, #88	; 0x58
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f2:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <MX_GPIO_Init+0xd4>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	4a2e      	ldr	r2, [pc, #184]	; (80004b0 <MX_GPIO_Init+0xd4>)
 80003f8:	f043 0302 	orr.w	r3, r3, #2
 80003fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fe:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <MX_GPIO_Init+0xd4>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	f003 0302 	and.w	r3, r3, #2
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <MX_GPIO_Init+0xd4>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	4a28      	ldr	r2, [pc, #160]	; (80004b0 <MX_GPIO_Init+0xd4>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000416:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <MX_GPIO_Init+0xd4>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2152      	movs	r1, #82	; 0x52
 8000426:	4823      	ldr	r0, [pc, #140]	; (80004b4 <MX_GPIO_Init+0xd8>)
 8000428:	f000 fbf8 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000436:	f000 fbf1 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800043a:	2301      	movs	r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_GPIO_Init+0xdc>)
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000442:	2302      	movs	r3, #2
 8000444:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	4619      	mov	r1, r3
 800044c:	4819      	ldr	r0, [pc, #100]	; (80004b4 <MX_GPIO_Init+0xd8>)
 800044e:	f000 fa63 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8000452:	2352      	movs	r3, #82	; 0x52
 8000454:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000462:	f107 030c 	add.w	r3, r7, #12
 8000466:	4619      	mov	r1, r3
 8000468:	4812      	ldr	r0, [pc, #72]	; (80004b4 <MX_GPIO_Init+0xd8>)
 800046a:	f000 fa55 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800046e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	2301      	movs	r3, #1
 8000476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 030c 	add.w	r3, r7, #12
 8000484:	4619      	mov	r1, r3
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f000 fa45 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000496:	2302      	movs	r3, #2
 8000498:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	4619      	mov	r1, r3
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <MX_GPIO_Init+0xd8>)
 80004a2:	f000 fa39 	bl	8000918 <HAL_GPIO_Init>

}
 80004a6:	bf00      	nop
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000400 	.word	0x48000400
 80004b8:	10110000 	.word	0x10110000

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <Error_Handler+0x6>

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x44>)
 80004cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6613      	str	r3, [r2, #96]	; 0x60
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x44>)
 80004d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_MspInit+0x44>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <HAL_MspInit+0x44>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	6593      	str	r3, [r2, #88]	; 0x58
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_MspInit+0x44>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 f8b6 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <SystemInit+0x64>)
 8000566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <SystemInit+0x64>)
 800056c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <SystemInit+0x68>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <SystemInit+0x68>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <SystemInit+0x68>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <SystemInit+0x68>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <SystemInit+0x68>)
 800058c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000590:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000594:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <SystemInit+0x68>)
 8000598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800059c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <SystemInit+0x68>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <SystemInit+0x68>)
 80005a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <SystemInit+0x68>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <SystemInit+0x64>)
 80005b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005b6:	609a      	str	r2, [r3, #8]
#endif
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00
 80005c8:	40021000 	.word	0x40021000

080005cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000604 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d0:	f7ff ffc6 	bl	8000560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005d6:	e003      	b.n	80005e0 <LoopCopyDataInit>

080005d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005de:	3104      	adds	r1, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <LoopForever+0xa>)
	ldr	r3, =_edata
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005e8:	d3f6      	bcc.n	80005d8 <CopyDataInit>
	ldr	r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005ec:	e002      	b.n	80005f4 <LoopFillZerobss>

080005ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005f0:	f842 3b04 	str.w	r3, [r2], #4

080005f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <LoopForever+0x16>)
	cmp	r2, r3
 80005f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005f8:	d3f9      	bcc.n	80005ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fa:	f001 f977 	bl	80018ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005fe:	f7ff fde5 	bl	80001cc <main>

08000602 <LoopForever>:

LoopForever:
    b LoopForever
 8000602:	e7fe      	b.n	8000602 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000604:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000608:	080019a4 	.word	0x080019a4
	ldr	r0, =_sdata
 800060c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000610:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000614:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000618:	20000030 	.word	0x20000030

0800061c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_IRQHandler>

0800061e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f941 	bl	80008b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f80e 	bl	8000650 <HAL_InitTick>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d002      	beq.n	8000640 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	e001      	b.n	8000644 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000640:	f7ff ff40 	bl	80004c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000644:	79fb      	ldrb	r3, [r7, #7]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <HAL_InitTick+0x6c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d023      	beq.n	80006ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <HAL_InitTick+0x70>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_InitTick+0x6c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f93f 	bl	80008fe <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10f      	bne.n	80006a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b0f      	cmp	r3, #15
 800068a:	d809      	bhi.n	80006a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068c:	2200      	movs	r2, #0
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	f04f 30ff 	mov.w	r0, #4294967295
 8000694:	f000 f917 	bl	80008c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_InitTick+0x74>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	e007      	b.n	80006b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006a0:	2301      	movs	r3, #1
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e004      	b.n	80006b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	e001      	b.n	80006b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ac:	2301      	movs	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000000c 	.word	0x2000000c
 80006c0:	20000004 	.word	0x20000004
 80006c4:	20000008 	.word	0x20000008

080006c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_IncTick+0x20>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_IncTick+0x24>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <HAL_IncTick+0x24>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	2000002c 	.word	0x2000002c

080006f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return uwTick;
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <HAL_GetTick+0x14>)
 80006f6:	681b      	ldr	r3, [r3, #0]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	2000002c 	.word	0x2000002c

08000708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000710:	f7ff ffee 	bl	80006f0 <HAL_GetTick>
 8000714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000720:	d005      	beq.n	800072e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_Delay+0x40>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4413      	add	r3, r2
 800072c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800072e:	bf00      	nop
 8000730:	f7ff ffde 	bl	80006f0 <HAL_GetTick>
 8000734:	4602      	mov	r2, r0
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	429a      	cmp	r2, r3
 800073e:	d8f7      	bhi.n	8000730 <HAL_Delay+0x28>
  {
  }
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000000c 	.word	0x2000000c

0800074c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <__NVIC_SetPriorityGrouping+0x44>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <__NVIC_SetPriorityGrouping+0x44>)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	60d3      	str	r3, [r2, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <__NVIC_GetPriorityGrouping+0x18>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	f003 0307 	and.w	r3, r3, #7
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	db0a      	blt.n	80007da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	490c      	ldr	r1, [pc, #48]	; (80007fc <__NVIC_SetPriority+0x4c>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	0112      	lsls	r2, r2, #4
 80007d0:	b2d2      	uxtb	r2, r2
 80007d2:	440b      	add	r3, r1
 80007d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d8:	e00a      	b.n	80007f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4908      	ldr	r1, [pc, #32]	; (8000800 <__NVIC_SetPriority+0x50>)
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	f003 030f 	and.w	r3, r3, #15
 80007e6:	3b04      	subs	r3, #4
 80007e8:	0112      	lsls	r2, r2, #4
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	440b      	add	r3, r1
 80007ee:	761a      	strb	r2, [r3, #24]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000e100 	.word	0xe000e100
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000804:	b480      	push	{r7}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	f1c3 0307 	rsb	r3, r3, #7
 800081e:	2b04      	cmp	r3, #4
 8000820:	bf28      	it	cs
 8000822:	2304      	movcs	r3, #4
 8000824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3304      	adds	r3, #4
 800082a:	2b06      	cmp	r3, #6
 800082c:	d902      	bls.n	8000834 <NVIC_EncodePriority+0x30>
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3b03      	subs	r3, #3
 8000832:	e000      	b.n	8000836 <NVIC_EncodePriority+0x32>
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	f04f 32ff 	mov.w	r2, #4294967295
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43da      	mvns	r2, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	401a      	ands	r2, r3
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800084c:	f04f 31ff 	mov.w	r1, #4294967295
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	43d9      	mvns	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	4313      	orrs	r3, r2
         );
}
 800085e:	4618      	mov	r0, r3
 8000860:	3724      	adds	r7, #36	; 0x24
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800087c:	d301      	bcc.n	8000882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087e:	2301      	movs	r3, #1
 8000880:	e00f      	b.n	80008a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <SysTick_Config+0x40>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088a:	210f      	movs	r1, #15
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f7ff ff8e 	bl	80007b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <SysTick_Config+0x40>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <SysTick_Config+0x40>)
 800089c:	2207      	movs	r2, #7
 800089e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	e000e010 	.word	0xe000e010

080008b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff47 	bl	800074c <__NVIC_SetPriorityGrouping>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008d8:	f7ff ff5c 	bl	8000794 <__NVIC_GetPriorityGrouping>
 80008dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	6978      	ldr	r0, [r7, #20]
 80008e4:	f7ff ff8e 	bl	8000804 <NVIC_EncodePriority>
 80008e8:	4602      	mov	r2, r0
 80008ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff5d 	bl	80007b0 <__NVIC_SetPriority>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ffb0 	bl	800086c <SysTick_Config>
 800090c:	4603      	mov	r3, r0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b480      	push	{r7}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000926:	e148      	b.n	8000bba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	2101      	movs	r1, #1
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	4013      	ands	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 813a 	beq.w	8000bb4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d00b      	beq.n	8000960 <HAL_GPIO_Init+0x48>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d007      	beq.n	8000960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000954:	2b11      	cmp	r3, #17
 8000956:	d003      	beq.n	8000960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	2b12      	cmp	r3, #18
 800095e:	d130      	bne.n	80009c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000996:	2201      	movs	r2, #1
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	f003 0201 	and.w	r2, r3, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0xea>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d123      	bne.n	8000a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	08da      	lsrs	r2, r3, #3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3208      	adds	r2, #8
 8000a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	220f      	movs	r2, #15
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	691a      	ldr	r2, [r3, #16]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f003 0307 	and.w	r3, r3, #7
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	08da      	lsrs	r2, r3, #3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3208      	adds	r2, #8
 8000a44:	6939      	ldr	r1, [r7, #16]
 8000a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f003 0203 	and.w	r2, r3, #3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 8094 	beq.w	8000bb4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	4b52      	ldr	r3, [pc, #328]	; (8000bd8 <HAL_GPIO_Init+0x2c0>)
 8000a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a90:	4a51      	ldr	r2, [pc, #324]	; (8000bd8 <HAL_GPIO_Init+0x2c0>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6613      	str	r3, [r2, #96]	; 0x60
 8000a98:	4b4f      	ldr	r3, [pc, #316]	; (8000bd8 <HAL_GPIO_Init+0x2c0>)
 8000a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aa4:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <HAL_GPIO_Init+0x2c4>)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	220f      	movs	r2, #15
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ace:	d00d      	beq.n	8000aec <HAL_GPIO_Init+0x1d4>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a43      	ldr	r2, [pc, #268]	; (8000be0 <HAL_GPIO_Init+0x2c8>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d007      	beq.n	8000ae8 <HAL_GPIO_Init+0x1d0>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a42      	ldr	r2, [pc, #264]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d101      	bne.n	8000ae4 <HAL_GPIO_Init+0x1cc>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e004      	b.n	8000aee <HAL_GPIO_Init+0x1d6>
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x1d6>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <HAL_GPIO_Init+0x1d6>
 8000aec:	2300      	movs	r3, #0
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	f002 0203 	and.w	r2, r2, #3
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000afe:	4937      	ldr	r1, [pc, #220]	; (8000bdc <HAL_GPIO_Init+0x2c4>)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	3302      	adds	r3, #2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b0c:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b30:	4a2d      	ldr	r2, [pc, #180]	; (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b5a:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bae:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f47f aeaf 	bne.w	8000928 <HAL_GPIO_Init+0x10>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48000800 	.word	0x48000800
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	691a      	ldr	r2, [r3, #16]
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e001      	b.n	8000c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c38:	e002      	b.n	8000c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40007000 	.word	0x40007000

08000c68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c76:	d130      	bne.n	8000cda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c84:	d038      	beq.n	8000cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c8e:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2232      	movs	r2, #50	; 0x32
 8000c9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	0c9b      	lsrs	r3, r3, #18
 8000ca8:	3301      	adds	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cac:	e002      	b.n	8000cb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cc0:	d102      	bne.n	8000cc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f2      	bne.n	8000cae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd4:	d110      	bne.n	8000cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e00f      	b.n	8000cfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce6:	d007      	beq.n	8000cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cf0:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40007000 	.word	0x40007000
 8000d0c:	20000004 	.word	0x20000004
 8000d10:	431bde83 	.word	0x431bde83

08000d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	f000 bc11 	b.w	800154a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d28:	4ba0      	ldr	r3, [pc, #640]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d32:	4b9e      	ldr	r3, [pc, #632]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80e4 	beq.w	8000f12 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d007      	beq.n	8000d60 <HAL_RCC_OscConfig+0x4c>
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b0c      	cmp	r3, #12
 8000d54:	f040 808b 	bne.w	8000e6e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	f040 8087 	bne.w	8000e6e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d60:	4b92      	ldr	r3, [pc, #584]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <HAL_RCC_OscConfig+0x64>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e3e8      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a1a      	ldr	r2, [r3, #32]
 8000d7c:	4b8b      	ldr	r3, [pc, #556]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0308 	and.w	r3, r3, #8
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d004      	beq.n	8000d92 <HAL_RCC_OscConfig+0x7e>
 8000d88:	4b88      	ldr	r3, [pc, #544]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d90:	e005      	b.n	8000d9e <HAL_RCC_OscConfig+0x8a>
 8000d92:	4b86      	ldr	r3, [pc, #536]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d223      	bcs.n	8000dea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fd40 	bl	800182c <RCC_SetFlashLatencyFromMSIRange>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e3c9      	b.n	800154a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db6:	4b7d      	ldr	r3, [pc, #500]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a7c      	ldr	r2, [pc, #496]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	4b7a      	ldr	r3, [pc, #488]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	4977      	ldr	r1, [pc, #476]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd4:	4b75      	ldr	r3, [pc, #468]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	4972      	ldr	r1, [pc, #456]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]
 8000de8:	e025      	b.n	8000e36 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dea:	4b70      	ldr	r3, [pc, #448]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a6f      	ldr	r2, [pc, #444]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b6d      	ldr	r3, [pc, #436]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	496a      	ldr	r1, [pc, #424]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e08:	4b68      	ldr	r3, [pc, #416]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	4965      	ldr	r1, [pc, #404]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d109      	bne.n	8000e36 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fd00 	bl	800182c <RCC_SetFlashLatencyFromMSIRange>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e389      	b.n	800154a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e36:	f000 fc6f 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	4a5a      	ldr	r2, [pc, #360]	; (8000fb0 <HAL_RCC_OscConfig+0x29c>)
 8000e48:	5cd3      	ldrb	r3, [r2, r3]
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e52:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <HAL_RCC_OscConfig+0x2a0>)
 8000e54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e56:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fbf8 	bl	8000650 <HAL_InitTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d052      	beq.n	8000f10 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	e36d      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d032      	beq.n	8000edc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e76:	4b4d      	ldr	r3, [pc, #308]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a4c      	ldr	r2, [pc, #304]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fc35 	bl	80006f0 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fc31 	bl	80006f0 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e356      	b.n	800154a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e9c:	4b43      	ldr	r3, [pc, #268]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ea8:	4b40      	ldr	r3, [pc, #256]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a3f      	ldr	r2, [pc, #252]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b3d      	ldr	r3, [pc, #244]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	493a      	ldr	r1, [pc, #232]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	4935      	ldr	r1, [pc, #212]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	604b      	str	r3, [r1, #4]
 8000eda:	e01a      	b.n	8000f12 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a32      	ldr	r2, [pc, #200]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000ee2:	f023 0301 	bic.w	r3, r3, #1
 8000ee6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fc02 	bl	80006f0 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fbfe 	bl	80006f0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e323      	b.n	800154a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x1dc>
 8000f0e:	e000      	b.n	8000f12 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d073      	beq.n	8001006 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d005      	beq.n	8000f30 <HAL_RCC_OscConfig+0x21c>
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b0c      	cmp	r3, #12
 8000f28:	d10e      	bne.n	8000f48 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d10b      	bne.n	8000f48 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d063      	beq.n	8001004 <HAL_RCC_OscConfig+0x2f0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d15f      	bne.n	8001004 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e300      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f50:	d106      	bne.n	8000f60 <HAL_RCC_OscConfig+0x24c>
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e01d      	b.n	8000f9c <HAL_RCC_OscConfig+0x288>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x270>
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0x288>
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a05      	ldr	r2, [pc, #20]	; (8000fac <HAL_RCC_OscConfig+0x298>)
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d01b      	beq.n	8000fdc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fba4 	bl	80006f0 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000faa:	e010      	b.n	8000fce <HAL_RCC_OscConfig+0x2ba>
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	0800195c 	.word	0x0800195c
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fb98 	bl	80006f0 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e2bd      	b.n	800154a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fce:	4baf      	ldr	r3, [pc, #700]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f0      	beq.n	8000fbc <HAL_RCC_OscConfig+0x2a8>
 8000fda:	e014      	b.n	8001006 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fb88 	bl	80006f0 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fb84 	bl	80006f0 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	; 0x64
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e2a9      	b.n	800154a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ff6:	4ba5      	ldr	r3, [pc, #660]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2d0>
 8001002:	e000      	b.n	8001006 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d060      	beq.n	80010d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2b04      	cmp	r3, #4
 8001016:	d005      	beq.n	8001024 <HAL_RCC_OscConfig+0x310>
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	2b0c      	cmp	r3, #12
 800101c:	d119      	bne.n	8001052 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d116      	bne.n	8001052 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001024:	4b99      	ldr	r3, [pc, #612]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102c:	2b00      	cmp	r3, #0
 800102e:	d005      	beq.n	800103c <HAL_RCC_OscConfig+0x328>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e286      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	4b93      	ldr	r3, [pc, #588]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	061b      	lsls	r3, r3, #24
 800104a:	4990      	ldr	r1, [pc, #576]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001050:	e040      	b.n	80010d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d023      	beq.n	80010a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105a:	4b8c      	ldr	r3, [pc, #560]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a8b      	ldr	r2, [pc, #556]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001066:	f7ff fb43 	bl	80006f0 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fb3f 	bl	80006f0 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e264      	b.n	800154a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001080:	4b82      	ldr	r3, [pc, #520]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	4b7f      	ldr	r3, [pc, #508]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	061b      	lsls	r3, r3, #24
 800109a:	497c      	ldr	r1, [pc, #496]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]
 80010a0:	e018      	b.n	80010d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a2:	4b7a      	ldr	r3, [pc, #488]	; (800128c <HAL_RCC_OscConfig+0x578>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a79      	ldr	r2, [pc, #484]	; (800128c <HAL_RCC_OscConfig+0x578>)
 80010a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ae:	f7ff fb1f 	bl	80006f0 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fb1b 	bl	80006f0 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e240      	b.n	800154a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010c8:	4b70      	ldr	r3, [pc, #448]	; (800128c <HAL_RCC_OscConfig+0x578>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f0      	bne.n	80010b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d03c      	beq.n	800115a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d01c      	beq.n	8001122 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e8:	4b68      	ldr	r3, [pc, #416]	; (800128c <HAL_RCC_OscConfig+0x578>)
 80010ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ee:	4a67      	ldr	r2, [pc, #412]	; (800128c <HAL_RCC_OscConfig+0x578>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f8:	f7ff fafa 	bl	80006f0 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001100:	f7ff faf6 	bl	80006f0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e21b      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001112:	4b5e      	ldr	r3, [pc, #376]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8001114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0ef      	beq.n	8001100 <HAL_RCC_OscConfig+0x3ec>
 8001120:	e01b      	b.n	800115a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001122:	4b5a      	ldr	r3, [pc, #360]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8001124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001128:	4a58      	ldr	r2, [pc, #352]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800112a:	f023 0301 	bic.w	r3, r3, #1
 800112e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001132:	f7ff fadd 	bl	80006f0 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113a:	f7ff fad9 	bl	80006f0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e1fe      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800114c:	4b4f      	ldr	r3, [pc, #316]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800114e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1ef      	bne.n	800113a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80a6 	beq.w	80012b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800116c:	4b47      	ldr	r3, [pc, #284]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10d      	bne.n	8001194 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001178:	4b44      	ldr	r3, [pc, #272]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800117a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117c:	4a43      	ldr	r2, [pc, #268]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800117e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001182:	6593      	str	r3, [r2, #88]	; 0x58
 8001184:	4b41      	ldr	r3, [pc, #260]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8001186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001190:	2301      	movs	r3, #1
 8001192:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001194:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <HAL_RCC_OscConfig+0x57c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119c:	2b00      	cmp	r3, #0
 800119e:	d118      	bne.n	80011d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011a0:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <HAL_RCC_OscConfig+0x57c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a3a      	ldr	r2, [pc, #232]	; (8001290 <HAL_RCC_OscConfig+0x57c>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ac:	f7ff faa0 	bl	80006f0 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b4:	f7ff fa9c 	bl	80006f0 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1c1      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c6:	4b32      	ldr	r3, [pc, #200]	; (8001290 <HAL_RCC_OscConfig+0x57c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d108      	bne.n	80011ec <HAL_RCC_OscConfig+0x4d8>
 80011da:	4b2c      	ldr	r3, [pc, #176]	; (800128c <HAL_RCC_OscConfig+0x578>)
 80011dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e0:	4a2a      	ldr	r2, [pc, #168]	; (800128c <HAL_RCC_OscConfig+0x578>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ea:	e024      	b.n	8001236 <HAL_RCC_OscConfig+0x522>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d110      	bne.n	8001216 <HAL_RCC_OscConfig+0x502>
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <HAL_RCC_OscConfig+0x578>)
 80011f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fa:	4a24      	ldr	r2, [pc, #144]	; (800128c <HAL_RCC_OscConfig+0x578>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8001206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120a:	4a20      	ldr	r2, [pc, #128]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001214:	e00f      	b.n	8001236 <HAL_RCC_OscConfig+0x522>
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8001218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_RCC_OscConfig+0x578>)
 8001228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800122e:	f023 0304 	bic.w	r3, r3, #4
 8001232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d016      	beq.n	800126c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123e:	f7ff fa57 	bl	80006f0 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fa53 	bl	80006f0 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e176      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_RCC_OscConfig+0x578>)
 800125e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0ed      	beq.n	8001246 <HAL_RCC_OscConfig+0x532>
 800126a:	e01a      	b.n	80012a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126c:	f7ff fa40 	bl	80006f0 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001272:	e00f      	b.n	8001294 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f7ff fa3c 	bl	80006f0 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d906      	bls.n	8001294 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e15f      	b.n	800154a <HAL_RCC_OscConfig+0x836>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001294:	4baa      	ldr	r3, [pc, #680]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 8001296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1e8      	bne.n	8001274 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a8:	4ba5      	ldr	r3, [pc, #660]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	4aa4      	ldr	r2, [pc, #656]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80012ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d03c      	beq.n	800133a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d01c      	beq.n	8001302 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012c8:	4b9d      	ldr	r3, [pc, #628]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80012ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012ce:	4a9c      	ldr	r2, [pc, #624]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d8:	f7ff fa0a 	bl	80006f0 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e0:	f7ff fa06 	bl	80006f0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e12b      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012f2:	4b93      	ldr	r3, [pc, #588]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80012f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0ef      	beq.n	80012e0 <HAL_RCC_OscConfig+0x5cc>
 8001300:	e01b      	b.n	800133a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001302:	4b8f      	ldr	r3, [pc, #572]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 8001304:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001308:	4a8d      	ldr	r2, [pc, #564]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001312:	f7ff f9ed 	bl	80006f0 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800131a:	f7ff f9e9 	bl	80006f0 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e10e      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800132c:	4b84      	ldr	r3, [pc, #528]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 800132e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1ef      	bne.n	800131a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8102 	beq.w	8001548 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	2b02      	cmp	r3, #2
 800134a:	f040 80c5 	bne.w	80014d8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800134e:	4b7c      	ldr	r3, [pc, #496]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f003 0203 	and.w	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135e:	429a      	cmp	r2, r3
 8001360:	d12c      	bne.n	80013bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	3b01      	subs	r3, #1
 800136e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001370:	429a      	cmp	r2, r3
 8001372:	d123      	bne.n	80013bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001380:	429a      	cmp	r2, r3
 8001382:	d11b      	bne.n	80013bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001390:	429a      	cmp	r2, r3
 8001392:	d113      	bne.n	80013bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	3b01      	subs	r3, #1
 80013a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d109      	bne.n	80013bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	085b      	lsrs	r3, r3, #1
 80013b4:	3b01      	subs	r3, #1
 80013b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d067      	beq.n	800148c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b0c      	cmp	r3, #12
 80013c0:	d062      	beq.n	8001488 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013c2:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0bb      	b.n	800154a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013d2:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a5a      	ldr	r2, [pc, #360]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80013d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013de:	f7ff f987 	bl	80006f0 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff f983 	bl	80006f0 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e0a8      	b.n	800154a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f8:	4b51      	ldr	r3, [pc, #324]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001404:	4b4e      	ldr	r3, [pc, #312]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <HAL_RCC_OscConfig+0x830>)
 800140a:	4013      	ands	r3, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001414:	3a01      	subs	r2, #1
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	4311      	orrs	r1, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800141e:	0212      	lsls	r2, r2, #8
 8001420:	4311      	orrs	r1, r2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001426:	0852      	lsrs	r2, r2, #1
 8001428:	3a01      	subs	r2, #1
 800142a:	0552      	lsls	r2, r2, #21
 800142c:	4311      	orrs	r1, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001432:	0852      	lsrs	r2, r2, #1
 8001434:	3a01      	subs	r2, #1
 8001436:	0652      	lsls	r2, r2, #25
 8001438:	4311      	orrs	r1, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800143e:	06d2      	lsls	r2, r2, #27
 8001440:	430a      	orrs	r2, r1
 8001442:	493f      	ldr	r1, [pc, #252]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 8001444:	4313      	orrs	r3, r2
 8001446:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001448:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a3c      	ldr	r2, [pc, #240]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 800144e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001452:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001454:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a39      	ldr	r2, [pc, #228]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 800145a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001460:	f7ff f946 	bl	80006f0 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff f942 	bl	80006f0 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e067      	b.n	800154a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001486:	e05f      	b.n	8001548 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e05e      	b.n	800154a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148c:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d157      	bne.n	8001548 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001498:	4b29      	ldr	r3, [pc, #164]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a28      	ldr	r2, [pc, #160]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 800149e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4a25      	ldr	r2, [pc, #148]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80014aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014b0:	f7ff f91e 	bl	80006f0 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f91a 	bl	80006f0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e03f      	b.n	800154a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x7a4>
 80014d6:	e037      	b.n	8001548 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d02d      	beq.n	800153a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80014e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d105      	bne.n	8001502 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 80014fc:	f023 0303 	bic.w	r3, r3, #3
 8001500:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 8001508:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800150c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001510:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff f8ed 	bl	80006f0 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff f8e9 	bl	80006f0 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e00e      	b.n	800154a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_RCC_OscConfig+0x82c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x806>
 8001538:	e006      	b.n	8001548 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e005      	b.n	800154a <HAL_RCC_OscConfig+0x836>
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop

08001554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0c8      	b.n	80016fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b66      	ldr	r3, [pc, #408]	; (8001704 <HAL_RCC_ClockConfig+0x1b0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d910      	bls.n	8001598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b63      	ldr	r3, [pc, #396]	; (8001704 <HAL_RCC_ClockConfig+0x1b0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0207 	bic.w	r2, r3, #7
 800157e:	4961      	ldr	r1, [pc, #388]	; (8001704 <HAL_RCC_ClockConfig+0x1b0>)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <HAL_RCC_ClockConfig+0x1b0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b0      	b.n	80016fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d04c      	beq.n	800163e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d107      	bne.n	80015bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ac:	4b56      	ldr	r3, [pc, #344]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d121      	bne.n	80015fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e09e      	b.n	80016fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c4:	4b50      	ldr	r3, [pc, #320]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d115      	bne.n	80015fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e092      	b.n	80016fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d107      	bne.n	80015ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015dc:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e086      	b.n	80016fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ec:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e07e      	b.n	80016fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015fc:	4b42      	ldr	r3, [pc, #264]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 0203 	bic.w	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	493f      	ldr	r1, [pc, #252]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 800160a:	4313      	orrs	r3, r2
 800160c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800160e:	f7ff f86f 	bl	80006f0 <HAL_GetTick>
 8001612:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001614:	e00a      	b.n	800162c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001616:	f7ff f86b 	bl	80006f0 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e066      	b.n	80016fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 020c 	and.w	r2, r3, #12
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	429a      	cmp	r2, r3
 800163c:	d1eb      	bne.n	8001616 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	492c      	ldr	r1, [pc, #176]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_RCC_ClockConfig+0x1b0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d210      	bcs.n	800168c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_RCC_ClockConfig+0x1b0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 0207 	bic.w	r2, r3, #7
 8001672:	4924      	ldr	r1, [pc, #144]	; (8001704 <HAL_RCC_ClockConfig+0x1b0>)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_RCC_ClockConfig+0x1b0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e036      	b.n	80016fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4918      	ldr	r1, [pc, #96]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4910      	ldr	r1, [pc, #64]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ca:	f000 f825 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016ce:	4601      	mov	r1, r0
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4a0c      	ldr	r2, [pc, #48]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	fa21 f303 	lsr.w	r3, r1, r3
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ffae 	bl	8000650 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80016f8:	7afb      	ldrb	r3, [r7, #11]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40022000 	.word	0x40022000
 8001708:	40021000 	.word	0x40021000
 800170c:	0800195c 	.word	0x0800195c
 8001710:	20000004 	.word	0x20000004
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4b3d      	ldr	r3, [pc, #244]	; (800181c <HAL_RCC_GetSysClockFreq+0x104>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001730:	4b3a      	ldr	r3, [pc, #232]	; (800181c <HAL_RCC_GetSysClockFreq+0x104>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x34>
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d121      	bne.n	800178a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d11e      	bne.n	800178a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_RCC_GetSysClockFreq+0x104>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d107      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_RCC_GetSysClockFreq+0x104>)
 800175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	e005      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <HAL_RCC_GetSysClockFreq+0x104>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001774:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10d      	bne.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d102      	bne.n	8001796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	e004      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b08      	cmp	r3, #8
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_RCC_GetSysClockFreq+0x110>)
 800179e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d133      	bne.n	800180e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_RCC_GetSysClockFreq+0x104>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d002      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0xa4>
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d003      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0xaa>
 80017ba:	e005      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017be:	617b      	str	r3, [r7, #20]
      break;
 80017c0:	e005      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_GetSysClockFreq+0x110>)
 80017c4:	617b      	str	r3, [r7, #20]
      break;
 80017c6:	e002      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	617b      	str	r3, [r7, #20]
      break;
 80017cc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_RCC_GetSysClockFreq+0x104>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	3301      	adds	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_RCC_GetSysClockFreq+0x104>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	fb02 f203 	mul.w	r2, r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_RCC_GetSysClockFreq+0x104>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0e5b      	lsrs	r3, r3, #25
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	3301      	adds	r3, #1
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	fbb2 f3f3 	udiv	r3, r2, r3
 800180c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800180e:	69bb      	ldr	r3, [r7, #24]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3724      	adds	r7, #36	; 0x24
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40021000 	.word	0x40021000
 8001820:	0800196c 	.word	0x0800196c
 8001824:	00f42400 	.word	0x00f42400
 8001828:	007a1200 	.word	0x007a1200

0800182c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001844:	f7ff fa02 	bl	8000c4c <HAL_PWREx_GetVoltageRange>
 8001848:	6178      	str	r0, [r7, #20]
 800184a:	e014      	b.n	8001876 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	; 0x58
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001864:	f7ff f9f2 	bl	8000c4c <HAL_PWREx_GetVoltageRange>
 8001868:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d10b      	bne.n	8001896 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b80      	cmp	r3, #128	; 0x80
 8001882:	d919      	bls.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2ba0      	cmp	r3, #160	; 0xa0
 8001888:	d902      	bls.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800188a:	2302      	movs	r3, #2
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	e013      	b.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001890:	2301      	movs	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	e010      	b.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b80      	cmp	r3, #128	; 0x80
 800189a:	d902      	bls.n	80018a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800189c:	2303      	movs	r3, #3
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	e00a      	b.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b80      	cmp	r3, #128	; 0x80
 80018a6:	d102      	bne.n	80018ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018a8:	2302      	movs	r3, #2
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	e004      	b.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b70      	cmp	r3, #112	; 0x70
 80018b2:	d101      	bne.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018b4:	2301      	movs	r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 0207 	bic.w	r2, r3, #7
 80018c0:	4909      	ldr	r1, [pc, #36]	; (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d001      	beq.n	80018da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40022000 	.word	0x40022000

080018ec <__libc_init_array>:
 80018ec:	b570      	push	{r4, r5, r6, lr}
 80018ee:	4e0d      	ldr	r6, [pc, #52]	; (8001924 <__libc_init_array+0x38>)
 80018f0:	4c0d      	ldr	r4, [pc, #52]	; (8001928 <__libc_init_array+0x3c>)
 80018f2:	1ba4      	subs	r4, r4, r6
 80018f4:	10a4      	asrs	r4, r4, #2
 80018f6:	2500      	movs	r5, #0
 80018f8:	42a5      	cmp	r5, r4
 80018fa:	d109      	bne.n	8001910 <__libc_init_array+0x24>
 80018fc:	4e0b      	ldr	r6, [pc, #44]	; (800192c <__libc_init_array+0x40>)
 80018fe:	4c0c      	ldr	r4, [pc, #48]	; (8001930 <__libc_init_array+0x44>)
 8001900:	f000 f820 	bl	8001944 <_init>
 8001904:	1ba4      	subs	r4, r4, r6
 8001906:	10a4      	asrs	r4, r4, #2
 8001908:	2500      	movs	r5, #0
 800190a:	42a5      	cmp	r5, r4
 800190c:	d105      	bne.n	800191a <__libc_init_array+0x2e>
 800190e:	bd70      	pop	{r4, r5, r6, pc}
 8001910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001914:	4798      	blx	r3
 8001916:	3501      	adds	r5, #1
 8001918:	e7ee      	b.n	80018f8 <__libc_init_array+0xc>
 800191a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800191e:	4798      	blx	r3
 8001920:	3501      	adds	r5, #1
 8001922:	e7f2      	b.n	800190a <__libc_init_array+0x1e>
 8001924:	0800199c 	.word	0x0800199c
 8001928:	0800199c 	.word	0x0800199c
 800192c:	0800199c 	.word	0x0800199c
 8001930:	080019a0 	.word	0x080019a0

08001934 <memset>:
 8001934:	4402      	add	r2, r0
 8001936:	4603      	mov	r3, r0
 8001938:	4293      	cmp	r3, r2
 800193a:	d100      	bne.n	800193e <memset+0xa>
 800193c:	4770      	bx	lr
 800193e:	f803 1b01 	strb.w	r1, [r3], #1
 8001942:	e7f9      	b.n	8001938 <memset+0x4>

08001944 <_init>:
 8001944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001946:	bf00      	nop
 8001948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194a:	bc08      	pop	{r3}
 800194c:	469e      	mov	lr, r3
 800194e:	4770      	bx	lr

08001950 <_fini>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	bf00      	nop
 8001954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001956:	bc08      	pop	{r3}
 8001958:	469e      	mov	lr, r3
 800195a:	4770      	bx	lr
