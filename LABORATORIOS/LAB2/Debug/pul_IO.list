
pul_IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001770  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080018fc  080018fc  000118fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800193c  0800193c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800193c  0800193c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800193c  0800193c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800193c  0800193c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001940  08001940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  08001954  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001954  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005322  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fc5  00000000  00000000  00025362  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000530  00000000  00000000  00026328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000498  00000000  00000000  00026858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e3c3  00000000  00000000  00026cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000049fb  00000000  00000000  000450b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b71da  00000000  00000000  00049aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00100c88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012c4  00000000  00000000  00100d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080018e4 	.word	0x080018e4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	080018e4 	.word	0x080018e4

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 f9f5 	bl	80005be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f88c 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8d0 	bl	800037c <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7))==1){
 80001dc:	2180      	movs	r1, #128	; 0x80
 80001de:	4842      	ldr	r0, [pc, #264]	; (80002e8 <main+0x11c>)
 80001e0:	f000 fcd4 	bl	8000b8c <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d114      	bne.n	8000214 <main+0x48>
		  		  while (1){
		  			  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7))==0){
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	483e      	ldr	r0, [pc, #248]	; (80002e8 <main+0x11c>)
 80001ee:	f000 fccd 	bl	8000b8c <HAL_GPIO_ReadPin>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d1f8      	bne.n	80001ea <main+0x1e>
		  				  bot=bot+1;
 80001f8:	4b3c      	ldr	r3, [pc, #240]	; (80002ec <main+0x120>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	3301      	adds	r3, #1
 80001fe:	4a3b      	ldr	r2, [pc, #236]	; (80002ec <main+0x120>)
 8000200:	6013      	str	r3, [r2, #0]
		  				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000202:	2201      	movs	r2, #1
 8000204:	2110      	movs	r1, #16
 8000206:	4838      	ldr	r0, [pc, #224]	; (80002e8 <main+0x11c>)
 8000208:	f000 fcd8 	bl	8000bbc <HAL_GPIO_WritePin>
		  				HAL_Delay(300);
 800020c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000210:	f000 fa4a 	bl	80006a8 <HAL_Delay>
		  				  break;
		  			  }
		  		  }
		  	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000214:	2200      	movs	r2, #0
 8000216:	2110      	movs	r1, #16
 8000218:	4833      	ldr	r0, [pc, #204]	; (80002e8 <main+0x11c>)
 800021a:	f000 fccf 	bl	8000bbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800021e:	2201      	movs	r2, #1
 8000220:	2140      	movs	r1, #64	; 0x40
 8000222:	4831      	ldr	r0, [pc, #196]	; (80002e8 <main+0x11c>)
 8000224:	f000 fcca 	bl	8000bbc <HAL_GPIO_WritePin>
	  HAL_Delay(1000-(bot*100));
 8000228:	4b30      	ldr	r3, [pc, #192]	; (80002ec <main+0x120>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000230:	fb02 f303 	mul.w	r3, r2, r3
 8000234:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fa35 	bl	80006a8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2140      	movs	r1, #64	; 0x40
 8000242:	4829      	ldr	r0, [pc, #164]	; (80002e8 <main+0x11c>)
 8000244:	f000 fcba 	bl	8000bbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	2102      	movs	r1, #2
 800024c:	4826      	ldr	r0, [pc, #152]	; (80002e8 <main+0x11c>)
 800024e:	f000 fcb5 	bl	8000bbc <HAL_GPIO_WritePin>
	  HAL_Delay(1000-(bot*100));
 8000252:	4b26      	ldr	r3, [pc, #152]	; (80002ec <main+0x120>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800025a:	fb02 f303 	mul.w	r3, r2, r3
 800025e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fa20 	bl	80006a8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000268:	2200      	movs	r2, #0
 800026a:	2102      	movs	r1, #2
 800026c:	481e      	ldr	r0, [pc, #120]	; (80002e8 <main+0x11c>)
 800026e:	f000 fca5 	bl	8000bbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027c:	f000 fc9e 	bl	8000bbc <HAL_GPIO_WritePin>
	  HAL_Delay(1000-(bot*100));
 8000280:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <main+0x120>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000288:	fb02 f303 	mul.w	r3, r2, r3
 800028c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fa09 	bl	80006a8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f000 fc8c 	bl	8000bbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f000 fc85 	bl	8000bbc <HAL_GPIO_WritePin>
	  HAL_Delay(1000-(bot*100));
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <main+0x120>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80002ba:	fb02 f303 	mul.w	r3, r2, r3
 80002be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f9f0 	bl	80006a8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d2:	f000 fc73 	bl	8000bbc <HAL_GPIO_WritePin>

		  	  if(bot>=10){
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <main+0x120>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b09      	cmp	r3, #9
 80002dc:	f77f af7e 	ble.w	80001dc <main+0x10>
		  		  bot=1;
 80002e0:	4b02      	ldr	r3, [pc, #8]	; (80002ec <main+0x120>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	601a      	str	r2, [r3, #0]
	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7))==1){
 80002e6:	e779      	b.n	80001dc <main+0x10>
 80002e8:	48000400 	.word	0x48000400
 80002ec:	20000000 	.word	0x20000000

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b096      	sub	sp, #88	; 0x58
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	2244      	movs	r2, #68	; 0x44
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fae8 	bl	80018d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	463b      	mov	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000312:	2310      	movs	r3, #16
 8000314:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000316:	2301      	movs	r3, #1
 8000318:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800031e:	2360      	movs	r3, #96	; 0x60
 8000320:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000322:	2300      	movs	r3, #0
 8000324:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fcc2 	bl	8000cb4 <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000336:	f000 f891 	bl	800045c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800033e:	2300      	movs	r3, #0
 8000340:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034e:	463b      	mov	r3, r7
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f001 f8ce 	bl	80014f4 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800035e:	f000 f87d 	bl	800045c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000362:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000366:	f000 fc4f 	bl	8000c08 <HAL_PWREx_ControlVoltageScaling>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000370:	f000 f874 	bl	800045c <Error_Handler>
  }
}
 8000374:	bf00      	nop
 8000376:	3758      	adds	r7, #88	; 0x58
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000392:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <MX_GPIO_Init+0xd4>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	4a2e      	ldr	r2, [pc, #184]	; (8000450 <MX_GPIO_Init+0xd4>)
 8000398:	f043 0302 	orr.w	r3, r3, #2
 800039c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800039e:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <MX_GPIO_Init+0xd4>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	f003 0302 	and.w	r3, r3, #2
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003aa:	4b29      	ldr	r3, [pc, #164]	; (8000450 <MX_GPIO_Init+0xd4>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	4a28      	ldr	r2, [pc, #160]	; (8000450 <MX_GPIO_Init+0xd4>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003b6:	4b26      	ldr	r3, [pc, #152]	; (8000450 <MX_GPIO_Init+0xd4>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2152      	movs	r1, #82	; 0x52
 80003c6:	4823      	ldr	r0, [pc, #140]	; (8000454 <MX_GPIO_Init+0xd8>)
 80003c8:	f000 fbf8 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80003d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d6:	f000 fbf1 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003da:	2301      	movs	r3, #1
 80003dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003de:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <MX_GPIO_Init+0xdc>)
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003e2:	2302      	movs	r3, #2
 80003e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	4619      	mov	r1, r3
 80003ec:	4819      	ldr	r0, [pc, #100]	; (8000454 <MX_GPIO_Init+0xd8>)
 80003ee:	f000 fa63 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 80003f2:	2352      	movs	r3, #82	; 0x52
 80003f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	4619      	mov	r1, r3
 8000408:	4812      	ldr	r0, [pc, #72]	; (8000454 <MX_GPIO_Init+0xd8>)
 800040a:	f000 fa55 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800040e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000414:	2301      	movs	r3, #1
 8000416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	4619      	mov	r1, r3
 8000426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042a:	f000 fa45 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800042e:	2380      	movs	r3, #128	; 0x80
 8000430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000436:	2302      	movs	r3, #2
 8000438:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	4619      	mov	r1, r3
 8000440:	4804      	ldr	r0, [pc, #16]	; (8000454 <MX_GPIO_Init+0xd8>)
 8000442:	f000 fa39 	bl	80008b8 <HAL_GPIO_Init>

}
 8000446:	bf00      	nop
 8000448:	3720      	adds	r7, #32
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000
 8000454:	48000400 	.word	0x48000400
 8000458:	10110000 	.word	0x10110000

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000462:	e7fe      	b.n	8000462 <Error_Handler+0x6>

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <HAL_MspInit+0x44>)
 800046c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <HAL_MspInit+0x44>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6613      	str	r3, [r2, #96]	; 0x60
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <HAL_MspInit+0x44>)
 8000478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <HAL_MspInit+0x44>)
 8000484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000486:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <HAL_MspInit+0x44>)
 8000488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800048c:	6593      	str	r3, [r2, #88]	; 0x58
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <HAL_MspInit+0x44>)
 8000490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000

080004ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <NMI_Handler+0x4>

080004b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <HardFault_Handler+0x4>

080004b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <MemManage_Handler+0x4>

080004be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <BusFault_Handler+0x4>

080004c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <UsageFault_Handler+0x4>

080004ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f8:	f000 f8b6 	bl	8000668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <SystemInit+0x64>)
 8000506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <SystemInit+0x64>)
 800050c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <SystemInit+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a13      	ldr	r2, [pc, #76]	; (8000568 <SystemInit+0x68>)
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <SystemInit+0x68>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <SystemInit+0x68>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <SystemInit+0x68>)
 800052c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000530:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000534:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <SystemInit+0x68>)
 8000538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800053c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <SystemInit+0x68>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <SystemInit+0x68>)
 8000544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000548:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <SystemInit+0x68>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <SystemInit+0x64>)
 8000552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000556:	609a      	str	r2, [r3, #8]
#endif
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000ed00 	.word	0xe000ed00
 8000568:	40021000 	.word	0x40021000

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f7ff ffc6 	bl	8000500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000574:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000586:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
	ldr	r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800058e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f001 f977 	bl	800188c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f7ff fe15 	bl	80001cc <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80005a8:	08001944 	.word	0x08001944
	ldr	r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80005b4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80005b8:	20000030 	.word	0x20000030

080005bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_IRQHandler>

080005be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f941 	bl	8000850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f80e 	bl	80005f0 <HAL_InitTick>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	e001      	b.n	80005e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005e0:	f7ff ff40 	bl	8000464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005e4:	79fb      	ldrb	r3, [r7, #7]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <HAL_InitTick+0x6c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d023      	beq.n	800064c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <HAL_InitTick+0x70>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <HAL_InitTick+0x6c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	fbb3 f3f1 	udiv	r3, r3, r1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f93f 	bl	800089e <HAL_SYSTICK_Config>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d10f      	bne.n	8000646 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b0f      	cmp	r3, #15
 800062a:	d809      	bhi.n	8000640 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062c:	2200      	movs	r2, #0
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	f04f 30ff 	mov.w	r0, #4294967295
 8000634:	f000 f917 	bl	8000866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000638:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <HAL_InitTick+0x74>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	e007      	b.n	8000650 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	e004      	b.n	8000650 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e001      	b.n	8000650 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800064c:	2301      	movs	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000650:	7bfb      	ldrb	r3, [r7, #15]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000000c 	.word	0x2000000c
 8000660:	20000004 	.word	0x20000004
 8000664:	20000008 	.word	0x20000008

08000668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x20>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x24>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4413      	add	r3, r2
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <HAL_IncTick+0x24>)
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2000000c 	.word	0x2000000c
 800068c:	2000002c 	.word	0x2000002c

08000690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return uwTick;
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_GetTick+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	2000002c 	.word	0x2000002c

080006a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b0:	f7ff ffee 	bl	8000690 <HAL_GetTick>
 80006b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c0:	d005      	beq.n	80006ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_Delay+0x40>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4413      	add	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ce:	bf00      	nop
 80006d0:	f7ff ffde 	bl	8000690 <HAL_GetTick>
 80006d4:	4602      	mov	r2, r0
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8f7      	bhi.n	80006d0 <HAL_Delay+0x28>
  {
  }
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000000c 	.word	0x2000000c

080006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800081c:	d301      	bcc.n	8000822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081e:	2301      	movs	r3, #1
 8000820:	e00f      	b.n	8000842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <SysTick_Config+0x40>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082a:	210f      	movs	r1, #15
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f7ff ff8e 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <SysTick_Config+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <SysTick_Config+0x40>)
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff47 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000878:	f7ff ff5c 	bl	8000734 <__NVIC_GetPriorityGrouping>
 800087c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	6978      	ldr	r0, [r7, #20]
 8000884:	f7ff ff8e 	bl	80007a4 <NVIC_EncodePriority>
 8000888:	4602      	mov	r2, r0
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff5d 	bl	8000750 <__NVIC_SetPriority>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ffb0 	bl	800080c <SysTick_Config>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c6:	e148      	b.n	8000b5a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 813a 	beq.w	8000b54 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d00b      	beq.n	8000900 <HAL_GPIO_Init+0x48>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d007      	beq.n	8000900 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f4:	2b11      	cmp	r3, #17
 80008f6:	d003      	beq.n	8000900 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b12      	cmp	r3, #18
 80008fe:	d130      	bne.n	8000962 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000936:	2201      	movs	r2, #1
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	091b      	lsrs	r3, r3, #4
 800094c:	f003 0201 	and.w	r2, r3, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	2203      	movs	r2, #3
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	2b02      	cmp	r3, #2
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0xea>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	2b12      	cmp	r3, #18
 80009a0:	d123      	bne.n	80009ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	08da      	lsrs	r2, r3, #3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3208      	adds	r2, #8
 80009aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	220f      	movs	r2, #15
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	691a      	ldr	r2, [r3, #16]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	f003 0307 	and.w	r3, r3, #7
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	08da      	lsrs	r2, r3, #3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3208      	adds	r2, #8
 80009e4:	6939      	ldr	r1, [r7, #16]
 80009e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f003 0203 	and.w	r2, r3, #3
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 8094 	beq.w	8000b54 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2c:	4b52      	ldr	r3, [pc, #328]	; (8000b78 <HAL_GPIO_Init+0x2c0>)
 8000a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a30:	4a51      	ldr	r2, [pc, #324]	; (8000b78 <HAL_GPIO_Init+0x2c0>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6613      	str	r3, [r2, #96]	; 0x60
 8000a38:	4b4f      	ldr	r3, [pc, #316]	; (8000b78 <HAL_GPIO_Init+0x2c0>)
 8000a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a44:	4a4d      	ldr	r2, [pc, #308]	; (8000b7c <HAL_GPIO_Init+0x2c4>)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a6e:	d00d      	beq.n	8000a8c <HAL_GPIO_Init+0x1d4>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a43      	ldr	r2, [pc, #268]	; (8000b80 <HAL_GPIO_Init+0x2c8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d007      	beq.n	8000a88 <HAL_GPIO_Init+0x1d0>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a42      	ldr	r2, [pc, #264]	; (8000b84 <HAL_GPIO_Init+0x2cc>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d101      	bne.n	8000a84 <HAL_GPIO_Init+0x1cc>
 8000a80:	2302      	movs	r3, #2
 8000a82:	e004      	b.n	8000a8e <HAL_GPIO_Init+0x1d6>
 8000a84:	2307      	movs	r3, #7
 8000a86:	e002      	b.n	8000a8e <HAL_GPIO_Init+0x1d6>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e000      	b.n	8000a8e <HAL_GPIO_Init+0x1d6>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	f002 0203 	and.w	r2, r2, #3
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	4093      	lsls	r3, r2
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a9e:	4937      	ldr	r1, [pc, #220]	; (8000b7c <HAL_GPIO_Init+0x2c4>)
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000aac:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ad0:	4a2d      	ldr	r2, [pc, #180]	; (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b24:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3301      	adds	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	fa22 f303 	lsr.w	r3, r2, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f47f aeaf 	bne.w	80008c8 <HAL_GPIO_Init+0x10>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	371c      	adds	r7, #28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	48000400 	.word	0x48000400
 8000b84:	48000800 	.word	0x48000800
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691a      	ldr	r2, [r3, #16]
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e001      	b.n	8000bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bcc:	787b      	ldrb	r3, [r7, #1]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bd8:	e002      	b.n	8000be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40007000 	.word	0x40007000

08000c08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c16:	d130      	bne.n	8000c7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c24:	d038      	beq.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2232      	movs	r2, #50	; 0x32
 8000c3c:	fb02 f303 	mul.w	r3, r2, r3
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	0c9b      	lsrs	r3, r3, #18
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c4c:	e002      	b.n	8000c54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c60:	d102      	bne.n	8000c68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f2      	bne.n	8000c4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c74:	d110      	bne.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e00f      	b.n	8000c9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c86:	d007      	beq.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c90:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40007000 	.word	0x40007000
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	431bde83 	.word	0x431bde83

08000cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f000 bc11 	b.w	80014ea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cc8:	4ba0      	ldr	r3, [pc, #640]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 030c 	and.w	r3, r3, #12
 8000cd0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cd2:	4b9e      	ldr	r3, [pc, #632]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 80e4 	beq.w	8000eb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d007      	beq.n	8000d00 <HAL_RCC_OscConfig+0x4c>
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	2b0c      	cmp	r3, #12
 8000cf4:	f040 808b 	bne.w	8000e0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	f040 8087 	bne.w	8000e0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d00:	4b92      	ldr	r3, [pc, #584]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <HAL_RCC_OscConfig+0x64>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e3e8      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a1a      	ldr	r2, [r3, #32]
 8000d1c:	4b8b      	ldr	r3, [pc, #556]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <HAL_RCC_OscConfig+0x7e>
 8000d28:	4b88      	ldr	r3, [pc, #544]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d30:	e005      	b.n	8000d3e <HAL_RCC_OscConfig+0x8a>
 8000d32:	4b86      	ldr	r3, [pc, #536]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d223      	bcs.n	8000d8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fd40 	bl	80017cc <RCC_SetFlashLatencyFromMSIRange>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e3c9      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d56:	4b7d      	ldr	r3, [pc, #500]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a7c      	ldr	r2, [pc, #496]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b7a      	ldr	r3, [pc, #488]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a1b      	ldr	r3, [r3, #32]
 8000d6e:	4977      	ldr	r1, [pc, #476]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d74:	4b75      	ldr	r3, [pc, #468]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	4972      	ldr	r1, [pc, #456]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]
 8000d88:	e025      	b.n	8000dd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d8a:	4b70      	ldr	r3, [pc, #448]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a6f      	ldr	r2, [pc, #444]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b6d      	ldr	r3, [pc, #436]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a1b      	ldr	r3, [r3, #32]
 8000da2:	496a      	ldr	r1, [pc, #424]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000da4:	4313      	orrs	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000da8:	4b68      	ldr	r3, [pc, #416]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	4965      	ldr	r1, [pc, #404]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d109      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fd00 	bl	80017cc <RCC_SetFlashLatencyFromMSIRange>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e389      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dd6:	f000 fc6f 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 8000dda:	4601      	mov	r1, r0
 8000ddc:	4b5b      	ldr	r3, [pc, #364]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	4a5a      	ldr	r2, [pc, #360]	; (8000f50 <HAL_RCC_OscConfig+0x29c>)
 8000de8:	5cd3      	ldrb	r3, [r2, r3]
 8000dea:	f003 031f 	and.w	r3, r3, #31
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	4a58      	ldr	r2, [pc, #352]	; (8000f54 <HAL_RCC_OscConfig+0x2a0>)
 8000df4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000df6:	4b58      	ldr	r3, [pc, #352]	; (8000f58 <HAL_RCC_OscConfig+0x2a4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fbf8 	bl	80005f0 <HAL_InitTick>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d052      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	e36d      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d032      	beq.n	8000e7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e16:	4b4d      	ldr	r3, [pc, #308]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a4c      	ldr	r2, [pc, #304]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e22:	f7ff fc35 	bl	8000690 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e28:	e008      	b.n	8000e3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e2a:	f7ff fc31 	bl	8000690 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e356      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e3c:	4b43      	ldr	r3, [pc, #268]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f0      	beq.n	8000e2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e48:	4b40      	ldr	r3, [pc, #256]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a3f      	ldr	r2, [pc, #252]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	493a      	ldr	r1, [pc, #232]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	4935      	ldr	r1, [pc, #212]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e76:	4313      	orrs	r3, r2
 8000e78:	604b      	str	r3, [r1, #4]
 8000e7a:	e01a      	b.n	8000eb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e7c:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a32      	ldr	r2, [pc, #200]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fc02 	bl	8000690 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e90:	f7ff fbfe 	bl	8000690 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e323      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f0      	bne.n	8000e90 <HAL_RCC_OscConfig+0x1dc>
 8000eae:	e000      	b.n	8000eb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d073      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d005      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x21c>
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	2b0c      	cmp	r3, #12
 8000ec8:	d10e      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d10b      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d063      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d15f      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e300      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef0:	d106      	bne.n	8000f00 <HAL_RCC_OscConfig+0x24c>
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e01d      	b.n	8000f3c <HAL_RCC_OscConfig+0x288>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x270>
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e00b      	b.n	8000f3c <HAL_RCC_OscConfig+0x288>
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d01b      	beq.n	8000f7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f44:	f7ff fba4 	bl	8000690 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f4a:	e010      	b.n	8000f6e <HAL_RCC_OscConfig+0x2ba>
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	080018fc 	.word	0x080018fc
 8000f54:	20000004 	.word	0x20000004
 8000f58:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fb98 	bl	8000690 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e2bd      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f6e:	4baf      	ldr	r3, [pc, #700]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0x2a8>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fb88 	bl	8000690 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fb84 	bl	8000690 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e2a9      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f96:	4ba5      	ldr	r3, [pc, #660]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x2d0>
 8000fa2:	e000      	b.n	8000fa6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d060      	beq.n	8001074 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d005      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x310>
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	d119      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d116      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fc4:	4b99      	ldr	r3, [pc, #612]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_RCC_OscConfig+0x328>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e286      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fdc:	4b93      	ldr	r3, [pc, #588]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	061b      	lsls	r3, r3, #24
 8000fea:	4990      	ldr	r1, [pc, #576]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff0:	e040      	b.n	8001074 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d023      	beq.n	8001042 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ffa:	4b8c      	ldr	r3, [pc, #560]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a8b      	ldr	r2, [pc, #556]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fb43 	bl	8000690 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fb3f 	bl	8000690 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e264      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001020:	4b82      	ldr	r3, [pc, #520]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	4b7f      	ldr	r3, [pc, #508]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	061b      	lsls	r3, r3, #24
 800103a:	497c      	ldr	r1, [pc, #496]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
 8001040:	e018      	b.n	8001074 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001042:	4b7a      	ldr	r3, [pc, #488]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a79      	ldr	r2, [pc, #484]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800104c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104e:	f7ff fb1f 	bl	8000690 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001056:	f7ff fb1b 	bl	8000690 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e240      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001068:	4b70      	ldr	r3, [pc, #448]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f0      	bne.n	8001056 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d03c      	beq.n	80010fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01c      	beq.n	80010c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001088:	4b68      	ldr	r3, [pc, #416]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800108a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800108e:	4a67      	ldr	r2, [pc, #412]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001098:	f7ff fafa 	bl	8000690 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a0:	f7ff faf6 	bl	8000690 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e21b      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010b2:	4b5e      	ldr	r3, [pc, #376]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80010b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0ef      	beq.n	80010a0 <HAL_RCC_OscConfig+0x3ec>
 80010c0:	e01b      	b.n	80010fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c2:	4b5a      	ldr	r3, [pc, #360]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80010c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c8:	4a58      	ldr	r2, [pc, #352]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d2:	f7ff fadd 	bl	8000690 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010da:	f7ff fad9 	bl	8000690 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e1fe      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010ec:	4b4f      	ldr	r3, [pc, #316]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80010ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1ef      	bne.n	80010da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 80a6 	beq.w	8001254 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800110c:	4b47      	ldr	r3, [pc, #284]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10d      	bne.n	8001134 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800111a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111c:	4a43      	ldr	r2, [pc, #268]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800111e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001122:	6593      	str	r3, [r2, #88]	; 0x58
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001130:	2301      	movs	r3, #1
 8001132:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001134:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <HAL_RCC_OscConfig+0x57c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	2b00      	cmp	r3, #0
 800113e:	d118      	bne.n	8001172 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001140:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_RCC_OscConfig+0x57c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <HAL_RCC_OscConfig+0x57c>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114c:	f7ff faa0 	bl	8000690 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001154:	f7ff fa9c 	bl	8000690 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1c1      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <HAL_RCC_OscConfig+0x57c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <HAL_RCC_OscConfig+0x4d8>
 800117a:	4b2c      	ldr	r3, [pc, #176]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800117c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001180:	4a2a      	ldr	r2, [pc, #168]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800118a:	e024      	b.n	80011d6 <HAL_RCC_OscConfig+0x522>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d110      	bne.n	80011b6 <HAL_RCC_OscConfig+0x502>
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119a:	4a24      	ldr	r2, [pc, #144]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011aa:	4a20      	ldr	r2, [pc, #128]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011b4:	e00f      	b.n	80011d6 <HAL_RCC_OscConfig+0x522>
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011be:	f023 0301 	bic.w	r3, r3, #1
 80011c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011cc:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011ce:	f023 0304 	bic.w	r3, r3, #4
 80011d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d016      	beq.n	800120c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011de:	f7ff fa57 	bl	8000690 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e4:	e00a      	b.n	80011fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e6:	f7ff fa53 	bl	8000690 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e176      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0ed      	beq.n	80011e6 <HAL_RCC_OscConfig+0x532>
 800120a:	e01a      	b.n	8001242 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fa40 	bl	8000690 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001212:	e00f      	b.n	8001234 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fa3c 	bl	8000690 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001222:	4293      	cmp	r3, r2
 8001224:	d906      	bls.n	8001234 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e15f      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001234:	4baa      	ldr	r3, [pc, #680]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1e8      	bne.n	8001214 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001242:	7ffb      	ldrb	r3, [r7, #31]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d105      	bne.n	8001254 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001248:	4ba5      	ldr	r3, [pc, #660]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	4aa4      	ldr	r2, [pc, #656]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800124e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001252:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	2b00      	cmp	r3, #0
 800125e:	d03c      	beq.n	80012da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	2b00      	cmp	r3, #0
 8001266:	d01c      	beq.n	80012a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001268:	4b9d      	ldr	r3, [pc, #628]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800126a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800126e:	4a9c      	ldr	r2, [pc, #624]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001278:	f7ff fa0a 	bl	8000690 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001280:	f7ff fa06 	bl	8000690 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e12b      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001292:	4b93      	ldr	r3, [pc, #588]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 8001294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0ef      	beq.n	8001280 <HAL_RCC_OscConfig+0x5cc>
 80012a0:	e01b      	b.n	80012da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012a2:	4b8f      	ldr	r3, [pc, #572]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80012a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012a8:	4a8d      	ldr	r2, [pc, #564]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b2:	f7ff f9ed 	bl	8000690 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ba:	f7ff f9e9 	bl	8000690 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e10e      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012cc:	4b84      	ldr	r3, [pc, #528]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80012ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ef      	bne.n	80012ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8102 	beq.w	80014e8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	f040 80c5 	bne.w	8001478 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012ee:	4b7c      	ldr	r3, [pc, #496]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f003 0203 	and.w	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	429a      	cmp	r2, r3
 8001300:	d12c      	bne.n	800135c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	3b01      	subs	r3, #1
 800130e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001310:	429a      	cmp	r2, r3
 8001312:	d123      	bne.n	800135c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001320:	429a      	cmp	r2, r3
 8001322:	d11b      	bne.n	800135c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001330:	429a      	cmp	r2, r3
 8001332:	d113      	bne.n	800135c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133e:	085b      	lsrs	r3, r3, #1
 8001340:	3b01      	subs	r3, #1
 8001342:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001344:	429a      	cmp	r2, r3
 8001346:	d109      	bne.n	800135c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	085b      	lsrs	r3, r3, #1
 8001354:	3b01      	subs	r3, #1
 8001356:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d067      	beq.n	800142c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b0c      	cmp	r3, #12
 8001360:	d062      	beq.n	8001428 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e0bb      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001372:	4b5b      	ldr	r3, [pc, #364]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a5a      	ldr	r2, [pc, #360]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 8001378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800137c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800137e:	f7ff f987 	bl	8000690 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff f983 	bl	8000690 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0a8      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001398:	4b51      	ldr	r3, [pc, #324]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a4:	4b4e      	ldr	r3, [pc, #312]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <HAL_RCC_OscConfig+0x830>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013b4:	3a01      	subs	r2, #1
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	4311      	orrs	r1, r2
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013be:	0212      	lsls	r2, r2, #8
 80013c0:	4311      	orrs	r1, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013c6:	0852      	lsrs	r2, r2, #1
 80013c8:	3a01      	subs	r2, #1
 80013ca:	0552      	lsls	r2, r2, #21
 80013cc:	4311      	orrs	r1, r2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013d2:	0852      	lsrs	r2, r2, #1
 80013d4:	3a01      	subs	r2, #1
 80013d6:	0652      	lsls	r2, r2, #25
 80013d8:	4311      	orrs	r1, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013de:	06d2      	lsls	r2, r2, #27
 80013e0:	430a      	orrs	r2, r1
 80013e2:	493f      	ldr	r1, [pc, #252]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a3c      	ldr	r2, [pc, #240]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80013ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013f4:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4a39      	ldr	r2, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80013fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001400:	f7ff f946 	bl	8000690 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff f942 	bl	8000690 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e067      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001426:	e05f      	b.n	80014e8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e05e      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d157      	bne.n	80014e8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a28      	ldr	r2, [pc, #160]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800143e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001442:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4a25      	ldr	r2, [pc, #148]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800144a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001450:	f7ff f91e 	bl	8000690 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff f91a 	bl	8000690 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e03f      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x7a4>
 8001476:	e037      	b.n	80014e8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d02d      	beq.n	80014da <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 8001484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001488:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d105      	bne.n	80014a2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 800149c:	f023 0303 	bic.w	r3, r3, #3
 80014a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80014a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff f8ed 	bl	8000690 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff f8e9 	bl	8000690 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e00e      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_RCC_OscConfig+0x82c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x806>
 80014d8:	e006      	b.n	80014e8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e005      	b.n	80014ea <HAL_RCC_OscConfig+0x836>
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop

080014f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0c8      	b.n	800169a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <HAL_RCC_ClockConfig+0x1b0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d910      	bls.n	8001538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 0207 	bic.w	r2, r3, #7
 800151e:	4961      	ldr	r1, [pc, #388]	; (80016a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0b0      	b.n	800169a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d04c      	beq.n	80015de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d107      	bne.n	800155c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154c:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d121      	bne.n	800159c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e09e      	b.n	800169a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d107      	bne.n	8001574 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001564:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d115      	bne.n	800159c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e092      	b.n	800169a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d107      	bne.n	800158c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800157c:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d109      	bne.n	800159c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e086      	b.n	800169a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158c:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e07e      	b.n	800169a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800159c:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f023 0203 	bic.w	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	493f      	ldr	r1, [pc, #252]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015ae:	f7ff f86f 	bl	8000690 <HAL_GetTick>
 80015b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b6:	f7ff f86b 	bl	8000690 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e066      	b.n	800169a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015cc:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 020c 	and.w	r2, r3, #12
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	429a      	cmp	r2, r3
 80015dc:	d1eb      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ea:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	492c      	ldr	r1, [pc, #176]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_RCC_ClockConfig+0x1b0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d210      	bcs.n	800162c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_RCC_ClockConfig+0x1b0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 0207 	bic.w	r2, r3, #7
 8001612:	4924      	ldr	r1, [pc, #144]	; (80016a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_RCC_ClockConfig+0x1b0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e036      	b.n	800169a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4918      	ldr	r1, [pc, #96]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d009      	beq.n	800166a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4910      	ldr	r1, [pc, #64]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800166a:	f000 f825 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 800166e:	4601      	mov	r1, r0
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	fa21 f303 	lsr.w	r3, r1, r3
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ffae 	bl	80005f0 <HAL_InitTick>
 8001694:	4603      	mov	r3, r0
 8001696:	72fb      	strb	r3, [r7, #11]

  return status;
 8001698:	7afb      	ldrb	r3, [r7, #11]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40022000 	.word	0x40022000
 80016a8:	40021000 	.word	0x40021000
 80016ac:	080018fc 	.word	0x080018fc
 80016b0:	20000004 	.word	0x20000004
 80016b4:	20000008 	.word	0x20000008

080016b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_GetSysClockFreq+0x104>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d0:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <HAL_RCC_GetSysClockFreq+0x104>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x34>
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d121      	bne.n	800172a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d11e      	bne.n	800172a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016ec:	4b33      	ldr	r3, [pc, #204]	; (80017bc <HAL_RCC_GetSysClockFreq+0x104>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016f8:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_RCC_GetSysClockFreq+0x104>)
 80016fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	e005      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001708:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <HAL_RCC_GetSysClockFreq+0x104>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001714:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10d      	bne.n	8001740 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d102      	bne.n	8001736 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	e004      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b08      	cmp	r3, #8
 800173a:	d101      	bne.n	8001740 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800173e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d133      	bne.n	80017ae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_GetSysClockFreq+0x104>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d002      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0xa4>
 8001756:	2b03      	cmp	r3, #3
 8001758:	d003      	beq.n	8001762 <HAL_RCC_GetSysClockFreq+0xaa>
 800175a:	e005      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800175e:	617b      	str	r3, [r7, #20]
      break;
 8001760:	e005      	b.n	800176e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001764:	617b      	str	r3, [r7, #20]
      break;
 8001766:	e002      	b.n	800176e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	617b      	str	r3, [r7, #20]
      break;
 800176c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_RCC_GetSysClockFreq+0x104>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	3301      	adds	r3, #1
 800177a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_RCC_GetSysClockFreq+0x104>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	fb02 f203 	mul.w	r2, r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_GetSysClockFreq+0x104>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0e5b      	lsrs	r3, r3, #25
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	3301      	adds	r3, #1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017ae:	69bb      	ldr	r3, [r7, #24]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3724      	adds	r7, #36	; 0x24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000
 80017c0:	0800190c 	.word	0x0800190c
 80017c4:	00f42400 	.word	0x00f42400
 80017c8:	007a1200 	.word	0x007a1200

080017cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017e4:	f7ff fa02 	bl	8000bec <HAL_PWREx_GetVoltageRange>
 80017e8:	6178      	str	r0, [r7, #20]
 80017ea:	e014      	b.n	8001816 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	4a24      	ldr	r2, [pc, #144]	; (8001884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6593      	str	r3, [r2, #88]	; 0x58
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001804:	f7ff f9f2 	bl	8000bec <HAL_PWREx_GetVoltageRange>
 8001808:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800181c:	d10b      	bne.n	8001836 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b80      	cmp	r3, #128	; 0x80
 8001822:	d919      	bls.n	8001858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2ba0      	cmp	r3, #160	; 0xa0
 8001828:	d902      	bls.n	8001830 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800182a:	2302      	movs	r3, #2
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	e013      	b.n	8001858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001830:	2301      	movs	r3, #1
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	e010      	b.n	8001858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b80      	cmp	r3, #128	; 0x80
 800183a:	d902      	bls.n	8001842 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800183c:	2303      	movs	r3, #3
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	e00a      	b.n	8001858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b80      	cmp	r3, #128	; 0x80
 8001846:	d102      	bne.n	800184e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001848:	2302      	movs	r3, #2
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	e004      	b.n	8001858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b70      	cmp	r3, #112	; 0x70
 8001852:	d101      	bne.n	8001858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001854:	2301      	movs	r3, #1
 8001856:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 0207 	bic.w	r2, r3, #7
 8001860:	4909      	ldr	r1, [pc, #36]	; (8001888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	429a      	cmp	r2, r3
 8001874:	d001      	beq.n	800187a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	40022000 	.word	0x40022000

0800188c <__libc_init_array>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	4e0d      	ldr	r6, [pc, #52]	; (80018c4 <__libc_init_array+0x38>)
 8001890:	4c0d      	ldr	r4, [pc, #52]	; (80018c8 <__libc_init_array+0x3c>)
 8001892:	1ba4      	subs	r4, r4, r6
 8001894:	10a4      	asrs	r4, r4, #2
 8001896:	2500      	movs	r5, #0
 8001898:	42a5      	cmp	r5, r4
 800189a:	d109      	bne.n	80018b0 <__libc_init_array+0x24>
 800189c:	4e0b      	ldr	r6, [pc, #44]	; (80018cc <__libc_init_array+0x40>)
 800189e:	4c0c      	ldr	r4, [pc, #48]	; (80018d0 <__libc_init_array+0x44>)
 80018a0:	f000 f820 	bl	80018e4 <_init>
 80018a4:	1ba4      	subs	r4, r4, r6
 80018a6:	10a4      	asrs	r4, r4, #2
 80018a8:	2500      	movs	r5, #0
 80018aa:	42a5      	cmp	r5, r4
 80018ac:	d105      	bne.n	80018ba <__libc_init_array+0x2e>
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
 80018b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018b4:	4798      	blx	r3
 80018b6:	3501      	adds	r5, #1
 80018b8:	e7ee      	b.n	8001898 <__libc_init_array+0xc>
 80018ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018be:	4798      	blx	r3
 80018c0:	3501      	adds	r5, #1
 80018c2:	e7f2      	b.n	80018aa <__libc_init_array+0x1e>
 80018c4:	0800193c 	.word	0x0800193c
 80018c8:	0800193c 	.word	0x0800193c
 80018cc:	0800193c 	.word	0x0800193c
 80018d0:	08001940 	.word	0x08001940

080018d4 <memset>:
 80018d4:	4402      	add	r2, r0
 80018d6:	4603      	mov	r3, r0
 80018d8:	4293      	cmp	r3, r2
 80018da:	d100      	bne.n	80018de <memset+0xa>
 80018dc:	4770      	bx	lr
 80018de:	f803 1b01 	strb.w	r1, [r3], #1
 80018e2:	e7f9      	b.n	80018d8 <memset+0x4>

080018e4 <_init>:
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e6:	bf00      	nop
 80018e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ea:	bc08      	pop	{r3}
 80018ec:	469e      	mov	lr, r3
 80018ee:	4770      	bx	lr

080018f0 <_fini>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	bf00      	nop
 80018f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f6:	bc08      	pop	{r3}
 80018f8:	469e      	mov	lr, r3
 80018fa:	4770      	bx	lr
