
sd_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009144  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  080092d4  080092d4  000192d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ae4  08009ae4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009ae4  08009ae4  00019ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aec  08009aec  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002468  20000088  08009b7c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024f0  08009b7c  000224f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011111  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a2  00000000  00000000  000311c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00033870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  000346f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ec4  00000000  00000000  00035468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014276  00000000  00000000  0005732c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4189  00000000  00000000  0006b5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f72b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fdc  00000000  00000000  0012f77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092bc 	.word	0x080092bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080092bc 	.word	0x080092bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2101      	movs	r1, #1
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <SELECT+0x18>)
 8000b9a:	f001 fc3f 	bl	800241c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f001 f9c8 	bl	8001f34 <HAL_Delay>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	48000400 	.word	0x48000400

08000bac <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <DESELECT+0x18>)
 8000bb6:	f001 fc31 	bl	800241c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f001 f9ba 	bl	8001f34 <HAL_Delay>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bd2:	bf00      	nop
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <SPI_TxByte+0x30>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d1f8      	bne.n	8000bd4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000be2:	1df9      	adds	r1, r7, #7
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	2201      	movs	r2, #1
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <SPI_TxByte+0x30>)
 8000bea:	f002 fe56 	bl	800389a <HAL_SPI_Transmit>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000a8 	.word	0x200000a8

08000bfc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c08:	bf00      	nop
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <SPI_TxBuffer+0x30>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d1f8      	bne.n	8000c0a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c18:	887a      	ldrh	r2, [r7, #2]
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <SPI_TxBuffer+0x30>)
 8000c20:	f002 fe3b 	bl	800389a <HAL_SPI_Transmit>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200000a8 	.word	0x200000a8

08000c30 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c36:	23ff      	movs	r3, #255	; 0xff
 8000c38:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c3a:	bf00      	nop
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <SPI_RxByte+0x34>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d1f8      	bne.n	8000c3c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c4a:	1dba      	adds	r2, r7, #6
 8000c4c:	1df9      	adds	r1, r7, #7
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2301      	movs	r3, #1
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <SPI_RxByte+0x34>)
 8000c56:	f002 ff8e 	bl	8003b76 <HAL_SPI_TransmitReceive>

	return data;
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200000a8 	.word	0x200000a8

08000c68 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c70:	f7ff ffde 	bl	8000c30 <SPI_RxByte>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	701a      	strb	r2, [r3, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SD_ReadyWait+0x30>)
 8000c8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c90:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000c92:	f7ff ffcd 	bl	8000c30 <SPI_RxByte>
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2bff      	cmp	r3, #255	; 0xff
 8000c9e:	d004      	beq.n	8000caa <SD_ReadyWait+0x26>
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SD_ReadyWait+0x30>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f3      	bne.n	8000c92 <SD_ReadyWait+0xe>

	return res;
 8000caa:	79fb      	ldrb	r3, [r7, #7]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20002298 	.word	0x20002298

08000cb8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cbe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cc2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cc4:	f7ff ff72 	bl	8000bac <DESELECT>
	for(int i = 0; i < 10; i++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	e005      	b.n	8000cda <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000cce:	20ff      	movs	r0, #255	; 0xff
 8000cd0:	f7ff ff7a 	bl	8000bc8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	2b09      	cmp	r3, #9
 8000cde:	ddf6      	ble.n	8000cce <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000ce0:	f7ff ff56 	bl	8000b90 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000ce4:	2340      	movs	r3, #64	; 0x40
 8000ce6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000cf8:	2395      	movs	r3, #149	; 0x95
 8000cfa:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2106      	movs	r1, #6
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff7b 	bl	8000bfc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d06:	e002      	b.n	8000d0e <SD_PowerOn+0x56>
	{
		cnt--;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d0e:	f7ff ff8f 	bl	8000c30 <SPI_RxByte>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d002      	beq.n	8000d1e <SD_PowerOn+0x66>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f4      	bne.n	8000d08 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d1e:	f7ff ff45 	bl	8000bac <DESELECT>
	SPI_TxByte(0XFF);
 8000d22:	20ff      	movs	r0, #255	; 0xff
 8000d24:	f7ff ff50 	bl	8000bc8 <SPI_TxByte>

	PowerFlag = 1;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <SD_PowerOn+0x80>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000a5 	.word	0x200000a5

08000d3c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <SD_PowerOff+0x14>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	200000a5 	.word	0x200000a5

08000d54 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <SD_CheckPower+0x14>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200000a5 	.word	0x200000a5

08000d6c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <SD_RxDataBlock+0x5c>)
 8000d78:	22c8      	movs	r2, #200	; 0xc8
 8000d7a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d7c:	f7ff ff58 	bl	8000c30 <SPI_RxByte>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2bff      	cmp	r3, #255	; 0xff
 8000d88:	d104      	bne.n	8000d94 <SD_RxDataBlock+0x28>
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <SD_RxDataBlock+0x5c>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f3      	bne.n	8000d7c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	2bfe      	cmp	r3, #254	; 0xfe
 8000d98:	d001      	beq.n	8000d9e <SD_RxDataBlock+0x32>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e00f      	b.n	8000dbe <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5f 	bl	8000c68 <SPI_RxBytePtr>
	} while(len--);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	1e5a      	subs	r2, r3, #1
 8000dae:	603a      	str	r2, [r7, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f4      	bne.n	8000d9e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000db4:	f7ff ff3c 	bl	8000c30 <SPI_RxByte>
	SPI_RxByte();
 8000db8:	f7ff ff3a 	bl	8000c30 <SPI_RxByte>

	return TRUE;
 8000dbc:	2301      	movs	r3, #1
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20002296 	.word	0x20002296

08000dcc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000ddc:	f7ff ff52 	bl	8000c84 <SD_ReadyWait>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2bff      	cmp	r3, #255	; 0xff
 8000de4:	d001      	beq.n	8000dea <SD_TxDataBlock+0x1e>
 8000de6:	2300      	movs	r3, #0
 8000de8:	e02f      	b.n	8000e4a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff feeb 	bl	8000bc8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	2bfd      	cmp	r3, #253	; 0xfd
 8000df6:	d020      	beq.n	8000e3a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fefd 	bl	8000bfc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e02:	f7ff ff15 	bl	8000c30 <SPI_RxByte>
		SPI_RxByte();
 8000e06:	f7ff ff13 	bl	8000c30 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e0a:	e00b      	b.n	8000e24 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e0c:	f7ff ff10 	bl	8000c30 <SPI_RxByte>
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d006      	beq.n	8000e2c <SD_TxDataBlock+0x60>
			i++;
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	3301      	adds	r3, #1
 8000e22:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	2b40      	cmp	r3, #64	; 0x40
 8000e28:	d9f0      	bls.n	8000e0c <SD_TxDataBlock+0x40>
 8000e2a:	e000      	b.n	8000e2e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e2c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e2e:	bf00      	nop
 8000e30:	f7ff fefe 	bl	8000c30 <SPI_RxByte>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0fa      	beq.n	8000e30 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d101      	bne.n	8000e48 <SD_TxDataBlock+0x7c>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	6039      	str	r1, [r7, #0]
 8000e5c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e5e:	f7ff ff11 	bl	8000c84 <SD_ReadyWait>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2bff      	cmp	r3, #255	; 0xff
 8000e66:	d001      	beq.n	8000e6c <SD_SendCmd+0x1a>
 8000e68:	23ff      	movs	r3, #255	; 0xff
 8000e6a:	e042      	b.n	8000ef2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff feaa 	bl	8000bc8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	0e1b      	lsrs	r3, r3, #24
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fea4 	bl	8000bc8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fe9e 	bl	8000bc8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fe98 	bl	8000bc8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fe93 	bl	8000bc8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b40      	cmp	r3, #64	; 0x40
 8000ea6:	d102      	bne.n	8000eae <SD_SendCmd+0x5c>
 8000ea8:	2395      	movs	r3, #149	; 0x95
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e007      	b.n	8000ebe <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b48      	cmp	r3, #72	; 0x48
 8000eb2:	d102      	bne.n	8000eba <SD_SendCmd+0x68>
 8000eb4:	2387      	movs	r3, #135	; 0x87
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e001      	b.n	8000ebe <SD_SendCmd+0x6c>
	else crc = 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe81 	bl	8000bc8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b4c      	cmp	r3, #76	; 0x4c
 8000eca:	d101      	bne.n	8000ed0 <SD_SendCmd+0x7e>
 8000ecc:	f7ff feb0 	bl	8000c30 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000ed4:	f7ff feac 	bl	8000c30 <SPI_RxByte>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000edc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da05      	bge.n	8000ef0 <SD_SendCmd+0x9e>
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	73bb      	strb	r3, [r7, #14]
 8000eea:	7bbb      	ldrb	r3, [r7, #14]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f1      	bne.n	8000ed4 <SD_SendCmd+0x82>

	return res;
 8000ef0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SD_disk_initialize+0x14>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e0d6      	b.n	80010be <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f10:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <SD_disk_initialize+0x1cc>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <SD_disk_initialize+0x2a>
 8000f1e:	4b6a      	ldr	r3, [pc, #424]	; (80010c8 <SD_disk_initialize+0x1cc>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	e0cb      	b.n	80010be <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000f26:	f7ff fec7 	bl	8000cb8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f2a:	f7ff fe31 	bl	8000b90 <SELECT>

	/* check disk type */
	type = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f32:	2100      	movs	r1, #0
 8000f34:	2040      	movs	r0, #64	; 0x40
 8000f36:	f7ff ff8c 	bl	8000e52 <SD_SendCmd>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	f040 80a6 	bne.w	800108e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f42:	4b62      	ldr	r3, [pc, #392]	; (80010cc <SD_disk_initialize+0x1d0>)
 8000f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f48:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f4a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f4e:	2048      	movs	r0, #72	; 0x48
 8000f50:	f7ff ff7f 	bl	8000e52 <SD_SendCmd>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d158      	bne.n	800100c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e00c      	b.n	8000f7a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f60:	7bfc      	ldrb	r4, [r7, #15]
 8000f62:	f7ff fe65 	bl	8000c30 <SPI_RxByte>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f104 0310 	add.w	r3, r4, #16
 8000f6e:	443b      	add	r3, r7
 8000f70:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d9ef      	bls.n	8000f60 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f80:	7abb      	ldrb	r3, [r7, #10]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	f040 8083 	bne.w	800108e <SD_disk_initialize+0x192>
 8000f88:	7afb      	ldrb	r3, [r7, #11]
 8000f8a:	2baa      	cmp	r3, #170	; 0xaa
 8000f8c:	d17f      	bne.n	800108e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2077      	movs	r0, #119	; 0x77
 8000f92:	f7ff ff5e 	bl	8000e52 <SD_SendCmd>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d807      	bhi.n	8000fac <SD_disk_initialize+0xb0>
 8000f9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fa0:	2069      	movs	r0, #105	; 0x69
 8000fa2:	f7ff ff56 	bl	8000e52 <SD_SendCmd>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000fac:	4b47      	ldr	r3, [pc, #284]	; (80010cc <SD_disk_initialize+0x1d0>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1eb      	bne.n	8000f8e <SD_disk_initialize+0x92>
 8000fb6:	e000      	b.n	8000fba <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fb8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fba:	4b44      	ldr	r3, [pc, #272]	; (80010cc <SD_disk_initialize+0x1d0>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d064      	beq.n	800108e <SD_disk_initialize+0x192>
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	207a      	movs	r0, #122	; 0x7a
 8000fc8:	f7ff ff43 	bl	8000e52 <SD_SendCmd>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d15d      	bne.n	800108e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e00c      	b.n	8000ff2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000fd8:	7bfc      	ldrb	r4, [r7, #15]
 8000fda:	f7ff fe29 	bl	8000c30 <SPI_RxByte>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f104 0310 	add.w	r3, r4, #16
 8000fe6:	443b      	add	r3, r7
 8000fe8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d9ef      	bls.n	8000fd8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000ff8:	7a3b      	ldrb	r3, [r7, #8]
 8000ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SD_disk_initialize+0x10a>
 8001002:	230c      	movs	r3, #12
 8001004:	e000      	b.n	8001008 <SD_disk_initialize+0x10c>
 8001006:	2304      	movs	r3, #4
 8001008:	73bb      	strb	r3, [r7, #14]
 800100a:	e040      	b.n	800108e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800100c:	2100      	movs	r1, #0
 800100e:	2077      	movs	r0, #119	; 0x77
 8001010:	f7ff ff1f 	bl	8000e52 <SD_SendCmd>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d808      	bhi.n	800102c <SD_disk_initialize+0x130>
 800101a:	2100      	movs	r1, #0
 800101c:	2069      	movs	r0, #105	; 0x69
 800101e:	f7ff ff18 	bl	8000e52 <SD_SendCmd>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d801      	bhi.n	800102c <SD_disk_initialize+0x130>
 8001028:	2302      	movs	r3, #2
 800102a:	e000      	b.n	800102e <SD_disk_initialize+0x132>
 800102c:	2301      	movs	r3, #1
 800102e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001030:	7bbb      	ldrb	r3, [r7, #14]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d10e      	bne.n	8001054 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001036:	2100      	movs	r1, #0
 8001038:	2077      	movs	r0, #119	; 0x77
 800103a:	f7ff ff0a 	bl	8000e52 <SD_SendCmd>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	d80e      	bhi.n	8001062 <SD_disk_initialize+0x166>
 8001044:	2100      	movs	r1, #0
 8001046:	2069      	movs	r0, #105	; 0x69
 8001048:	f7ff ff03 	bl	8000e52 <SD_SendCmd>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d107      	bne.n	8001062 <SD_disk_initialize+0x166>
 8001052:	e00d      	b.n	8001070 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001054:	2100      	movs	r1, #0
 8001056:	2041      	movs	r0, #65	; 0x41
 8001058:	f7ff fefb 	bl	8000e52 <SD_SendCmd>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <SD_disk_initialize+0x1d0>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e1      	bne.n	8001030 <SD_disk_initialize+0x134>
 800106c:	e000      	b.n	8001070 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800106e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <SD_disk_initialize+0x1d0>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	b29b      	uxth	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <SD_disk_initialize+0x18e>
 800107a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107e:	2050      	movs	r0, #80	; 0x50
 8001080:	f7ff fee7 	bl	8000e52 <SD_SendCmd>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SD_disk_initialize+0x192>
 800108a:	2300      	movs	r3, #0
 800108c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <SD_disk_initialize+0x1d4>)
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001094:	f7ff fd8a 	bl	8000bac <DESELECT>
	SPI_RxByte();
 8001098:	f7ff fdca 	bl	8000c30 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d008      	beq.n	80010b4 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <SD_disk_initialize+0x1cc>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SD_disk_initialize+0x1cc>)
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e001      	b.n	80010b8 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010b4:	f7ff fe42 	bl	8000d3c <SD_PowerOff>
	}

	return Stat;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <SD_disk_initialize+0x1cc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20002296 	.word	0x20002296
 80010d0:	200000a4 	.word	0x200000a4

080010d4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SD_disk_status+0x14>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e002      	b.n	80010ee <SD_disk_status+0x1a>
	return Stat;
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SD_disk_status+0x28>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000000 	.word	0x20000000

08001100 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <SD_disk_read+0x1c>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <SD_disk_read+0x20>
 800111c:	2304      	movs	r3, #4
 800111e:	e051      	b.n	80011c4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001120:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <SD_disk_read+0xcc>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SD_disk_read+0x32>
 800112e:	2303      	movs	r3, #3
 8001130:	e048      	b.n	80011c4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <SD_disk_read+0xd0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <SD_disk_read+0x44>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	025b      	lsls	r3, r3, #9
 8001142:	607b      	str	r3, [r7, #4]

	SELECT();
 8001144:	f7ff fd24 	bl	8000b90 <SELECT>

	if (count == 1)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d111      	bne.n	8001172 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	2051      	movs	r0, #81	; 0x51
 8001152:	f7ff fe7e 	bl	8000e52 <SD_SendCmd>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d129      	bne.n	80011b0 <SD_disk_read+0xb0>
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f7ff fe03 	bl	8000d6c <SD_RxDataBlock>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d021      	beq.n	80011b0 <SD_disk_read+0xb0>
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	e01e      	b.n	80011b0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	2052      	movs	r0, #82	; 0x52
 8001176:	f7ff fe6c 	bl	8000e52 <SD_SendCmd>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d117      	bne.n	80011b0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f7ff fdf1 	bl	8000d6c <SD_RxDataBlock>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00a      	beq.n	80011a6 <SD_disk_read+0xa6>
				buff += 512;
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001196:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1ed      	bne.n	8001180 <SD_disk_read+0x80>
 80011a4:	e000      	b.n	80011a8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011a6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011a8:	2100      	movs	r1, #0
 80011aa:	204c      	movs	r0, #76	; 0x4c
 80011ac:	f7ff fe51 	bl	8000e52 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011b0:	f7ff fcfc 	bl	8000bac <DESELECT>
	SPI_RxByte();
 80011b4:	f7ff fd3c 	bl	8000c30 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf14      	ite	ne
 80011be:	2301      	movne	r3, #1
 80011c0:	2300      	moveq	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000000 	.word	0x20000000
 80011d0:	200000a4 	.word	0x200000a4

080011d4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <SD_disk_write+0x1c>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <SD_disk_write+0x20>
 80011f0:	2304      	movs	r3, #4
 80011f2:	e06b      	b.n	80012cc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <SD_disk_write+0x100>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SD_disk_write+0x32>
 8001202:	2303      	movs	r3, #3
 8001204:	e062      	b.n	80012cc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001206:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <SD_disk_write+0x100>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SD_disk_write+0x44>
 8001214:	2302      	movs	r3, #2
 8001216:	e059      	b.n	80012cc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <SD_disk_write+0x104>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <SD_disk_write+0x56>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	607b      	str	r3, [r7, #4]

	SELECT();
 800122a:	f7ff fcb1 	bl	8000b90 <SELECT>

	if (count == 1)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d110      	bne.n	8001256 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	2058      	movs	r0, #88	; 0x58
 8001238:	f7ff fe0b 	bl	8000e52 <SD_SendCmd>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d13a      	bne.n	80012b8 <SD_disk_write+0xe4>
 8001242:	21fe      	movs	r1, #254	; 0xfe
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f7ff fdc1 	bl	8000dcc <SD_TxDataBlock>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d033      	beq.n	80012b8 <SD_disk_write+0xe4>
			count = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	e030      	b.n	80012b8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <SD_disk_write+0x104>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001262:	2100      	movs	r1, #0
 8001264:	2077      	movs	r0, #119	; 0x77
 8001266:	f7ff fdf4 	bl	8000e52 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800126a:	6839      	ldr	r1, [r7, #0]
 800126c:	2057      	movs	r0, #87	; 0x57
 800126e:	f7ff fdf0 	bl	8000e52 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	2059      	movs	r0, #89	; 0x59
 8001276:	f7ff fdec 	bl	8000e52 <SD_SendCmd>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d11b      	bne.n	80012b8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001280:	21fc      	movs	r1, #252	; 0xfc
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f7ff fda2 	bl	8000dcc <SD_TxDataBlock>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00a      	beq.n	80012a4 <SD_disk_write+0xd0>
				buff += 512;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001294:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	3b01      	subs	r3, #1
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ee      	bne.n	8001280 <SD_disk_write+0xac>
 80012a2:	e000      	b.n	80012a6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012a4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012a6:	21fd      	movs	r1, #253	; 0xfd
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fd8f 	bl	8000dcc <SD_TxDataBlock>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <SD_disk_write+0xe4>
			{
				count = 1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012b8:	f7ff fc78 	bl	8000bac <DESELECT>
	SPI_RxByte();
 80012bc:	f7ff fcb8 	bl	8000c30 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf14      	ite	ne
 80012c6:	2301      	movne	r3, #1
 80012c8:	2300      	moveq	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	200000a4 	.word	0x200000a4

080012dc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b08b      	sub	sp, #44	; 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	603a      	str	r2, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	460b      	mov	r3, r1
 80012ea:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SD_disk_ioctl+0x1e>
 80012f6:	2304      	movs	r3, #4
 80012f8:	e115      	b.n	8001526 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	2b05      	cmp	r3, #5
 8001304:	d124      	bne.n	8001350 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d012      	beq.n	8001334 <SD_disk_ioctl+0x58>
 800130e:	2b02      	cmp	r3, #2
 8001310:	dc1a      	bgt.n	8001348 <SD_disk_ioctl+0x6c>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <SD_disk_ioctl+0x40>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d006      	beq.n	8001328 <SD_disk_ioctl+0x4c>
 800131a:	e015      	b.n	8001348 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800131c:	f7ff fd0e 	bl	8000d3c <SD_PowerOff>
			res = RES_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001326:	e0fc      	b.n	8001522 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001328:	f7ff fcc6 	bl	8000cb8 <SD_PowerOn>
			res = RES_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001332:	e0f6      	b.n	8001522 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	1c5c      	adds	r4, r3, #1
 8001338:	f7ff fd0c 	bl	8000d54 <SD_CheckPower>
 800133c:	4603      	mov	r3, r0
 800133e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001340:	2300      	movs	r3, #0
 8001342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001346:	e0ec      	b.n	8001522 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001348:	2304      	movs	r3, #4
 800134a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800134e:	e0e8      	b.n	8001522 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001350:	4b77      	ldr	r3, [pc, #476]	; (8001530 <SD_disk_ioctl+0x254>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SD_disk_ioctl+0x86>
 800135e:	2303      	movs	r3, #3
 8001360:	e0e1      	b.n	8001526 <SD_disk_ioctl+0x24a>

		SELECT();
 8001362:	f7ff fc15 	bl	8000b90 <SELECT>

		switch (ctrl)
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	2b0d      	cmp	r3, #13
 800136a:	f200 80cb 	bhi.w	8001504 <SD_disk_ioctl+0x228>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <SD_disk_ioctl+0x98>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	0800146f 	.word	0x0800146f
 8001378:	080013ad 	.word	0x080013ad
 800137c:	0800145f 	.word	0x0800145f
 8001380:	08001505 	.word	0x08001505
 8001384:	08001505 	.word	0x08001505
 8001388:	08001505 	.word	0x08001505
 800138c:	08001505 	.word	0x08001505
 8001390:	08001505 	.word	0x08001505
 8001394:	08001505 	.word	0x08001505
 8001398:	08001505 	.word	0x08001505
 800139c:	08001505 	.word	0x08001505
 80013a0:	08001481 	.word	0x08001481
 80013a4:	080014a5 	.word	0x080014a5
 80013a8:	080014c9 	.word	0x080014c9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013ac:	2100      	movs	r1, #0
 80013ae:	2049      	movs	r0, #73	; 0x49
 80013b0:	f7ff fd4f 	bl	8000e52 <SD_SendCmd>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 80a8 	bne.w	800150c <SD_disk_ioctl+0x230>
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2110      	movs	r1, #16
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fcd2 	bl	8000d6c <SD_RxDataBlock>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 809e 	beq.w	800150c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80013d0:	7b3b      	ldrb	r3, [r7, #12]
 80013d2:	099b      	lsrs	r3, r3, #6
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d10e      	bne.n	80013f8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013da:	7d7b      	ldrb	r3, [r7, #21]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	7d3b      	ldrb	r3, [r7, #20]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4413      	add	r3, r2
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80013ee:	8bfb      	ldrh	r3, [r7, #30]
 80013f0:	029a      	lsls	r2, r3, #10
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e02e      	b.n	8001456 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013f8:	7c7b      	ldrb	r3, [r7, #17]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	7dbb      	ldrb	r3, [r7, #22]
 8001402:	09db      	lsrs	r3, r3, #7
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4413      	add	r3, r2
 8001408:	b2da      	uxtb	r2, r3
 800140a:	7d7b      	ldrb	r3, [r7, #21]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 0306 	and.w	r3, r3, #6
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	3302      	adds	r3, #2
 800141c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001420:	7d3b      	ldrb	r3, [r7, #20]
 8001422:	099b      	lsrs	r3, r3, #6
 8001424:	b2db      	uxtb	r3, r3
 8001426:	b29a      	uxth	r2, r3
 8001428:	7cfb      	ldrb	r3, [r7, #19]
 800142a:	b29b      	uxth	r3, r3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	b29b      	uxth	r3, r3
 8001430:	4413      	add	r3, r2
 8001432:	b29a      	uxth	r2, r3
 8001434:	7cbb      	ldrb	r3, [r7, #18]
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	b29b      	uxth	r3, r3
 800143a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800143e:	b29b      	uxth	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	b29b      	uxth	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001448:	8bfa      	ldrh	r2, [r7, #30]
 800144a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800144e:	3b09      	subs	r3, #9
 8001450:	409a      	lsls	r2, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800145c:	e056      	b.n	800150c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001464:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800146c:	e055      	b.n	800151a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800146e:	f7ff fc09 	bl	8000c84 <SD_ReadyWait>
 8001472:	4603      	mov	r3, r0
 8001474:	2bff      	cmp	r3, #255	; 0xff
 8001476:	d14b      	bne.n	8001510 <SD_disk_ioctl+0x234>
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800147e:	e047      	b.n	8001510 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001480:	2100      	movs	r1, #0
 8001482:	2049      	movs	r0, #73	; 0x49
 8001484:	f7ff fce5 	bl	8000e52 <SD_SendCmd>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d142      	bne.n	8001514 <SD_disk_ioctl+0x238>
 800148e:	2110      	movs	r1, #16
 8001490:	6a38      	ldr	r0, [r7, #32]
 8001492:	f7ff fc6b 	bl	8000d6c <SD_RxDataBlock>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d03b      	beq.n	8001514 <SD_disk_ioctl+0x238>
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014a2:	e037      	b.n	8001514 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014a4:	2100      	movs	r1, #0
 80014a6:	204a      	movs	r0, #74	; 0x4a
 80014a8:	f7ff fcd3 	bl	8000e52 <SD_SendCmd>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d132      	bne.n	8001518 <SD_disk_ioctl+0x23c>
 80014b2:	2110      	movs	r1, #16
 80014b4:	6a38      	ldr	r0, [r7, #32]
 80014b6:	f7ff fc59 	bl	8000d6c <SD_RxDataBlock>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d02b      	beq.n	8001518 <SD_disk_ioctl+0x23c>
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014c6:	e027      	b.n	8001518 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014c8:	2100      	movs	r1, #0
 80014ca:	207a      	movs	r0, #122	; 0x7a
 80014cc:	f7ff fcc1 	bl	8000e52 <SD_SendCmd>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014dc:	e00b      	b.n	80014f6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80014de:	6a3c      	ldr	r4, [r7, #32]
 80014e0:	1c63      	adds	r3, r4, #1
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	f7ff fba4 	bl	8000c30 <SPI_RxByte>
 80014e8:	4603      	mov	r3, r0
 80014ea:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80014ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014f0:	3301      	adds	r3, #1
 80014f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d9ef      	bls.n	80014de <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001504:	2304      	movs	r3, #4
 8001506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800150a:	e006      	b.n	800151a <SD_disk_ioctl+0x23e>
			break;
 800150c:	bf00      	nop
 800150e:	e004      	b.n	800151a <SD_disk_ioctl+0x23e>
			break;
 8001510:	bf00      	nop
 8001512:	e002      	b.n	800151a <SD_disk_ioctl+0x23e>
			break;
 8001514:	bf00      	nop
 8001516:	e000      	b.n	800151a <SD_disk_ioctl+0x23e>
			break;
 8001518:	bf00      	nop
		}

		DESELECT();
 800151a:	f7ff fb47 	bl	8000bac <DESELECT>
		SPI_RxByte();
 800151e:	f7ff fb87 	bl	8000c30 <SPI_RxByte>
	}

	return res;
 8001522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001526:	4618      	mov	r0, r3
 8001528:	372c      	adds	r7, #44	; 0x2c
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000

08001534 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;
// use to determinate the size of the data after write
int bufsize (char *buf)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	int i=0;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001540:	e002      	b.n	8001548 <bufsize+0x14>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f6      	bne.n	8001542 <bufsize+0xe>
	return i;
 8001554:	68fb      	ldr	r3, [r7, #12]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <clear_buffer>:

void clear_buffer (void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	e007      	b.n	8001580 <clear_buffer+0x1c>
 8001570:	4a08      	ldr	r2, [pc, #32]	; (8001594 <clear_buffer+0x30>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3301      	adds	r3, #1
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b7f      	cmp	r3, #127	; 0x7f
 8001584:	ddf4      	ble.n	8001570 <clear_buffer+0xc>
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	20002214 	.word	0x20002214

08001598 <send_uart>:
//funtion for rof make easy to read uart
void send_uart (char *string)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7fe fe15 	bl	80001d0 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, 40);  // transmit in blocking mode
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	2328      	movs	r3, #40	; 0x28
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <send_uart+0x28>)
 80015b4:	f002 fea4 	bl	8004300 <HAL_UART_Transmit>
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000010c 	.word	0x2000010c

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c8:	f000 fc3f 	bl	8001e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015cc:	f000 f9b0 	bl	8001930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d0:	f000 fa62 	bl	8001a98 <MX_GPIO_Init>
  MX_FATFS_Init();
 80015d4:	f003 fb04 	bl	8004be0 <MX_FATFS_Init>
  MX_SPI1_Init();
 80015d8:	f000 f9f0 	bl	80019bc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80015dc:	f000 fa2c 	bl	8001a38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80015e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e4:	f000 fca6 	bl	8001f34 <HAL_Delay>

  fresult = f_mount(&fs, "/", 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	49af      	ldr	r1, [pc, #700]	; (80018a8 <main+0x2e4>)
 80015ec:	48af      	ldr	r0, [pc, #700]	; (80018ac <main+0x2e8>)
 80015ee:	f005 fe99 	bl	8007324 <f_mount>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4bae      	ldr	r3, [pc, #696]	; (80018b0 <main+0x2ec>)
 80015f8:	701a      	strb	r2, [r3, #0]
  	if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n");
 80015fa:	4bad      	ldr	r3, [pc, #692]	; (80018b0 <main+0x2ec>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <main+0x46>
 8001602:	48ac      	ldr	r0, [pc, #688]	; (80018b4 <main+0x2f0>)
 8001604:	f7ff ffc8 	bl	8001598 <send_uart>
 8001608:	e002      	b.n	8001610 <main+0x4c>
  	else send_uart("SD CARD mounted successfully...\n\n");
 800160a:	48ab      	ldr	r0, [pc, #684]	; (80018b8 <main+0x2f4>)
 800160c:	f7ff ffc4 	bl	8001598 <send_uart>


  	/*************** Card capacity details ********************/

  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs); //tamaño total de la memoria
 8001610:	4aaa      	ldr	r2, [pc, #680]	; (80018bc <main+0x2f8>)
 8001612:	49ab      	ldr	r1, [pc, #684]	; (80018c0 <main+0x2fc>)
 8001614:	48ab      	ldr	r0, [pc, #684]	; (80018c4 <main+0x300>)
 8001616:	f006 fe56 	bl	80082c6 <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800161a:	4ba8      	ldr	r3, [pc, #672]	; (80018bc <main+0x2f8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	3b02      	subs	r3, #2
 8001622:	4aa6      	ldr	r2, [pc, #664]	; (80018bc <main+0x2f8>)
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	8952      	ldrh	r2, [r2, #10]
 8001628:	fb02 f303 	mul.w	r3, r2, r3
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f893 	bl	8000758 <__aeabi_ui2d>
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4ba4      	ldr	r3, [pc, #656]	; (80018c8 <main+0x304>)
 8001638:	f7fe fe22 	bl	8000280 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff f902 	bl	800084c <__aeabi_d2uiz>
 8001648:	4603      	mov	r3, r0
 800164a:	4aa0      	ldr	r2, [pc, #640]	; (80018cc <main+0x308>)
 800164c:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800164e:	4b9f      	ldr	r3, [pc, #636]	; (80018cc <main+0x308>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	499e      	ldr	r1, [pc, #632]	; (80018d0 <main+0x30c>)
 8001656:	489f      	ldr	r0, [pc, #636]	; (80018d4 <main+0x310>)
 8001658:	f007 f9d0 	bl	80089fc <siprintf>
  	send_uart(buffer);
 800165c:	489d      	ldr	r0, [pc, #628]	; (80018d4 <main+0x310>)
 800165e:	f7ff ff9b 	bl	8001598 <send_uart>
  	clear_buffer();
 8001662:	f7ff ff7f 	bl	8001564 <clear_buffer>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001666:	4b95      	ldr	r3, [pc, #596]	; (80018bc <main+0x2f8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	895b      	ldrh	r3, [r3, #10]
 800166c:	461a      	mov	r2, r3
 800166e:	4b94      	ldr	r3, [pc, #592]	; (80018c0 <main+0x2fc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f86e 	bl	8000758 <__aeabi_ui2d>
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b91      	ldr	r3, [pc, #580]	; (80018c8 <main+0x304>)
 8001682:	f7fe fdfd 	bl	8000280 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff f8dd 	bl	800084c <__aeabi_d2uiz>
 8001692:	4603      	mov	r3, r0
 8001694:	4a90      	ldr	r2, [pc, #576]	; (80018d8 <main+0x314>)
 8001696:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8001698:	4b8f      	ldr	r3, [pc, #572]	; (80018d8 <main+0x314>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	498f      	ldr	r1, [pc, #572]	; (80018dc <main+0x318>)
 80016a0:	488c      	ldr	r0, [pc, #560]	; (80018d4 <main+0x310>)
 80016a2:	f007 f9ab 	bl	80089fc <siprintf>
  	send_uart(buffer);
 80016a6:	488b      	ldr	r0, [pc, #556]	; (80018d4 <main+0x310>)
 80016a8:	f7ff ff76 	bl	8001598 <send_uart>
  	clear_buffer();
 80016ac:	f7ff ff5a 	bl	8001564 <clear_buffer>
//crear el primer documento

  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
      fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80016b0:	2213      	movs	r2, #19
 80016b2:	498b      	ldr	r1, [pc, #556]	; (80018e0 <main+0x31c>)
 80016b4:	488b      	ldr	r0, [pc, #556]	; (80018e4 <main+0x320>)
 80016b6:	f005 fe7b 	bl	80073b0 <f_open>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b7c      	ldr	r3, [pc, #496]	; (80018b0 <main+0x2ec>)
 80016c0:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 80016c2:	4988      	ldr	r1, [pc, #544]	; (80018e4 <main+0x320>)
 80016c4:	4888      	ldr	r0, [pc, #544]	; (80018e8 <main+0x324>)
 80016c6:	f007 f812 	bl	80086ee <f_puts>

  	/* Close file */
  	fresult = f_close(&fil);
 80016ca:	4886      	ldr	r0, [pc, #536]	; (80018e4 <main+0x320>)
 80016cc:	f006 fbad 	bl	8007e2a <f_close>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <main+0x2ec>)
 80016d6:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 80016d8:	4b75      	ldr	r3, [pc, #468]	; (80018b0 <main+0x2ec>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <main+0x122>
 80016e0:	4882      	ldr	r0, [pc, #520]	; (80018ec <main+0x328>)
 80016e2:	f7ff ff59 	bl	8001598 <send_uart>

  	/* Open file to read */
  	fresult = f_open(&fil, "file1.txt", FA_READ);
 80016e6:	2201      	movs	r2, #1
 80016e8:	497d      	ldr	r1, [pc, #500]	; (80018e0 <main+0x31c>)
 80016ea:	487e      	ldr	r0, [pc, #504]	; (80018e4 <main+0x320>)
 80016ec:	f005 fe60 	bl	80073b0 <f_open>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b6e      	ldr	r3, [pc, #440]	; (80018b0 <main+0x2ec>)
 80016f6:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	f_gets(buffer, f_size(&fil), &fil);
 80016f8:	4b7a      	ldr	r3, [pc, #488]	; (80018e4 <main+0x320>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4a79      	ldr	r2, [pc, #484]	; (80018e4 <main+0x320>)
 80016fe:	4619      	mov	r1, r3
 8001700:	4874      	ldr	r0, [pc, #464]	; (80018d4 <main+0x310>)
 8001702:	f006 ff40 	bl	8008586 <f_gets>

  	send_uart("File1.txt is opened and it contains the data as shown below\n");
 8001706:	487a      	ldr	r0, [pc, #488]	; (80018f0 <main+0x32c>)
 8001708:	f7ff ff46 	bl	8001598 <send_uart>
  	send_uart(buffer);
 800170c:	4871      	ldr	r0, [pc, #452]	; (80018d4 <main+0x310>)
 800170e:	f7ff ff43 	bl	8001598 <send_uart>
  	send_uart("\n\n");
 8001712:	4878      	ldr	r0, [pc, #480]	; (80018f4 <main+0x330>)
 8001714:	f7ff ff40 	bl	8001598 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001718:	4872      	ldr	r0, [pc, #456]	; (80018e4 <main+0x320>)
 800171a:	f006 fb86 	bl	8007e2a <f_close>

  	clear_buffer();
 800171e:	f7ff ff21 	bl	8001564 <clear_buffer>


  	/**************** The following operation is using f_write and f_read **************************/

  	/* Create second file with read write access and open it */
  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001722:	220a      	movs	r2, #10
 8001724:	4974      	ldr	r1, [pc, #464]	; (80018f8 <main+0x334>)
 8001726:	486f      	ldr	r0, [pc, #444]	; (80018e4 <main+0x320>)
 8001728:	f005 fe42 	bl	80073b0 <f_open>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <main+0x2ec>)
 8001732:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 8001734:	4a67      	ldr	r2, [pc, #412]	; (80018d4 <main+0x310>)
 8001736:	4b71      	ldr	r3, [pc, #452]	; (80018fc <main+0x338>)
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	2357      	movs	r3, #87	; 0x57
 800173e:	461a      	mov	r2, r3
 8001740:	f007 f946 	bl	80089d0 <memcpy>

  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001744:	4863      	ldr	r0, [pc, #396]	; (80018d4 <main+0x310>)
 8001746:	f7ff fef5 	bl	8001534 <bufsize>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <main+0x33c>)
 8001750:	4960      	ldr	r1, [pc, #384]	; (80018d4 <main+0x310>)
 8001752:	4864      	ldr	r0, [pc, #400]	; (80018e4 <main+0x320>)
 8001754:	f006 f957 	bl	8007a06 <f_write>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	4b54      	ldr	r3, [pc, #336]	; (80018b0 <main+0x2ec>)
 800175e:	701a      	strb	r2, [r3, #0]

  	send_uart ("File2.txt created and data is written\n");
 8001760:	4868      	ldr	r0, [pc, #416]	; (8001904 <main+0x340>)
 8001762:	f7ff ff19 	bl	8001598 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001766:	485f      	ldr	r0, [pc, #380]	; (80018e4 <main+0x320>)
 8001768:	f006 fb5f 	bl	8007e2a <f_close>



  	// clearing buffer to show that result obtained is from the file
  	clear_buffer();
 800176c:	f7ff fefa 	bl	8001564 <clear_buffer>

  	/* Open second file to read */
  	fresult = f_open(&fil, "file2.txt", FA_READ);
 8001770:	2201      	movs	r2, #1
 8001772:	4961      	ldr	r1, [pc, #388]	; (80018f8 <main+0x334>)
 8001774:	485b      	ldr	r0, [pc, #364]	; (80018e4 <main+0x320>)
 8001776:	f005 fe1b 	bl	80073b0 <f_open>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b4c      	ldr	r3, [pc, #304]	; (80018b0 <main+0x2ec>)
 8001780:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");
 8001782:	4b4b      	ldr	r3, [pc, #300]	; (80018b0 <main+0x2ec>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <main+0x1cc>
 800178a:	485f      	ldr	r0, [pc, #380]	; (8001908 <main+0x344>)
 800178c:	f7ff ff04 	bl	8001598 <send_uart>

  	/* Read data from the file
  	 * Please see the function details for the arguments */
  	f_read (&fil, buffer, f_size(&fil), &br);
 8001790:	4b54      	ldr	r3, [pc, #336]	; (80018e4 <main+0x320>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4b5d      	ldr	r3, [pc, #372]	; (800190c <main+0x348>)
 8001796:	494f      	ldr	r1, [pc, #316]	; (80018d4 <main+0x310>)
 8001798:	4852      	ldr	r0, [pc, #328]	; (80018e4 <main+0x320>)
 800179a:	f005 ffd5 	bl	8007748 <f_read>
  	send_uart(buffer);
 800179e:	484d      	ldr	r0, [pc, #308]	; (80018d4 <main+0x310>)
 80017a0:	f7ff fefa 	bl	8001598 <send_uart>
  	send_uart("\n\n");
 80017a4:	4853      	ldr	r0, [pc, #332]	; (80018f4 <main+0x330>)
 80017a6:	f7ff fef7 	bl	8001598 <send_uart>

  	/* Close file */
  	f_close(&fil);
 80017aa:	484e      	ldr	r0, [pc, #312]	; (80018e4 <main+0x320>)
 80017ac:	f006 fb3d 	bl	8007e2a <f_close>

  	clear_buffer();
 80017b0:	f7ff fed8 	bl	8001564 <clear_buffer>


  	/*********************UPDATING an existing file ***************************/

  	/* Open the file with write access */
  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80017b4:	2203      	movs	r2, #3
 80017b6:	4950      	ldr	r1, [pc, #320]	; (80018f8 <main+0x334>)
 80017b8:	484a      	ldr	r0, [pc, #296]	; (80018e4 <main+0x320>)
 80017ba:	f005 fdf9 	bl	80073b0 <f_open>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <main+0x2ec>)
 80017c4:	701a      	strb	r2, [r3, #0]

  	/* Move to offset to the end of the file */
  	fresult = f_lseek(&fil, f_size(&fil));
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <main+0x320>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	4619      	mov	r1, r3
 80017cc:	4845      	ldr	r0, [pc, #276]	; (80018e4 <main+0x320>)
 80017ce:	f006 fb56 	bl	8007e7e <f_lseek>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <main+0x2ec>)
 80017d8:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");
 80017da:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <main+0x2ec>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <main+0x224>
 80017e2:	484b      	ldr	r0, [pc, #300]	; (8001910 <main+0x34c>)
 80017e4:	f7ff fed8 	bl	8001598 <send_uart>

  	/* write the string to the file */
  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 80017e8:	493e      	ldr	r1, [pc, #248]	; (80018e4 <main+0x320>)
 80017ea:	484a      	ldr	r0, [pc, #296]	; (8001914 <main+0x350>)
 80017ec:	f006 ff7f 	bl	80086ee <f_puts>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <main+0x2ec>)
 80017f6:	701a      	strb	r2, [r3, #0]

  	f_close (&fil);
 80017f8:	483a      	ldr	r0, [pc, #232]	; (80018e4 <main+0x320>)
 80017fa:	f006 fb16 	bl	8007e2a <f_close>

  	clear_buffer();
 80017fe:	f7ff feb1 	bl	8001564 <clear_buffer>

  	/* Open to read the file */
  	fresult = f_open (&fil, "file2.txt", FA_READ);
 8001802:	2201      	movs	r2, #1
 8001804:	493c      	ldr	r1, [pc, #240]	; (80018f8 <main+0x334>)
 8001806:	4837      	ldr	r0, [pc, #220]	; (80018e4 <main+0x320>)
 8001808:	f005 fdd2 	bl	80073b0 <f_open>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <main+0x2ec>)
 8001812:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8001814:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <main+0x320>)
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <main+0x348>)
 800181a:	492e      	ldr	r1, [pc, #184]	; (80018d4 <main+0x310>)
 800181c:	4831      	ldr	r0, [pc, #196]	; (80018e4 <main+0x320>)
 800181e:	f005 ff93 	bl	8007748 <f_read>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <main+0x2ec>)
 8001828:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <main+0x2ec>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <main+0x274>
 8001832:	4839      	ldr	r0, [pc, #228]	; (8001918 <main+0x354>)
 8001834:	f7ff feb0 	bl	8001598 <send_uart>
  	send_uart(buffer);
 8001838:	4826      	ldr	r0, [pc, #152]	; (80018d4 <main+0x310>)
 800183a:	f7ff fead 	bl	8001598 <send_uart>
  	send_uart("\n\n");
 800183e:	482d      	ldr	r0, [pc, #180]	; (80018f4 <main+0x330>)
 8001840:	f7ff feaa 	bl	8001598 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001844:	4827      	ldr	r0, [pc, #156]	; (80018e4 <main+0x320>)
 8001846:	f006 faf0 	bl	8007e2a <f_close>

  	clear_buffer();
 800184a:	f7ff fe8b 	bl	8001564 <clear_buffer>


  	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/

  	fresult = f_unlink("/file1.txt");
 800184e:	4833      	ldr	r0, [pc, #204]	; (800191c <main+0x358>)
 8001850:	f006 fdee 	bl	8008430 <f_unlink>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <main+0x2ec>)
 800185a:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <main+0x2ec>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <main+0x2a6>
 8001864:	482e      	ldr	r0, [pc, #184]	; (8001920 <main+0x35c>)
 8001866:	f7ff fe97 	bl	8001598 <send_uart>

  	fresult = f_unlink("/file2.txt");
 800186a:	482e      	ldr	r0, [pc, #184]	; (8001924 <main+0x360>)
 800186c:	f006 fde0 	bl	8008430 <f_unlink>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <main+0x2ec>)
 8001876:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <main+0x2ec>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <main+0x2c2>
 8001880:	4829      	ldr	r0, [pc, #164]	; (8001928 <main+0x364>)
 8001882:	f7ff fe89 	bl	8001598 <send_uart>

  	/* Unmount SDCARD */
  	fresult = f_mount(NULL, "/", 1);
 8001886:	2201      	movs	r2, #1
 8001888:	4907      	ldr	r1, [pc, #28]	; (80018a8 <main+0x2e4>)
 800188a:	2000      	movs	r0, #0
 800188c:	f005 fd4a 	bl	8007324 <f_mount>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <main+0x2ec>)
 8001896:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <main+0x2ec>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <main+0x2e2>
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <main+0x368>)
 80018a2:	f7ff fe79 	bl	8001598 <send_uart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <main+0x2e2>
 80018a8:	080092d4 	.word	0x080092d4
 80018ac:	20000190 	.word	0x20000190
 80018b0:	200021f8 	.word	0x200021f8
 80018b4:	080092d8 	.word	0x080092d8
 80018b8:	080092fc 	.word	0x080092fc
 80018bc:	20002204 	.word	0x20002204
 80018c0:	20002208 	.word	0x20002208
 80018c4:	08009320 	.word	0x08009320
 80018c8:	3fe00000 	.word	0x3fe00000
 80018cc:	2000220c 	.word	0x2000220c
 80018d0:	08009324 	.word	0x08009324
 80018d4:	20002214 	.word	0x20002214
 80018d8:	20002210 	.word	0x20002210
 80018dc:	08009340 	.word	0x08009340
 80018e0:	0800935c 	.word	0x0800935c
 80018e4:	200011c8 	.word	0x200011c8
 80018e8:	08009368 	.word	0x08009368
 80018ec:	080093b0 	.word	0x080093b0
 80018f0:	080093dc 	.word	0x080093dc
 80018f4:	0800941c 	.word	0x0800941c
 80018f8:	08009420 	.word	0x08009420
 80018fc:	0800942c 	.word	0x0800942c
 8001900:	20002200 	.word	0x20002200
 8001904:	08009484 	.word	0x08009484
 8001908:	080094ac 	.word	0x080094ac
 800190c:	200021fc 	.word	0x200021fc
 8001910:	080094dc 	.word	0x080094dc
 8001914:	080094fc 	.word	0x080094fc
 8001918:	08009530 	.word	0x08009530
 800191c:	0800955c 	.word	0x0800955c
 8001920:	08009568 	.word	0x08009568
 8001924:	0800958c 	.word	0x0800958c
 8001928:	08009598 	.word	0x08009598
 800192c:	080095bc 	.word	0x080095bc

08001930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b096      	sub	sp, #88	; 0x58
 8001934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	2244      	movs	r2, #68	; 0x44
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f007 f854 	bl	80089ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001952:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001956:	f000 fd87 	bl	8002468 <HAL_PWREx_ControlVoltageScaling>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001960:	f000 f8d8 	bl	8001b14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001964:	2302      	movs	r3, #2
 8001966:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196e:	2310      	movs	r3, #16
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001972:	2300      	movs	r3, #0
 8001974:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fdca 	bl	8002514 <HAL_RCC_OscConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001986:	f000 f8c5 	bl	8001b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198a:	230f      	movs	r3, #15
 800198c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800198e:	2301      	movs	r3, #1
 8001990:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 f9ca 	bl	8002d3c <HAL_RCC_ClockConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019ae:	f000 f8b1 	bl	8001b14 <Error_Handler>
  }
}
 80019b2:	bf00      	nop
 80019b4:	3758      	adds	r7, #88	; 0x58
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <MX_SPI1_Init+0x78>)
 80019c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019f2:	2210      	movs	r2, #16
 80019f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_SPI1_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_SPI1_Init+0x74>)
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_SPI1_Init+0x74>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_SPI1_Init+0x74>)
 8001a16:	2208      	movs	r2, #8
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_SPI1_Init+0x74>)
 8001a1c:	f001 fe9a 	bl	8003754 <HAL_SPI_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a26:	f000 f875 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200000a8 	.word	0x200000a8
 8001a34:	40013000 	.word	0x40013000

08001a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <MX_USART2_UART_Init+0x5c>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_USART2_UART_Init+0x58>)
 8001a7c:	f002 fbf2 	bl	8004264 <HAL_UART_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a86:	f000 f845 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000010c 	.word	0x2000010c
 8001a94:	40004400 	.word	0x40004400

08001a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_GPIO_Init+0x74>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <MX_GPIO_Init+0x74>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MX_GPIO_Init+0x74>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MX_GPIO_Init+0x74>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <MX_GPIO_Init+0x74>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <MX_GPIO_Init+0x74>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	480b      	ldr	r0, [pc, #44]	; (8001b10 <MX_GPIO_Init+0x78>)
 8001ae4:	f000 fc9a 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_GPIO_Init+0x78>)
 8001b00:	f000 fb22 	bl	8002148 <HAL_GPIO_Init>

}
 8001b04:	bf00      	nop
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48000400 	.word	0x48000400

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <Error_Handler+0x8>
	...

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_MspInit+0x44>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <HAL_MspInit+0x44>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6613      	str	r3, [r2, #96]	; 0x60
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_MspInit+0x44>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_MspInit+0x44>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_MspInit+0x44>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_MspInit+0x44>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000

08001b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_SPI_MspInit+0x7c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d128      	bne.n	8001bdc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b94:	6613      	str	r3, [r2, #96]	; 0x60
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001bba:	23c2      	movs	r3, #194	; 0xc2
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f000 fab6 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40013000 	.word	0x40013000
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b09e      	sub	sp, #120	; 0x78
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	2254      	movs	r2, #84	; 0x54
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f006 feed 	bl	80089ec <memset>
  if(huart->Instance==USART2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <HAL_UART_MspInit+0xa8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d136      	bne.n	8001c8a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 faab 	bl	8003184 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c34:	f7ff ff6e 	bl	8001b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_UART_MspInit+0xac>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_UART_MspInit+0xac>)
 8001c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c42:	6593      	str	r3, [r2, #88]	; 0x58
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_UART_MspInit+0xac>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_UART_MspInit+0xac>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_UART_MspInit+0xac>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_UART_MspInit+0xac>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c68:	230c      	movs	r3, #12
 8001c6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c78:	2307      	movs	r3, #7
 8001c7a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c80:	4619      	mov	r1, r3
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c86:	f000 fa5f 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3778      	adds	r7, #120	; 0x78
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40004400 	.word	0x40004400
 8001c98:	40021000 	.word	0x40021000

08001c9c <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <SDTimer_Handler+0x40>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <SDTimer_Handler+0x1c>
    Timer1--;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <SDTimer_Handler+0x40>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <SDTimer_Handler+0x40>)
 8001cb6:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <SDTimer_Handler+0x44>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <SDTimer_Handler+0x34>
    Timer2--;
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <SDTimer_Handler+0x44>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <SDTimer_Handler+0x44>)
 8001cce:	801a      	strh	r2, [r3, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20002296 	.word	0x20002296
 8001ce0:	20002298 	.word	0x20002298

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <SysTick_Handler+0x30>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <SysTick_Handler+0x30>)
 8001d44:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <SysTick_Handler+0x30>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b09      	cmp	r3, #9
 8001d4e:	d904      	bls.n	8001d5a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Handler+0x30>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001d56:	f7ff ffa1 	bl	8001c9c <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5a:	f000 f8cb 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20002294 	.word	0x20002294

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f006 fdf0 	bl	800897c <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20010000 	.word	0x20010000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	2000229c 	.word	0x2000229c
 8001dd0:	200024f0 	.word	0x200024f0

08001dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dfc:	f7ff ffea 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	; (8001e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <LoopForever+0xe>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	; (8001e44 <LoopForever+0x16>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e26:	f006 fdaf 	bl	8008988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e2a:	f7ff fbcb 	bl	80015c4 <main>

08001e2e <LoopForever>:

LoopForever:
    b LoopForever
 8001e2e:	e7fe      	b.n	8001e2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001e3c:	08009af4 	.word	0x08009af4
  ldr r2, =_sbss
 8001e40:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001e44:	200024f0 	.word	0x200024f0

08001e48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC1_IRQHandler>

08001e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e54:	2003      	movs	r0, #3
 8001e56:	f000 f943 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e5a:	200f      	movs	r0, #15
 8001e5c:	f000 f80e 	bl	8001e7c <HAL_InitTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	71fb      	strb	r3, [r7, #7]
 8001e6a:	e001      	b.n	8001e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e6c:	f7ff fe58 	bl	8001b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e70:	79fb      	ldrb	r3, [r7, #7]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_InitTick+0x6c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d023      	beq.n	8001ed8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_InitTick+0x70>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_InitTick+0x6c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f941 	bl	800212e <HAL_SYSTICK_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d809      	bhi.n	8001ecc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f000 f919 	bl	80020f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <HAL_InitTick+0x74>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e007      	b.n	8001edc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e004      	b.n	8001edc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	e001      	b.n	8001edc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000000c 	.word	0x2000000c
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	2000000c 	.word	0x2000000c
 8001f18:	200022a0 	.word	0x200022a0

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200022a0 	.word	0x200022a0

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff ffee 	bl	8001f1c <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d005      	beq.n	8001f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_Delay+0x44>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5a:	bf00      	nop
 8001f5c:	f7ff ffde 	bl	8001f1c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f7      	bhi.n	8001f5c <HAL_Delay+0x28>
  {
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	2000000c 	.word	0x2000000c

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	; (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
         );
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff8e 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff47 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff5c 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff8e 	bl	8002034 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5d 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffb0 	bl	800209c <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002156:	e148      	b.n	80023ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	4013      	ands	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 813a 	beq.w	80023e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d005      	beq.n	8002188 <HAL_GPIO_Init+0x40>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d130      	bne.n	80021ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021be:	2201      	movs	r2, #1
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f003 0201 	and.w	r2, r3, #1
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d017      	beq.n	8002226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d123      	bne.n	800227a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	6939      	ldr	r1, [r7, #16]
 8002276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0203 	and.w	r2, r3, #3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8094 	beq.w	80023e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022bc:	4b52      	ldr	r3, [pc, #328]	; (8002408 <HAL_GPIO_Init+0x2c0>)
 80022be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c0:	4a51      	ldr	r2, [pc, #324]	; (8002408 <HAL_GPIO_Init+0x2c0>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6613      	str	r3, [r2, #96]	; 0x60
 80022c8:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <HAL_GPIO_Init+0x2c0>)
 80022ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022d4:	4a4d      	ldr	r2, [pc, #308]	; (800240c <HAL_GPIO_Init+0x2c4>)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022fe:	d00d      	beq.n	800231c <HAL_GPIO_Init+0x1d4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a43      	ldr	r2, [pc, #268]	; (8002410 <HAL_GPIO_Init+0x2c8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d007      	beq.n	8002318 <HAL_GPIO_Init+0x1d0>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a42      	ldr	r2, [pc, #264]	; (8002414 <HAL_GPIO_Init+0x2cc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <HAL_GPIO_Init+0x1cc>
 8002310:	2302      	movs	r3, #2
 8002312:	e004      	b.n	800231e <HAL_GPIO_Init+0x1d6>
 8002314:	2307      	movs	r3, #7
 8002316:	e002      	b.n	800231e <HAL_GPIO_Init+0x1d6>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_GPIO_Init+0x1d6>
 800231c:	2300      	movs	r3, #0
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	f002 0203 	and.w	r2, r2, #3
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	4093      	lsls	r3, r2
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800232e:	4937      	ldr	r1, [pc, #220]	; (800240c <HAL_GPIO_Init+0x2c4>)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800233c:	4b36      	ldr	r3, [pc, #216]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002360:	4a2d      	ldr	r2, [pc, #180]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002366:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800238a:	4a23      	ldr	r2, [pc, #140]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023b4:	4a18      	ldr	r2, [pc, #96]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023de:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	3301      	adds	r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f47f aeaf 	bne.w	8002158 <HAL_GPIO_Init+0x10>
  }
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40021000 	.word	0x40021000
 800240c:	40010000 	.word	0x40010000
 8002410:	48000400 	.word	0x48000400
 8002414:	48000800 	.word	0x48000800
 8002418:	40010400 	.word	0x40010400

0800241c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
 8002428:	4613      	mov	r3, r2
 800242a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800242c:	787b      	ldrb	r3, [r7, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002438:	e002      	b.n	8002440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_PWREx_GetVoltageRange+0x18>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40007000 	.word	0x40007000

08002468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002476:	d130      	bne.n	80024da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002478:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002484:	d038      	beq.n	80024f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002486:	4b20      	ldr	r3, [pc, #128]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800248e:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002494:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2232      	movs	r2, #50	; 0x32
 800249c:	fb02 f303 	mul.w	r3, r2, r3
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	0c9b      	lsrs	r3, r3, #18
 80024a8:	3301      	adds	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ac:	e002      	b.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c0:	d102      	bne.n	80024c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f2      	bne.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d4:	d110      	bne.n	80024f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e00f      	b.n	80024fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e6:	d007      	beq.n	80024f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024f0:	4a05      	ldr	r2, [pc, #20]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40007000 	.word	0x40007000
 800250c:	20000004 	.word	0x20000004
 8002510:	431bde83 	.word	0x431bde83

08002514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	f000 bc02 	b.w	8002d2c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002528:	4b96      	ldr	r3, [pc, #600]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002532:	4b94      	ldr	r3, [pc, #592]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80e4 	beq.w	8002712 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_RCC_OscConfig+0x4c>
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	f040 808b 	bne.w	800266e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b01      	cmp	r3, #1
 800255c:	f040 8087 	bne.w	800266e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002560:	4b88      	ldr	r3, [pc, #544]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_OscConfig+0x64>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e3d9      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1a      	ldr	r2, [r3, #32]
 800257c:	4b81      	ldr	r3, [pc, #516]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <HAL_RCC_OscConfig+0x7e>
 8002588:	4b7e      	ldr	r3, [pc, #504]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002590:	e005      	b.n	800259e <HAL_RCC_OscConfig+0x8a>
 8002592:	4b7c      	ldr	r3, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259e:	4293      	cmp	r3, r2
 80025a0:	d223      	bcs.n	80025ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fd8c 	bl	80030c4 <RCC_SetFlashLatencyFromMSIRange>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e3ba      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b6:	4b73      	ldr	r3, [pc, #460]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a72      	ldr	r2, [pc, #456]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	496d      	ldr	r1, [pc, #436]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d4:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	4968      	ldr	r1, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
 80025e8:	e025      	b.n	8002636 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ea:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a65      	ldr	r2, [pc, #404]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80025f0:	f043 0308 	orr.w	r3, r3, #8
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4960      	ldr	r1, [pc, #384]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	495b      	ldr	r1, [pc, #364]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fd4c 	bl	80030c4 <RCC_SetFlashLatencyFromMSIRange>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e37a      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002636:	f000 fc81 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 800263a:	4602      	mov	r2, r0
 800263c:	4b51      	ldr	r3, [pc, #324]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	4950      	ldr	r1, [pc, #320]	; (8002788 <HAL_RCC_OscConfig+0x274>)
 8002648:	5ccb      	ldrb	r3, [r1, r3]
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	4a4e      	ldr	r2, [pc, #312]	; (800278c <HAL_RCC_OscConfig+0x278>)
 8002654:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002656:	4b4e      	ldr	r3, [pc, #312]	; (8002790 <HAL_RCC_OscConfig+0x27c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fc0e 	bl	8001e7c <HAL_InitTick>
 8002660:	4603      	mov	r3, r0
 8002662:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d052      	beq.n	8002710 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	e35e      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d032      	beq.n	80026dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a42      	ldr	r2, [pc, #264]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002682:	f7ff fc4b 	bl	8001f1c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800268a:	f7ff fc47 	bl	8001f1c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e347      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800269c:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a8:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a35      	ldr	r2, [pc, #212]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80026ae:	f043 0308 	orr.w	r3, r3, #8
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b33      	ldr	r3, [pc, #204]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4930      	ldr	r1, [pc, #192]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c6:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	492b      	ldr	r1, [pc, #172]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
 80026da:	e01a      	b.n	8002712 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a28      	ldr	r2, [pc, #160]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026e8:	f7ff fc18 	bl	8001f1c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f0:	f7ff fc14 	bl	8001f1c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e314      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x1dc>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d073      	beq.n	8002806 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d005      	beq.n	8002730 <HAL_RCC_OscConfig+0x21c>
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d10e      	bne.n	8002748 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d10b      	bne.n	8002748 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d063      	beq.n	8002804 <HAL_RCC_OscConfig+0x2f0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d15f      	bne.n	8002804 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e2f1      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d106      	bne.n	8002760 <HAL_RCC_OscConfig+0x24c>
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e025      	b.n	80027ac <HAL_RCC_OscConfig+0x298>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002768:	d114      	bne.n	8002794 <HAL_RCC_OscConfig+0x280>
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a02      	ldr	r2, [pc, #8]	; (8002784 <HAL_RCC_OscConfig+0x270>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e013      	b.n	80027ac <HAL_RCC_OscConfig+0x298>
 8002784:	40021000 	.word	0x40021000
 8002788:	08009628 	.word	0x08009628
 800278c:	20000004 	.word	0x20000004
 8002790:	20000008 	.word	0x20000008
 8002794:	4ba0      	ldr	r3, [pc, #640]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a9f      	ldr	r2, [pc, #636]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800279a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b9d      	ldr	r3, [pc, #628]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a9c      	ldr	r2, [pc, #624]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80027a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7ff fbb2 	bl	8001f1c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027bc:	f7ff fbae 	bl	8001f1c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e2ae      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ce:	4b92      	ldr	r3, [pc, #584]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x2a8>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7ff fb9e 	bl	8001f1c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e4:	f7ff fb9a 	bl	8001f1c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e29a      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f6:	4b88      	ldr	r3, [pc, #544]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x2d0>
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d060      	beq.n	80028d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d005      	beq.n	8002824 <HAL_RCC_OscConfig+0x310>
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d119      	bne.n	8002852 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d116      	bne.n	8002852 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002824:	4b7c      	ldr	r3, [pc, #496]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_OscConfig+0x328>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e277      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b76      	ldr	r3, [pc, #472]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	4973      	ldr	r1, [pc, #460]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002850:	e040      	b.n	80028d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d023      	beq.n	80028a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285a:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6e      	ldr	r2, [pc, #440]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7ff fb59 	bl	8001f1c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286e:	f7ff fb55 	bl	8001f1c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e255      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002880:	4b65      	ldr	r3, [pc, #404]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288c:	4b62      	ldr	r3, [pc, #392]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	495f      	ldr	r1, [pc, #380]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
 80028a0:	e018      	b.n	80028d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a2:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a5c      	ldr	r2, [pc, #368]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80028a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7ff fb35 	bl	8001f1c <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b6:	f7ff fb31 	bl	8001f1c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e231      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d03c      	beq.n	800295a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01c      	beq.n	8002922 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e8:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80028ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ee:	4a4a      	ldr	r2, [pc, #296]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7ff fb10 	bl	8001f1c <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002900:	f7ff fb0c 	bl	8001f1c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e20c      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 8002914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ef      	beq.n	8002900 <HAL_RCC_OscConfig+0x3ec>
 8002920:	e01b      	b.n	800295a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 8002924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002928:	4a3b      	ldr	r2, [pc, #236]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002932:	f7ff faf3 	bl	8001f1c <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293a:	f7ff faef 	bl	8001f1c <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1ef      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800294c:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800294e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ef      	bne.n	800293a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80a6 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002968:	2300      	movs	r3, #0
 800296a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10d      	bne.n	8002994 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002982:	6593      	str	r3, [r2, #88]	; 0x58
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002990:	2301      	movs	r3, #1
 8002992:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002994:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <HAL_RCC_OscConfig+0x508>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d118      	bne.n	80029d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a0:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCC_OscConfig+0x508>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_RCC_OscConfig+0x508>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ac:	f7ff fab6 	bl	8001f1c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b4:	f7ff fab2 	bl	8001f1c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1b2      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_RCC_OscConfig+0x508>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_OscConfig+0x4d8>
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ea:	e029      	b.n	8002a40 <HAL_RCC_OscConfig+0x52c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d115      	bne.n	8002a20 <HAL_RCC_OscConfig+0x50c>
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a04:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a14:	e014      	b.n	8002a40 <HAL_RCC_OscConfig+0x52c>
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	4b9a      	ldr	r3, [pc, #616]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	4a99      	ldr	r2, [pc, #612]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a30:	4b96      	ldr	r3, [pc, #600]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	4a95      	ldr	r2, [pc, #596]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002a38:	f023 0304 	bic.w	r3, r3, #4
 8002a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d016      	beq.n	8002a76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a48:	f7ff fa68 	bl	8001f1c <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a50:	f7ff fa64 	bl	8001f1c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e162      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a66:	4b89      	ldr	r3, [pc, #548]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ed      	beq.n	8002a50 <HAL_RCC_OscConfig+0x53c>
 8002a74:	e015      	b.n	8002aa2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a76:	f7ff fa51 	bl	8001f1c <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7ff fa4d 	bl	8001f1c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e14b      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a94:	4b7d      	ldr	r3, [pc, #500]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1ed      	bne.n	8002a7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa2:	7ffb      	ldrb	r3, [r7, #31]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa8:	4b78      	ldr	r3, [pc, #480]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	4a77      	ldr	r2, [pc, #476]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d03c      	beq.n	8002b3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ac8:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ace:	4a6f      	ldr	r2, [pc, #444]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7ff fa20 	bl	8001f1c <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae0:	f7ff fa1c 	bl	8001f1c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e11c      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002af2:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ef      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x5cc>
 8002b00:	e01b      	b.n	8002b3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b02:	4b62      	ldr	r3, [pc, #392]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b08:	4a60      	ldr	r2, [pc, #384]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b12:	f7ff fa03 	bl	8001f1c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b1a:	f7ff f9ff 	bl	8001f1c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0ff      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b2c:	4b57      	ldr	r3, [pc, #348]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ef      	bne.n	8002b1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80f3 	beq.w	8002d2a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	f040 80c9 	bne.w	8002ce0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b4e:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 0203 	and.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d12c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d123      	bne.n	8002bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d11b      	bne.n	8002bbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d113      	bne.n	8002bbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d109      	bne.n	8002bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d06b      	beq.n	8002c94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d062      	beq.n	8002c88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bc2:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0ac      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bde:	f7ff f99d 	bl	8001f1c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be6:	f7ff f999 	bl	8001f1c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e099      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf8:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c04:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_RCC_OscConfig+0x77c>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c14:	3a01      	subs	r2, #1
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	4311      	orrs	r1, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c1e:	0212      	lsls	r2, r2, #8
 8002c20:	4311      	orrs	r1, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c26:	0852      	lsrs	r2, r2, #1
 8002c28:	3a01      	subs	r2, #1
 8002c2a:	0552      	lsls	r2, r2, #21
 8002c2c:	4311      	orrs	r1, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c32:	0852      	lsrs	r2, r2, #1
 8002c34:	3a01      	subs	r2, #1
 8002c36:	0652      	lsls	r2, r2, #25
 8002c38:	4311      	orrs	r1, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c3e:	06d2      	lsls	r2, r2, #27
 8002c40:	430a      	orrs	r2, r1
 8002c42:	4912      	ldr	r1, [pc, #72]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c48:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0f      	ldr	r2, [pc, #60]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c60:	f7ff f95c 	bl	8001f1c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c68:	f7ff f958 	bl	8001f1c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e058      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c86:	e050      	b.n	8002d2a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e04f      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c94:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d144      	bne.n	8002d2a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a23      	ldr	r2, [pc, #140]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002caa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cac:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a20      	ldr	r2, [pc, #128]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cb8:	f7ff f930 	bl	8001f1c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7ff f92c 	bl	8001f1c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e02c      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd2:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x7ac>
 8002cde:	e024      	b.n	8002d2a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d01f      	beq.n	8002d26 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002cec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7ff f913 	bl	8001f1c <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7ff f90f 	bl	8001f1c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e00f      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	4905      	ldr	r1, [pc, #20]	; (8002d34 <HAL_RCC_OscConfig+0x820>)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCC_OscConfig+0x824>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	60cb      	str	r3, [r1, #12]
 8002d24:	e001      	b.n	8002d2a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	feeefffc 	.word	0xfeeefffc

08002d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0e7      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d50:	4b75      	ldr	r3, [pc, #468]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d910      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 0207 	bic.w	r2, r3, #7
 8002d66:	4970      	ldr	r1, [pc, #448]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b6e      	ldr	r3, [pc, #440]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0cf      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d010      	beq.n	8002dae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d908      	bls.n	8002dae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4960      	ldr	r1, [pc, #384]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d04c      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc2:	4b5a      	ldr	r3, [pc, #360]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d121      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0a6      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d115      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e09a      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df2:	4b4e      	ldr	r3, [pc, #312]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e08e      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e02:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e086      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b46      	ldr	r3, [pc, #280]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4943      	ldr	r1, [pc, #268]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7ff f87a 	bl	8001f1c <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7ff f876 	bl	8001f1c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e06e      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d010      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d208      	bcs.n	8002e82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	492b      	ldr	r1, [pc, #172]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d210      	bcs.n	8002eb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 0207 	bic.w	r2, r3, #7
 8002e98:	4923      	ldr	r1, [pc, #140]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea0:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e036      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4918      	ldr	r1, [pc, #96]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002edc:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4910      	ldr	r1, [pc, #64]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ef0:	f000 f824 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	490b      	ldr	r1, [pc, #44]	; (8002f30 <HAL_RCC_ClockConfig+0x1f4>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0c:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002f0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_ClockConfig+0x1fc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe ffb1 	bl	8001e7c <HAL_InitTick>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40022000 	.word	0x40022000
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08009628 	.word	0x08009628
 8002f34:	20000004 	.word	0x20000004
 8002f38:	20000008 	.word	0x20000008

08002f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f54:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x34>
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d121      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d11e      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f70:	4b34      	ldr	r3, [pc, #208]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f7c:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e005      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f98:	4a2b      	ldr	r2, [pc, #172]	; (8003048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	e004      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d134      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d003      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xac>
 8002fe0:	e005      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe4:	617b      	str	r3, [r7, #20]
      break;
 8002fe6:	e005      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fea:	617b      	str	r3, [r7, #20]
      break;
 8002fec:	e002      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	617b      	str	r3, [r7, #20]
      break;
 8002ff2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	3301      	adds	r3, #1
 8003000:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	fb03 f202 	mul.w	r2, r3, r2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	0e5b      	lsrs	r3, r3, #25
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	3301      	adds	r3, #1
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003032:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003034:	69bb      	ldr	r3, [r7, #24]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	08009640 	.word	0x08009640
 800304c:	00f42400 	.word	0x00f42400
 8003050:	007a1200 	.word	0x007a1200

08003054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_RCC_GetHCLKFreq+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000004 	.word	0x20000004

0800306c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003070:	f7ff fff0 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	08009638 	.word	0x08009638

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800309c:	f7ff ffda 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0adb      	lsrs	r3, r3, #11
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4904      	ldr	r1, [pc, #16]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08009638 	.word	0x08009638

080030c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030dc:	f7ff f9b6 	bl	800244c <HAL_PWREx_GetVoltageRange>
 80030e0:	6178      	str	r0, [r7, #20]
 80030e2:	e014      	b.n	800310e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	4a24      	ldr	r2, [pc, #144]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6593      	str	r3, [r2, #88]	; 0x58
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030fc:	f7ff f9a6 	bl	800244c <HAL_PWREx_GetVoltageRange>
 8003100:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	4a1d      	ldr	r2, [pc, #116]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003114:	d10b      	bne.n	800312e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b80      	cmp	r3, #128	; 0x80
 800311a:	d919      	bls.n	8003150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2ba0      	cmp	r3, #160	; 0xa0
 8003120:	d902      	bls.n	8003128 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003122:	2302      	movs	r3, #2
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	e013      	b.n	8003150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003128:	2301      	movs	r3, #1
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	e010      	b.n	8003150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d902      	bls.n	800313a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003134:	2303      	movs	r3, #3
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	e00a      	b.n	8003150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b80      	cmp	r3, #128	; 0x80
 800313e:	d102      	bne.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003140:	2302      	movs	r3, #2
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	e004      	b.n	8003150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b70      	cmp	r3, #112	; 0x70
 800314a:	d101      	bne.n	8003150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800314c:	2301      	movs	r3, #1
 800314e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 0207 	bic.w	r2, r3, #7
 8003158:	4909      	ldr	r1, [pc, #36]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	429a      	cmp	r2, r3
 800316c:	d001      	beq.n	8003172 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	40022000 	.word	0x40022000

08003184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800318c:	2300      	movs	r3, #0
 800318e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003190:	2300      	movs	r3, #0
 8003192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319c:	2b00      	cmp	r3, #0
 800319e:	d031      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031a8:	d01a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80031aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031ae:	d814      	bhi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b8:	d10f      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80031ba:	4b5d      	ldr	r3, [pc, #372]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4a5c      	ldr	r2, [pc, #368]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031c6:	e00c      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3304      	adds	r3, #4
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f9ce 	bl	8003570 <RCCEx_PLLSAI1_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031d8:	e003      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	74fb      	strb	r3, [r7, #19]
      break;
 80031de:	e000      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80031e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e2:	7cfb      	ldrb	r3, [r7, #19]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10b      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031e8:	4b51      	ldr	r3, [pc, #324]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	494e      	ldr	r1, [pc, #312]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031fe:	e001      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 809e 	beq.w	800334e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003216:	4b46      	ldr	r3, [pc, #280]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00d      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4b40      	ldr	r3, [pc, #256]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	4a3f      	ldr	r2, [pc, #252]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003236:	6593      	str	r3, [r2, #88]	; 0x58
 8003238:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003244:	2301      	movs	r3, #1
 8003246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003248:	4b3a      	ldr	r3, [pc, #232]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a39      	ldr	r2, [pc, #228]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800324e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003254:	f7fe fe62 	bl	8001f1c <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800325a:	e009      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325c:	f7fe fe5e 	bl	8001f1c <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d902      	bls.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	74fb      	strb	r3, [r7, #19]
        break;
 800326e:	e005      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003270:	4b30      	ldr	r3, [pc, #192]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ef      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d15a      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003282:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01e      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	429a      	cmp	r2, r3
 800329c:	d019      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032aa:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032ca:	4a19      	ldr	r2, [pc, #100]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d016      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fe1e 	bl	8001f1c <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e2:	e00b      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe fe1a 	bl	8001f1c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d902      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	74fb      	strb	r3, [r7, #19]
            break;
 80032fa:	e006      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ec      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331e:	4904      	ldr	r1, [pc, #16]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003326:	e009      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800333c:	7c7b      	ldrb	r3, [r7, #17]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003342:	4b8a      	ldr	r3, [pc, #552]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	4a89      	ldr	r2, [pc, #548]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335a:	4b84      	ldr	r3, [pc, #528]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f023 0203 	bic.w	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4980      	ldr	r1, [pc, #512]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800337c:	4b7b      	ldr	r3, [pc, #492]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 020c 	bic.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	4978      	ldr	r1, [pc, #480]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800339e:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	496f      	ldr	r1, [pc, #444]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033c0:	4b6a      	ldr	r3, [pc, #424]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ce:	4967      	ldr	r1, [pc, #412]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033e2:	4b62      	ldr	r3, [pc, #392]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	495e      	ldr	r1, [pc, #376]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003404:	4b59      	ldr	r3, [pc, #356]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	4956      	ldr	r1, [pc, #344]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003426:	4b51      	ldr	r3, [pc, #324]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	494d      	ldr	r1, [pc, #308]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d028      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003448:	4b48      	ldr	r3, [pc, #288]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4945      	ldr	r1, [pc, #276]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003466:	d106      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003468:	4b40      	ldr	r3, [pc, #256]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a3f      	ldr	r2, [pc, #252]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800346e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003472:	60d3      	str	r3, [r2, #12]
 8003474:	e011      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800347e:	d10c      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	2101      	movs	r1, #1
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f872 	bl	8003570 <RCCEx_PLLSAI1_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d028      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034a6:	4b31      	ldr	r3, [pc, #196]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	492d      	ldr	r1, [pc, #180]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c4:	d106      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c6:	4b29      	ldr	r3, [pc, #164]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4a28      	ldr	r2, [pc, #160]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034d0:	60d3      	str	r3, [r2, #12]
 80034d2:	e011      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3304      	adds	r3, #4
 80034e2:	2101      	movs	r1, #1
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 f843 	bl	8003570 <RCCEx_PLLSAI1_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ee:	7cfb      	ldrb	r3, [r7, #19]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01c      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003512:	4916      	ldr	r1, [pc, #88]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003522:	d10c      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	2102      	movs	r1, #2
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f820 	bl	8003570 <RCCEx_PLLSAI1_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003550:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003558:	4904      	ldr	r1, [pc, #16]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003560:	7cbb      	ldrb	r3, [r7, #18]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000

08003570 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800357e:	4b74      	ldr	r3, [pc, #464]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d018      	beq.n	80035bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800358a:	4b71      	ldr	r3, [pc, #452]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0203 	and.w	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d10d      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
       ||
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035a2:	4b6b      	ldr	r3, [pc, #428]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
       ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d047      	beq.n	8003646 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	73fb      	strb	r3, [r7, #15]
 80035ba:	e044      	b.n	8003646 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d018      	beq.n	80035f6 <RCCEx_PLLSAI1_Config+0x86>
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d825      	bhi.n	8003614 <RCCEx_PLLSAI1_Config+0xa4>
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d002      	beq.n	80035d2 <RCCEx_PLLSAI1_Config+0x62>
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d009      	beq.n	80035e4 <RCCEx_PLLSAI1_Config+0x74>
 80035d0:	e020      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035d2:	4b5f      	ldr	r3, [pc, #380]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11d      	bne.n	800361a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e2:	e01a      	b.n	800361a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035e4:	4b5a      	ldr	r3, [pc, #360]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d116      	bne.n	800361e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f4:	e013      	b.n	800361e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035f6:	4b56      	ldr	r3, [pc, #344]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003602:	4b53      	ldr	r3, [pc, #332]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003612:	e006      	b.n	8003622 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      break;
 8003618:	e004      	b.n	8003624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003622:	bf00      	nop
    }

    if(status == HAL_OK)
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10d      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800362a:	4b49      	ldr	r3, [pc, #292]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	3b01      	subs	r3, #1
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	430b      	orrs	r3, r1
 8003640:	4943      	ldr	r1, [pc, #268]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003642:	4313      	orrs	r3, r2
 8003644:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d17c      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800364c:	4b40      	ldr	r3, [pc, #256]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a3f      	ldr	r2, [pc, #252]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fe fc60 	bl	8001f1c <HAL_GetTick>
 800365c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800365e:	e009      	b.n	8003674 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003660:	f7fe fc5c 	bl	8001f1c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d902      	bls.n	8003674 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	73fb      	strb	r3, [r7, #15]
        break;
 8003672:	e005      	b.n	8003680 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003674:	4b36      	ldr	r3, [pc, #216]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ef      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d15f      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d110      	bne.n	80036ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800368c:	4b30      	ldr	r3, [pc, #192]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003694:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6892      	ldr	r2, [r2, #8]
 800369c:	0211      	lsls	r1, r2, #8
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68d2      	ldr	r2, [r2, #12]
 80036a2:	06d2      	lsls	r2, r2, #27
 80036a4:	430a      	orrs	r2, r1
 80036a6:	492a      	ldr	r1, [pc, #168]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	610b      	str	r3, [r1, #16]
 80036ac:	e027      	b.n	80036fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d112      	bne.n	80036da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b4:	4b26      	ldr	r3, [pc, #152]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6892      	ldr	r2, [r2, #8]
 80036c4:	0211      	lsls	r1, r2, #8
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6912      	ldr	r2, [r2, #16]
 80036ca:	0852      	lsrs	r2, r2, #1
 80036cc:	3a01      	subs	r2, #1
 80036ce:	0552      	lsls	r2, r2, #21
 80036d0:	430a      	orrs	r2, r1
 80036d2:	491f      	ldr	r1, [pc, #124]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	610b      	str	r3, [r1, #16]
 80036d8:	e011      	b.n	80036fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6892      	ldr	r2, [r2, #8]
 80036ea:	0211      	lsls	r1, r2, #8
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6952      	ldr	r2, [r2, #20]
 80036f0:	0852      	lsrs	r2, r2, #1
 80036f2:	3a01      	subs	r2, #1
 80036f4:	0652      	lsls	r2, r2, #25
 80036f6:	430a      	orrs	r2, r1
 80036f8:	4915      	ldr	r1, [pc, #84]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003708:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fe fc07 	bl	8001f1c <HAL_GetTick>
 800370e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003710:	e009      	b.n	8003726 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003712:	f7fe fc03 	bl	8001f1c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d902      	bls.n	8003726 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	73fb      	strb	r3, [r7, #15]
          break;
 8003724:	e005      	b.n	8003732 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ef      	beq.n	8003712 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000

08003754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e095      	b.n	8003892 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003776:	d009      	beq.n	800378c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]
 800377e:	e005      	b.n	800378c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fe f9de 	bl	8001b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037cc:	d902      	bls.n	80037d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e002      	b.n	80037da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037e2:	d007      	beq.n	80037f4 <HAL_SPI_Init+0xa0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	ea42 0103 	orr.w	r1, r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	0c1b      	lsrs	r3, r3, #16
 8003850:	f003 0204 	and.w	r2, r3, #4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003870:	ea42 0103 	orr.w	r1, r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b088      	sub	sp, #32
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_SPI_Transmit+0x22>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e158      	b.n	8003b6e <HAL_SPI_Transmit+0x2d4>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c4:	f7fe fb2a 	bl	8001f1c <HAL_GetTick>
 80038c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d002      	beq.n	80038e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038de:	e13d      	b.n	8003b5c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_SPI_Transmit+0x52>
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038f0:	e134      	b.n	8003b5c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2203      	movs	r2, #3
 80038f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393c:	d10f      	bne.n	800395e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800395c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d007      	beq.n	800397c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800397a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003984:	d94b      	bls.n	8003a1e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_SPI_Transmit+0xfa>
 800398e:	8afb      	ldrh	r3, [r7, #22]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d13e      	bne.n	8003a12 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	881a      	ldrh	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	1c9a      	adds	r2, r3, #2
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039b8:	e02b      	b.n	8003a12 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d112      	bne.n	80039ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	881a      	ldrh	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	1c9a      	adds	r2, r3, #2
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ec:	e011      	b.n	8003a12 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ee:	f7fe fa95 	bl	8001f1c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d803      	bhi.n	8003a06 <HAL_SPI_Transmit+0x16c>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d102      	bne.n	8003a0c <HAL_SPI_Transmit+0x172>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a10:	e0a4      	b.n	8003b5c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ce      	bne.n	80039ba <HAL_SPI_Transmit+0x120>
 8003a1c:	e07c      	b.n	8003b18 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_SPI_Transmit+0x192>
 8003a26:	8afb      	ldrh	r3, [r7, #22]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d170      	bne.n	8003b0e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d912      	bls.n	8003a5c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b02      	subs	r3, #2
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a5a:	e058      	b.n	8003b0e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a82:	e044      	b.n	8003b0e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d12b      	bne.n	8003aea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d912      	bls.n	8003ac2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b02      	subs	r3, #2
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ac0:	e025      	b.n	8003b0e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ae8:	e011      	b.n	8003b0e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aea:	f7fe fa17 	bl	8001f1c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d803      	bhi.n	8003b02 <HAL_SPI_Transmit+0x268>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d102      	bne.n	8003b08 <HAL_SPI_Transmit+0x26e>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b0c:	e026      	b.n	8003b5c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1b5      	bne.n	8003a84 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	6839      	ldr	r1, [r7, #0]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fb5b 	bl	80041d8 <SPI_EndRxTxTransaction>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e000      	b.n	8003b5c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003b5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b08a      	sub	sp, #40	; 0x28
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b84:	2301      	movs	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_SPI_TransmitReceive+0x26>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e1fb      	b.n	8003f94 <HAL_SPI_TransmitReceive+0x41e>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ba4:	f7fe f9ba 	bl	8001f1c <HAL_GetTick>
 8003ba8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bb0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003bb8:	887b      	ldrh	r3, [r7, #2]
 8003bba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003bbc:	887b      	ldrh	r3, [r7, #2]
 8003bbe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bc0:	7efb      	ldrb	r3, [r7, #27]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d00e      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x6e>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bcc:	d106      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x66>
 8003bd6:	7efb      	ldrb	r3, [r7, #27]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d003      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003be2:	e1cd      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_SPI_TransmitReceive+0x80>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_SPI_TransmitReceive+0x80>
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003bfc:	e1c0      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d003      	beq.n	8003c12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	887a      	ldrh	r2, [r7, #2]
 8003c22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	887a      	ldrh	r2, [r7, #2]
 8003c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	887a      	ldrh	r2, [r7, #2]
 8003c3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c54:	d802      	bhi.n	8003c5c <HAL_SPI_TransmitReceive+0xe6>
 8003c56:	8a3b      	ldrh	r3, [r7, #16]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d908      	bls.n	8003c6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	e007      	b.n	8003c7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	d007      	beq.n	8003c9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ca4:	d97c      	bls.n	8003da0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x13e>
 8003cae:	8a7b      	ldrh	r3, [r7, #18]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d169      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	881a      	ldrh	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	1c9a      	adds	r2, r3, #2
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd8:	e056      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d11b      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x1aa>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d016      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x1aa>
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d113      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	881a      	ldrh	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	1c9a      	adds	r2, r3, #2
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d11c      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x1f2>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d016      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	b292      	uxth	r2, r2
 8003d46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	1c9a      	adds	r2, r3, #2
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d64:	2301      	movs	r3, #1
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d68:	f7fe f8d8 	bl	8001f1c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d807      	bhi.n	8003d88 <HAL_SPI_TransmitReceive+0x212>
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d003      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d86:	e0fb      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1a3      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x164>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d19d      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x164>
 8003d9e:	e0df      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x23a>
 8003da8:	8a7b      	ldrh	r3, [r7, #18]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	f040 80cb 	bne.w	8003f46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d912      	bls.n	8003de0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b02      	subs	r3, #2
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dde:	e0b2      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	7812      	ldrb	r2, [r2, #0]
 8003dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e06:	e09e      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d134      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x30a>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02f      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0x30a>
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d12c      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d912      	bls.n	8003e56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	881a      	ldrh	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	1c9a      	adds	r2, r3, #2
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b02      	subs	r3, #2
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e54:	e012      	b.n	8003e7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d148      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x3aa>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d042      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d923      	bls.n	8003eee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	b292      	uxth	r2, r2
 8003eb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	1c9a      	adds	r2, r3, #2
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b02      	subs	r3, #2
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d81f      	bhi.n	8003f1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	e016      	b.n	8003f1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f103 020c 	add.w	r2, r3, #12
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	7812      	ldrb	r2, [r2, #0]
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f20:	f7fd fffc 	bl	8001f1c <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d803      	bhi.n	8003f38 <HAL_SPI_TransmitReceive+0x3c2>
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	d102      	bne.n	8003f3e <HAL_SPI_TransmitReceive+0x3c8>
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f44:	e01c      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f47f af5b 	bne.w	8003e08 <HAL_SPI_TransmitReceive+0x292>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f47f af54 	bne.w	8003e08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f937 	bl	80041d8 <SPI_EndRxTxTransaction>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d006      	beq.n	8003f7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	661a      	str	r2, [r3, #96]	; 0x60
 8003f7c:	e000      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	; 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fac:	f7fd ffb6 	bl	8001f1c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fbc:	f7fd ffae 	bl	8001f1c <HAL_GetTick>
 8003fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fc2:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	015b      	lsls	r3, r3, #5
 8003fc8:	0d1b      	lsrs	r3, r3, #20
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	fb02 f303 	mul.w	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd2:	e054      	b.n	800407e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d050      	beq.n	800407e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fdc:	f7fd ff9e 	bl	8001f1c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d902      	bls.n	8003ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d13d      	bne.n	800406e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800400a:	d111      	bne.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004014:	d004      	beq.n	8004020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d107      	bne.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004038:	d10f      	bne.n	800405a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e017      	b.n	800409e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	3b01      	subs	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	429a      	cmp	r2, r3
 800409a:	d19b      	bne.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000004 	.word	0x20000004

080040ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040be:	f7fd ff2d 	bl	8001f1c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	4413      	add	r3, r2
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80040ce:	f7fd ff25 	bl	8001f1c <HAL_GetTick>
 80040d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80040dc:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	00da      	lsls	r2, r3, #3
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	0d1b      	lsrs	r3, r3, #20
 80040ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80040f4:	e060      	b.n	80041b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040fc:	d107      	bne.n	800410e <SPI_WaitFifoStateUntilTimeout+0x62>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800410c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d050      	beq.n	80041b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004116:	f7fd ff01 	bl	8001f1c <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004122:	429a      	cmp	r2, r3
 8004124:	d902      	bls.n	800412c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	2b00      	cmp	r3, #0
 800412a:	d13d      	bne.n	80041a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800413a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004144:	d111      	bne.n	800416a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414e:	d004      	beq.n	800415a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004158:	d107      	bne.n	800416a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004168:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004172:	d10f      	bne.n	8004194 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004192:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e010      	b.n	80041ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4013      	ands	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d196      	bne.n	80040f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3728      	adds	r7, #40	; 0x28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000004 	.word	0x20000004

080041d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7ff ff5b 	bl	80040ac <SPI_WaitFifoStateUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004200:	f043 0220 	orr.w	r2, r3, #32
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e027      	b.n	800425c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2200      	movs	r2, #0
 8004214:	2180      	movs	r1, #128	; 0x80
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff fec0 	bl	8003f9c <SPI_WaitFlagStateUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004226:	f043 0220 	orr.w	r2, r3, #32
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e014      	b.n	800425c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2200      	movs	r2, #0
 800423a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff ff34 	bl	80040ac <SPI_WaitFifoStateUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424e:	f043 0220 	orr.w	r2, r3, #32
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e000      	b.n	800425c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e040      	b.n	80042f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fd fcb0 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	; 0x24
 8004290:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8c0 	bl	8004428 <UART_SetConfig>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e022      	b.n	80042f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fae0 	bl	8004880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fb67 	bl	80049c4 <UART_CheckIdleState>
 80042f6:	4603      	mov	r3, r0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	; 0x28
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004314:	2b20      	cmp	r3, #32
 8004316:	f040 8082 	bne.w	800441e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_UART_Transmit+0x26>
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e07a      	b.n	8004420 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_UART_Transmit+0x38>
 8004334:	2302      	movs	r3, #2
 8004336:	e073      	b.n	8004420 <HAL_UART_Transmit+0x120>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2221      	movs	r2, #33	; 0x21
 800434c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800434e:	f7fd fde5 	bl	8001f1c <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436c:	d108      	bne.n	8004380 <HAL_UART_Transmit+0x80>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d104      	bne.n	8004380 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	e003      	b.n	8004388 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004390:	e02d      	b.n	80043ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	2180      	movs	r1, #128	; 0x80
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fb5a 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e039      	b.n	8004420 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	881a      	ldrh	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043be:	b292      	uxth	r2, r2
 80043c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	3302      	adds	r3, #2
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e008      	b.n	80043dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	b292      	uxth	r2, r2
 80043d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3301      	adds	r3, #1
 80043da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1cb      	bne.n	8004392 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	2140      	movs	r1, #64	; 0x40
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 fb26 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e005      	b.n	8004420 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e000      	b.n	8004420 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800441e:	2302      	movs	r3, #2
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800442c:	b08a      	sub	sp, #40	; 0x28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	4313      	orrs	r3, r2
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4bb4      	ldr	r3, [pc, #720]	; (8004728 <UART_SetConfig+0x300>)
 8004458:	4013      	ands	r3, r2
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004460:	430b      	orrs	r3, r1
 8004462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4aa9      	ldr	r2, [pc, #676]	; (800472c <UART_SetConfig+0x304>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004490:	4313      	orrs	r3, r2
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4aa0      	ldr	r2, [pc, #640]	; (8004730 <UART_SetConfig+0x308>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d126      	bne.n	8004500 <UART_SetConfig+0xd8>
 80044b2:	4ba0      	ldr	r3, [pc, #640]	; (8004734 <UART_SetConfig+0x30c>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d81b      	bhi.n	80044f8 <UART_SetConfig+0xd0>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <UART_SetConfig+0xa0>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044e9 	.word	0x080044e9
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044f1 	.word	0x080044f1
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044de:	e080      	b.n	80045e2 <UART_SetConfig+0x1ba>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e6:	e07c      	b.n	80045e2 <UART_SetConfig+0x1ba>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ee:	e078      	b.n	80045e2 <UART_SetConfig+0x1ba>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e074      	b.n	80045e2 <UART_SetConfig+0x1ba>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e070      	b.n	80045e2 <UART_SetConfig+0x1ba>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a8c      	ldr	r2, [pc, #560]	; (8004738 <UART_SetConfig+0x310>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d138      	bne.n	800457c <UART_SetConfig+0x154>
 800450a:	4b8a      	ldr	r3, [pc, #552]	; (8004734 <UART_SetConfig+0x30c>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b0c      	cmp	r3, #12
 8004516:	d82d      	bhi.n	8004574 <UART_SetConfig+0x14c>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <UART_SetConfig+0xf8>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004555 	.word	0x08004555
 8004524:	08004575 	.word	0x08004575
 8004528:	08004575 	.word	0x08004575
 800452c:	08004575 	.word	0x08004575
 8004530:	08004565 	.word	0x08004565
 8004534:	08004575 	.word	0x08004575
 8004538:	08004575 	.word	0x08004575
 800453c:	08004575 	.word	0x08004575
 8004540:	0800455d 	.word	0x0800455d
 8004544:	08004575 	.word	0x08004575
 8004548:	08004575 	.word	0x08004575
 800454c:	08004575 	.word	0x08004575
 8004550:	0800456d 	.word	0x0800456d
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455a:	e042      	b.n	80045e2 <UART_SetConfig+0x1ba>
 800455c:	2302      	movs	r3, #2
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004562:	e03e      	b.n	80045e2 <UART_SetConfig+0x1ba>
 8004564:	2304      	movs	r3, #4
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456a:	e03a      	b.n	80045e2 <UART_SetConfig+0x1ba>
 800456c:	2308      	movs	r3, #8
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e036      	b.n	80045e2 <UART_SetConfig+0x1ba>
 8004574:	2310      	movs	r3, #16
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457a:	e032      	b.n	80045e2 <UART_SetConfig+0x1ba>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a6a      	ldr	r2, [pc, #424]	; (800472c <UART_SetConfig+0x304>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d12a      	bne.n	80045dc <UART_SetConfig+0x1b4>
 8004586:	4b6b      	ldr	r3, [pc, #428]	; (8004734 <UART_SetConfig+0x30c>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004590:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004594:	d01a      	beq.n	80045cc <UART_SetConfig+0x1a4>
 8004596:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800459a:	d81b      	bhi.n	80045d4 <UART_SetConfig+0x1ac>
 800459c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a0:	d00c      	beq.n	80045bc <UART_SetConfig+0x194>
 80045a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a6:	d815      	bhi.n	80045d4 <UART_SetConfig+0x1ac>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <UART_SetConfig+0x18c>
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b0:	d008      	beq.n	80045c4 <UART_SetConfig+0x19c>
 80045b2:	e00f      	b.n	80045d4 <UART_SetConfig+0x1ac>
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ba:	e012      	b.n	80045e2 <UART_SetConfig+0x1ba>
 80045bc:	2302      	movs	r3, #2
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c2:	e00e      	b.n	80045e2 <UART_SetConfig+0x1ba>
 80045c4:	2304      	movs	r3, #4
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ca:	e00a      	b.n	80045e2 <UART_SetConfig+0x1ba>
 80045cc:	2308      	movs	r3, #8
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d2:	e006      	b.n	80045e2 <UART_SetConfig+0x1ba>
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045da:	e002      	b.n	80045e2 <UART_SetConfig+0x1ba>
 80045dc:	2310      	movs	r3, #16
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a51      	ldr	r2, [pc, #324]	; (800472c <UART_SetConfig+0x304>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d17a      	bne.n	80046e2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d824      	bhi.n	800463e <UART_SetConfig+0x216>
 80045f4:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0x1d4>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	08004621 	.word	0x08004621
 8004600:	0800463f 	.word	0x0800463f
 8004604:	08004629 	.word	0x08004629
 8004608:	0800463f 	.word	0x0800463f
 800460c:	0800462f 	.word	0x0800462f
 8004610:	0800463f 	.word	0x0800463f
 8004614:	0800463f 	.word	0x0800463f
 8004618:	0800463f 	.word	0x0800463f
 800461c:	08004637 	.word	0x08004637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004620:	f7fe fd24 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8004624:	61f8      	str	r0, [r7, #28]
        break;
 8004626:	e010      	b.n	800464a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004628:	4b44      	ldr	r3, [pc, #272]	; (800473c <UART_SetConfig+0x314>)
 800462a:	61fb      	str	r3, [r7, #28]
        break;
 800462c:	e00d      	b.n	800464a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800462e:	f7fe fc85 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8004632:	61f8      	str	r0, [r7, #28]
        break;
 8004634:	e009      	b.n	800464a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463a:	61fb      	str	r3, [r7, #28]
        break;
 800463c:	e005      	b.n	800464a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004648:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8107 	beq.w	8004860 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	429a      	cmp	r2, r3
 8004660:	d305      	bcc.n	800466e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	429a      	cmp	r2, r3
 800466c:	d903      	bls.n	8004676 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004674:	e0f4      	b.n	8004860 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2200      	movs	r2, #0
 800467a:	461c      	mov	r4, r3
 800467c:	4615      	mov	r5, r2
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	022b      	lsls	r3, r5, #8
 8004688:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800468c:	0222      	lsls	r2, r4, #8
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	6849      	ldr	r1, [r1, #4]
 8004692:	0849      	lsrs	r1, r1, #1
 8004694:	2000      	movs	r0, #0
 8004696:	4688      	mov	r8, r1
 8004698:	4681      	mov	r9, r0
 800469a:	eb12 0a08 	adds.w	sl, r2, r8
 800469e:	eb43 0b09 	adc.w	fp, r3, r9
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b0:	4650      	mov	r0, sl
 80046b2:	4659      	mov	r1, fp
 80046b4:	f7fc f8ea 	bl	800088c <__aeabi_uldivmod>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4613      	mov	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c6:	d308      	bcc.n	80046da <UART_SetConfig+0x2b2>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ce:	d204      	bcs.n	80046da <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	60da      	str	r2, [r3, #12]
 80046d8:	e0c2      	b.n	8004860 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046e0:	e0be      	b.n	8004860 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ea:	d16a      	bne.n	80047c2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80046ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d834      	bhi.n	800475e <UART_SetConfig+0x336>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <UART_SetConfig+0x2d4>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004741 	.word	0x08004741
 8004704:	08004749 	.word	0x08004749
 8004708:	0800475f 	.word	0x0800475f
 800470c:	0800474f 	.word	0x0800474f
 8004710:	0800475f 	.word	0x0800475f
 8004714:	0800475f 	.word	0x0800475f
 8004718:	0800475f 	.word	0x0800475f
 800471c:	08004757 	.word	0x08004757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe fca4 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8004724:	61f8      	str	r0, [r7, #28]
        break;
 8004726:	e020      	b.n	800476a <UART_SetConfig+0x342>
 8004728:	efff69f3 	.word	0xefff69f3
 800472c:	40008000 	.word	0x40008000
 8004730:	40013800 	.word	0x40013800
 8004734:	40021000 	.word	0x40021000
 8004738:	40004400 	.word	0x40004400
 800473c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7fe fcaa 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8004744:	61f8      	str	r0, [r7, #28]
        break;
 8004746:	e010      	b.n	800476a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004748:	4b4c      	ldr	r3, [pc, #304]	; (800487c <UART_SetConfig+0x454>)
 800474a:	61fb      	str	r3, [r7, #28]
        break;
 800474c:	e00d      	b.n	800476a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474e:	f7fe fbf5 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8004752:	61f8      	str	r0, [r7, #28]
        break;
 8004754:	e009      	b.n	800476a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	61fb      	str	r3, [r7, #28]
        break;
 800475c:	e005      	b.n	800476a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d077      	beq.n	8004860 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	005a      	lsls	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	441a      	add	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b0f      	cmp	r3, #15
 800478a:	d916      	bls.n	80047ba <UART_SetConfig+0x392>
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004792:	d212      	bcs.n	80047ba <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	b29b      	uxth	r3, r3
 8004798:	f023 030f 	bic.w	r3, r3, #15
 800479c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	8afb      	ldrh	r3, [r7, #22]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	8afa      	ldrh	r2, [r7, #22]
 80047b6:	60da      	str	r2, [r3, #12]
 80047b8:	e052      	b.n	8004860 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047c0:	e04e      	b.n	8004860 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d827      	bhi.n	800481a <UART_SetConfig+0x3f2>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x3a8>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	0800481b 	.word	0x0800481b
 80047ec:	0800481b 	.word	0x0800481b
 80047f0:	08004813 	.word	0x08004813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fe fc3a 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 80047f8:	61f8      	str	r0, [r7, #28]
        break;
 80047fa:	e014      	b.n	8004826 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7fe fc4c 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8004800:	61f8      	str	r0, [r7, #28]
        break;
 8004802:	e010      	b.n	8004826 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <UART_SetConfig+0x454>)
 8004806:	61fb      	str	r3, [r7, #28]
        break;
 8004808:	e00d      	b.n	8004826 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fe fb97 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 800480e:	61f8      	str	r0, [r7, #28]
        break;
 8004810:	e009      	b.n	8004826 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004816:	61fb      	str	r3, [r7, #28]
        break;
 8004818:	e005      	b.n	8004826 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004824:	bf00      	nop
    }

    if (pclk != 0U)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d019      	beq.n	8004860 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	085a      	lsrs	r2, r3, #1
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	441a      	add	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	d909      	bls.n	800485a <UART_SetConfig+0x432>
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484c:	d205      	bcs.n	800485a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	e002      	b.n	8004860 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800486c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004870:	4618      	mov	r0, r3
 8004872:	3728      	adds	r7, #40	; 0x28
 8004874:	46bd      	mov	sp, r7
 8004876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487a:	bf00      	nop
 800487c:	00f42400 	.word	0x00f42400

08004880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01a      	beq.n	8004996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800497e:	d10a      	bne.n	8004996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049d4:	f7fd faa2 	bl	8001f1c <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d10e      	bne.n	8004a06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f82d 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e023      	b.n	8004a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d10e      	bne.n	8004a32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f817 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e00d      	b.n	8004a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b09c      	sub	sp, #112	; 0x70
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a66:	e0a5      	b.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	f000 80a1 	beq.w	8004bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a72:	f7fd fa53 	bl	8001f1c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d302      	bcc.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d13e      	bne.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e6      	bne.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ada:	64ba      	str	r2, [r7, #72]	; 0x48
 8004adc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e5      	bne.n	8004aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e067      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d04f      	beq.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b22:	d147      	bne.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b2c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e6      	bne.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b80:	623a      	str	r2, [r7, #32]
 8004b82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	69f9      	ldr	r1, [r7, #28]
 8004b86:	6a3a      	ldr	r2, [r7, #32]
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e010      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	bf0c      	ite	eq
 8004bc4:	2301      	moveq	r3, #1
 8004bc6:	2300      	movne	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	f43f af4a 	beq.w	8004a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3770      	adds	r7, #112	; 0x70
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004be4:	4904      	ldr	r1, [pc, #16]	; (8004bf8 <MX_FATFS_Init+0x18>)
 8004be6:	4805      	ldr	r0, [pc, #20]	; (8004bfc <MX_FATFS_Init+0x1c>)
 8004be8:	f003 fdf2 	bl	80087d0 <FATFS_LinkDriver>
 8004bec:	4603      	mov	r3, r0
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <MX_FATFS_Init+0x20>)
 8004bf2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004bf4:	bf00      	nop
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	200022a8 	.word	0x200022a8
 8004bfc:	20000010 	.word	0x20000010
 8004c00:	200022a4 	.word	0x200022a4

08004c04 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004c08:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   // Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fc f96b 	bl	8000efc <SD_disk_initialize>
 8004c26:	4603      	mov	r3, r0
 8004c28:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	4603      	mov	r3, r0
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   // Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc fa48 	bl	80010d4 <SD_disk_status>
 8004c44:	4603      	mov	r3, r0
 8004c46:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
   // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8004c60:	7bf8      	ldrb	r0, [r7, #15]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	f7fc fa4a 	bl	8001100 <SD_disk_read>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
 //   return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8004c88:	7bf8      	ldrb	r0, [r7, #15]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	f7fc faa0 	bl	80011d4 <SD_disk_write>
 8004c94:	4603      	mov	r3, r0
 8004c96:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	603a      	str	r2, [r7, #0]
 8004caa:	71fb      	strb	r3, [r7, #7]
 8004cac:	460b      	mov	r3, r1
 8004cae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	79b9      	ldrb	r1, [r7, #6]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fc fb10 	bl	80012dc <SD_disk_ioctl>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <disk_status+0x30>)
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	79fa      	ldrb	r2, [r7, #7]
 8004ce0:	4905      	ldr	r1, [pc, #20]	; (8004cf8 <disk_status+0x30>)
 8004ce2:	440a      	add	r2, r1
 8004ce4:	7a12      	ldrb	r2, [r2, #8]
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	4798      	blx	r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	200024d4 	.word	0x200024d4

08004cfc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	4a0d      	ldr	r2, [pc, #52]	; (8004d44 <disk_initialize+0x48>)
 8004d0e:	5cd3      	ldrb	r3, [r2, r3]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d111      	bne.n	8004d38 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	4a0b      	ldr	r2, [pc, #44]	; (8004d44 <disk_initialize+0x48>)
 8004d18:	2101      	movs	r1, #1
 8004d1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <disk_initialize+0x48>)
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	79fa      	ldrb	r2, [r7, #7]
 8004d2a:	4906      	ldr	r1, [pc, #24]	; (8004d44 <disk_initialize+0x48>)
 8004d2c:	440a      	add	r2, r1
 8004d2e:	7a12      	ldrb	r2, [r2, #8]
 8004d30:	4610      	mov	r0, r2
 8004d32:	4798      	blx	r3
 8004d34:	4603      	mov	r3, r0
 8004d36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	200024d4 	.word	0x200024d4

08004d48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4603      	mov	r3, r0
 8004d56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <disk_read+0x3c>)
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	689c      	ldr	r4, [r3, #8]
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <disk_read+0x3c>)
 8004d68:	4413      	add	r3, r2
 8004d6a:	7a18      	ldrb	r0, [r3, #8]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	47a0      	blx	r4
 8004d74:	4603      	mov	r3, r0
 8004d76:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd90      	pop	{r4, r7, pc}
 8004d82:	bf00      	nop
 8004d84:	200024d4 	.word	0x200024d4

08004d88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <disk_write+0x3c>)
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68dc      	ldr	r4, [r3, #12]
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <disk_write+0x3c>)
 8004da8:	4413      	add	r3, r2
 8004daa:	7a18      	ldrb	r0, [r3, #8]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	47a0      	blx	r4
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd90      	pop	{r4, r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200024d4 	.word	0x200024d4

08004dc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	603a      	str	r2, [r7, #0]
 8004dd2:	71fb      	strb	r3, [r7, #7]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <disk_ioctl+0x38>)
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	79fa      	ldrb	r2, [r7, #7]
 8004de6:	4906      	ldr	r1, [pc, #24]	; (8004e00 <disk_ioctl+0x38>)
 8004de8:	440a      	add	r2, r1
 8004dea:	7a10      	ldrb	r0, [r2, #8]
 8004dec:	79b9      	ldrb	r1, [r7, #6]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	4798      	blx	r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	73fb      	strb	r3, [r7, #15]
  return res;
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	200024d4 	.word	0x200024d4

08004e04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004e14:	89fb      	ldrh	r3, [r7, #14]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	b21a      	sxth	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	b21b      	sxth	r3, r3
 8004e20:	4313      	orrs	r3, r2
 8004e22:	b21b      	sxth	r3, r3
 8004e24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004e26:	89fb      	ldrh	r3, [r7, #14]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3303      	adds	r3, #3
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	3202      	adds	r2, #2
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	3201      	adds	r2, #1
 8004e5a:	7812      	ldrb	r2, [r2, #0]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	7812      	ldrb	r2, [r2, #0]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	887a      	ldrh	r2, [r7, #2]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	887b      	ldrh	r3, [r7, #2]
 8004e94:	0a1b      	lsrs	r3, r3, #8
 8004e96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	607a      	str	r2, [r7, #4]
 8004e9e:	887a      	ldrh	r2, [r7, #2]
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	0a1b      	lsrs	r3, r3, #8
 8004eee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00d      	beq.n	8004f3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	1c53      	adds	r3, r2, #1
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	1c59      	adds	r1, r3, #1
 8004f2c:	6179      	str	r1, [r7, #20]
 8004f2e:	7812      	ldrb	r2, [r2, #0]
 8004f30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f1      	bne.n	8004f22 <mem_cpy+0x1a>
	}
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004f4a:	b480      	push	{r7}
 8004f4c:	b087      	sub	sp, #28
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	617a      	str	r2, [r7, #20]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	607b      	str	r3, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f3      	bne.n	8004f5a <mem_set+0x10>
}
 8004f72:	bf00      	nop
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004f80:	b480      	push	{r7}
 8004f82:	b089      	sub	sp, #36	; 0x24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	61fa      	str	r2, [r7, #28]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	61ba      	str	r2, [r7, #24]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	1acb      	subs	r3, r1, r3
 8004fac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <mem_cmp+0x40>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0eb      	beq.n	8004f98 <mem_cmp+0x18>

	return r;
 8004fc0:	697b      	ldr	r3, [r7, #20]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3724      	adds	r7, #36	; 0x24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004fd8:	e002      	b.n	8004fe0 <chk_chr+0x12>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <chk_chr+0x26>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d1f2      	bne.n	8004fda <chk_chr+0xc>
	return *str;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	e029      	b.n	800506c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005018:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <chk_lock+0xb4>)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	4413      	add	r3, r2
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01d      	beq.n	8005062 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005026:	4a24      	ldr	r2, [pc, #144]	; (80050b8 <chk_lock+0xb4>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	4413      	add	r3, r2
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d116      	bne.n	8005066 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005038:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <chk_lock+0xb4>)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	4413      	add	r3, r2
 8005040:	3304      	adds	r3, #4
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005048:	429a      	cmp	r2, r3
 800504a:	d10c      	bne.n	8005066 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800504c:	4a1a      	ldr	r2, [pc, #104]	; (80050b8 <chk_lock+0xb4>)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	4413      	add	r3, r2
 8005054:	3308      	adds	r3, #8
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800505c:	429a      	cmp	r2, r3
 800505e:	d102      	bne.n	8005066 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005060:	e007      	b.n	8005072 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005062:	2301      	movs	r3, #1
 8005064:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3301      	adds	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d9d2      	bls.n	8005018 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d109      	bne.n	800508c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <chk_lock+0x80>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d101      	bne.n	8005088 <chk_lock+0x84>
 8005084:	2300      	movs	r3, #0
 8005086:	e010      	b.n	80050aa <chk_lock+0xa6>
 8005088:	2312      	movs	r3, #18
 800508a:	e00e      	b.n	80050aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d108      	bne.n	80050a4 <chk_lock+0xa0>
 8005092:	4a09      	ldr	r2, [pc, #36]	; (80050b8 <chk_lock+0xb4>)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	4413      	add	r3, r2
 800509a:	330c      	adds	r3, #12
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a2:	d101      	bne.n	80050a8 <chk_lock+0xa4>
 80050a4:	2310      	movs	r3, #16
 80050a6:	e000      	b.n	80050aa <chk_lock+0xa6>
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	200022b4 	.word	0x200022b4

080050bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050c2:	2300      	movs	r3, #0
 80050c4:	607b      	str	r3, [r7, #4]
 80050c6:	e002      	b.n	80050ce <enq_lock+0x12>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3301      	adds	r3, #1
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d806      	bhi.n	80050e2 <enq_lock+0x26>
 80050d4:	4a09      	ldr	r2, [pc, #36]	; (80050fc <enq_lock+0x40>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	4413      	add	r3, r2
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f2      	bne.n	80050c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	bf14      	ite	ne
 80050e8:	2301      	movne	r3, #1
 80050ea:	2300      	moveq	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	200022b4 	.word	0x200022b4

08005100 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e01f      	b.n	8005150 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005110:	4a41      	ldr	r2, [pc, #260]	; (8005218 <inc_lock+0x118>)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	4413      	add	r3, r2
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d113      	bne.n	800514a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005122:	4a3d      	ldr	r2, [pc, #244]	; (8005218 <inc_lock+0x118>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	4413      	add	r3, r2
 800512a:	3304      	adds	r3, #4
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005132:	429a      	cmp	r2, r3
 8005134:	d109      	bne.n	800514a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005136:	4a38      	ldr	r2, [pc, #224]	; (8005218 <inc_lock+0x118>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	4413      	add	r3, r2
 800513e:	3308      	adds	r3, #8
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005146:	429a      	cmp	r2, r3
 8005148:	d006      	beq.n	8005158 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3301      	adds	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d9dc      	bls.n	8005110 <inc_lock+0x10>
 8005156:	e000      	b.n	800515a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005158:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d132      	bne.n	80051c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e002      	b.n	800516c <inc_lock+0x6c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d806      	bhi.n	8005180 <inc_lock+0x80>
 8005172:	4a29      	ldr	r2, [pc, #164]	; (8005218 <inc_lock+0x118>)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	4413      	add	r3, r2
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f2      	bne.n	8005166 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d101      	bne.n	800518a <inc_lock+0x8a>
 8005186:	2300      	movs	r3, #0
 8005188:	e040      	b.n	800520c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4922      	ldr	r1, [pc, #136]	; (8005218 <inc_lock+0x118>)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	440b      	add	r3, r1
 8005196:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	491e      	ldr	r1, [pc, #120]	; (8005218 <inc_lock+0x118>)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	440b      	add	r3, r1
 80051a4:	3304      	adds	r3, #4
 80051a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695a      	ldr	r2, [r3, #20]
 80051ac:	491a      	ldr	r1, [pc, #104]	; (8005218 <inc_lock+0x118>)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	440b      	add	r3, r1
 80051b4:	3308      	adds	r3, #8
 80051b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <inc_lock+0x118>)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	4413      	add	r3, r2
 80051c0:	330c      	adds	r3, #12
 80051c2:	2200      	movs	r2, #0
 80051c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <inc_lock+0xe0>
 80051cc:	4a12      	ldr	r2, [pc, #72]	; (8005218 <inc_lock+0x118>)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	4413      	add	r3, r2
 80051d4:	330c      	adds	r3, #12
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <inc_lock+0xe0>
 80051dc:	2300      	movs	r3, #0
 80051de:	e015      	b.n	800520c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d108      	bne.n	80051f8 <inc_lock+0xf8>
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <inc_lock+0x118>)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	4413      	add	r3, r2
 80051ee:	330c      	adds	r3, #12
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	3301      	adds	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	e001      	b.n	80051fc <inc_lock+0xfc>
 80051f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051fc:	4906      	ldr	r1, [pc, #24]	; (8005218 <inc_lock+0x118>)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	440b      	add	r3, r1
 8005204:	330c      	adds	r3, #12
 8005206:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	200022b4 	.word	0x200022b4

0800521c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3b01      	subs	r3, #1
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d825      	bhi.n	800527c <dec_lock+0x60>
		n = Files[i].ctr;
 8005230:	4a17      	ldr	r2, [pc, #92]	; (8005290 <dec_lock+0x74>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	4413      	add	r3, r2
 8005238:	330c      	adds	r3, #12
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800523e:	89fb      	ldrh	r3, [r7, #14]
 8005240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005244:	d101      	bne.n	800524a <dec_lock+0x2e>
 8005246:	2300      	movs	r3, #0
 8005248:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800524a:	89fb      	ldrh	r3, [r7, #14]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <dec_lock+0x3a>
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	3b01      	subs	r3, #1
 8005254:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005256:	4a0e      	ldr	r2, [pc, #56]	; (8005290 <dec_lock+0x74>)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	4413      	add	r3, r2
 800525e:	330c      	adds	r3, #12
 8005260:	89fa      	ldrh	r2, [r7, #14]
 8005262:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005264:	89fb      	ldrh	r3, [r7, #14]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d105      	bne.n	8005276 <dec_lock+0x5a>
 800526a:	4a09      	ldr	r2, [pc, #36]	; (8005290 <dec_lock+0x74>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	4413      	add	r3, r2
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	737b      	strb	r3, [r7, #13]
 800527a:	e001      	b.n	8005280 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800527c:	2302      	movs	r3, #2
 800527e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005280:	7b7b      	ldrb	r3, [r7, #13]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	200022b4 	.word	0x200022b4

08005294 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e010      	b.n	80052c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80052a2:	4a0d      	ldr	r2, [pc, #52]	; (80052d8 <clear_lock+0x44>)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	4413      	add	r3, r2
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d105      	bne.n	80052be <clear_lock+0x2a>
 80052b2:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <clear_lock+0x44>)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	4413      	add	r3, r2
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3301      	adds	r3, #1
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d9eb      	bls.n	80052a2 <clear_lock+0xe>
	}
}
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	200022b4 	.word	0x200022b4

080052dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	78db      	ldrb	r3, [r3, #3]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d034      	beq.n	800535a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7858      	ldrb	r0, [r3, #1]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005300:	2301      	movs	r3, #1
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	f7ff fd40 	bl	8004d88 <disk_write>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <sync_window+0x38>
			res = FR_DISK_ERR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
 8005312:	e022      	b.n	800535a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	1ad2      	subs	r2, r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	429a      	cmp	r2, r3
 8005328:	d217      	bcs.n	800535a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	789b      	ldrb	r3, [r3, #2]
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	e010      	b.n	8005354 <sync_window+0x78>
					wsect += fs->fsize;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	7858      	ldrb	r0, [r3, #1]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005346:	2301      	movs	r3, #1
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	f7ff fd1d 	bl	8004d88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3b01      	subs	r3, #1
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d8eb      	bhi.n	8005332 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d01b      	beq.n	80053b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff ffad 	bl	80052dc <sync_window>
 8005382:	4603      	mov	r3, r0
 8005384:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d113      	bne.n	80053b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7858      	ldrb	r0, [r3, #1]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005396:	2301      	movs	r3, #1
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	f7ff fcd5 	bl	8004d48 <disk_read>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295
 80053a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff ff87 	bl	80052dc <sync_window>
 80053ce:	4603      	mov	r3, r0
 80053d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d159      	bne.n	800548c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d149      	bne.n	8005474 <sync_fs+0xb4>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	791b      	ldrb	r3, [r3, #4]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d145      	bne.n	8005474 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	899b      	ldrh	r3, [r3, #12]
 80053f2:	461a      	mov	r2, r3
 80053f4:	2100      	movs	r1, #0
 80053f6:	f7ff fda8 	bl	8004f4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3338      	adds	r3, #56	; 0x38
 80053fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005402:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fd37 	bl	8004e7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3338      	adds	r3, #56	; 0x38
 8005410:	4921      	ldr	r1, [pc, #132]	; (8005498 <sync_fs+0xd8>)
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fd4c 	bl	8004eb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3338      	adds	r3, #56	; 0x38
 800541c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005420:	491e      	ldr	r1, [pc, #120]	; (800549c <sync_fs+0xdc>)
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fd44 	bl	8004eb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3338      	adds	r3, #56	; 0x38
 800542c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7ff fd3a 	bl	8004eb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3338      	adds	r3, #56	; 0x38
 8005440:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f7ff fd30 	bl	8004eb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	7858      	ldrb	r0, [r3, #1]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005468:	2301      	movs	r3, #1
 800546a:	f7ff fc8d 	bl	8004d88 <disk_write>
			fs->fsi_flag = 0;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	2200      	movs	r2, #0
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fca3 	bl	8004dc8 <disk_ioctl>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <sync_fs+0xcc>
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	41615252 	.word	0x41615252
 800549c:	61417272 	.word	0x61417272

080054a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	3b02      	subs	r3, #2
 80054ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	3b02      	subs	r3, #2
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d301      	bcc.n	80054c0 <clust2sect+0x20>
 80054bc:	2300      	movs	r3, #0
 80054be:	e008      	b.n	80054d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	895b      	ldrh	r3, [r3, #10]
 80054c4:	461a      	mov	r2, r3
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	fb03 f202 	mul.w	r2, r3, r2
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	4413      	add	r3, r2
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b086      	sub	sp, #24
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d904      	bls.n	80054fe <get_fat+0x20>
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d302      	bcc.n	8005504 <get_fat+0x26>
		val = 1;	/* Internal error */
 80054fe:	2301      	movs	r3, #1
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e0bb      	b.n	800567c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005504:	f04f 33ff 	mov.w	r3, #4294967295
 8005508:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b03      	cmp	r3, #3
 8005510:	f000 8083 	beq.w	800561a <get_fat+0x13c>
 8005514:	2b03      	cmp	r3, #3
 8005516:	f300 80a7 	bgt.w	8005668 <get_fat+0x18a>
 800551a:	2b01      	cmp	r3, #1
 800551c:	d002      	beq.n	8005524 <get_fat+0x46>
 800551e:	2b02      	cmp	r3, #2
 8005520:	d056      	beq.n	80055d0 <get_fat+0xf2>
 8005522:	e0a1      	b.n	8005668 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	899b      	ldrh	r3, [r3, #12]
 800553a:	4619      	mov	r1, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005542:	4413      	add	r3, r2
 8005544:	4619      	mov	r1, r3
 8005546:	6938      	ldr	r0, [r7, #16]
 8005548:	f7ff ff0c 	bl	8005364 <move_window>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	f040 808d 	bne.w	800566e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	60fa      	str	r2, [r7, #12]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	8992      	ldrh	r2, [r2, #12]
 800555e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005562:	fb01 f202 	mul.w	r2, r1, r2
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4413      	add	r3, r2
 800556c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005570:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	899b      	ldrh	r3, [r3, #12]
 800557a:	4619      	mov	r1, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005582:	4413      	add	r3, r2
 8005584:	4619      	mov	r1, r3
 8005586:	6938      	ldr	r0, [r7, #16]
 8005588:	f7ff feec 	bl	8005364 <move_window>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d16f      	bne.n	8005672 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	899b      	ldrh	r3, [r3, #12]
 8005596:	461a      	mov	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	fbb3 f1f2 	udiv	r1, r3, r2
 800559e:	fb01 f202 	mul.w	r2, r1, r2
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4413      	add	r3, r2
 80055a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	461a      	mov	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <get_fat+0xe8>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	091b      	lsrs	r3, r3, #4
 80055c4:	e002      	b.n	80055cc <get_fat+0xee>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055cc:	617b      	str	r3, [r7, #20]
			break;
 80055ce:	e055      	b.n	800567c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	899b      	ldrh	r3, [r3, #12]
 80055d8:	085b      	lsrs	r3, r3, #1
 80055da:	b29b      	uxth	r3, r3
 80055dc:	4619      	mov	r1, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80055e4:	4413      	add	r3, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	6938      	ldr	r0, [r7, #16]
 80055ea:	f7ff febb 	bl	8005364 <move_window>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d140      	bne.n	8005676 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	8992      	ldrh	r2, [r2, #12]
 8005602:	fbb3 f0f2 	udiv	r0, r3, r2
 8005606:	fb00 f202 	mul.w	r2, r0, r2
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	440b      	add	r3, r1
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fbf8 	bl	8004e04 <ld_word>
 8005614:	4603      	mov	r3, r0
 8005616:	617b      	str	r3, [r7, #20]
			break;
 8005618:	e030      	b.n	800567c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	899b      	ldrh	r3, [r3, #12]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	b29b      	uxth	r3, r3
 8005626:	4619      	mov	r1, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	fbb3 f3f1 	udiv	r3, r3, r1
 800562e:	4413      	add	r3, r2
 8005630:	4619      	mov	r1, r3
 8005632:	6938      	ldr	r0, [r7, #16]
 8005634:	f7ff fe96 	bl	8005364 <move_window>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d11d      	bne.n	800567a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	8992      	ldrh	r2, [r2, #12]
 800564c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005650:	fb00 f202 	mul.w	r2, r0, r2
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	440b      	add	r3, r1
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fbeb 	bl	8004e34 <ld_dword>
 800565e:	4603      	mov	r3, r0
 8005660:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005664:	617b      	str	r3, [r7, #20]
			break;
 8005666:	e009      	b.n	800567c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005668:	2301      	movs	r3, #1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e006      	b.n	800567c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800566e:	bf00      	nop
 8005670:	e004      	b.n	800567c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005672:	bf00      	nop
 8005674:	e002      	b.n	800567c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005676:	bf00      	nop
 8005678:	e000      	b.n	800567c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800567a:	bf00      	nop
		}
	}

	return val;
 800567c:	697b      	ldr	r3, [r7, #20]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005686:	b590      	push	{r4, r7, lr}
 8005688:	b089      	sub	sp, #36	; 0x24
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005692:	2302      	movs	r3, #2
 8005694:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b01      	cmp	r3, #1
 800569a:	f240 8102 	bls.w	80058a2 <put_fat+0x21c>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	f080 80fc 	bcs.w	80058a2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	f000 80b6 	beq.w	8005820 <put_fat+0x19a>
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	f300 80fd 	bgt.w	80058b4 <put_fat+0x22e>
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d003      	beq.n	80056c6 <put_fat+0x40>
 80056be:	2b02      	cmp	r3, #2
 80056c0:	f000 8083 	beq.w	80057ca <put_fat+0x144>
 80056c4:	e0f6      	b.n	80058b4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4413      	add	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	899b      	ldrh	r3, [r3, #12]
 80056dc:	4619      	mov	r1, r3
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80056e4:	4413      	add	r3, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff fe3b 	bl	8005364 <move_window>
 80056ee:	4603      	mov	r3, r0
 80056f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056f2:	7ffb      	ldrb	r3, [r7, #31]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f040 80d6 	bne.w	80058a6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	61ba      	str	r2, [r7, #24]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	8992      	ldrh	r2, [r2, #12]
 800570a:	fbb3 f0f2 	udiv	r0, r3, r2
 800570e:	fb00 f202 	mul.w	r2, r0, r2
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	440b      	add	r3, r1
 8005716:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00d      	beq.n	800573e <put_fat+0xb8>
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b25b      	sxtb	r3, r3
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	b25a      	sxtb	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	b25b      	sxtb	r3, r3
 8005736:	4313      	orrs	r3, r2
 8005738:	b25b      	sxtb	r3, r3
 800573a:	b2db      	uxtb	r3, r3
 800573c:	e001      	b.n	8005742 <put_fat+0xbc>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	899b      	ldrh	r3, [r3, #12]
 8005754:	4619      	mov	r1, r3
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	fbb3 f3f1 	udiv	r3, r3, r1
 800575c:	4413      	add	r3, r2
 800575e:	4619      	mov	r1, r3
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff fdff 	bl	8005364 <move_window>
 8005766:	4603      	mov	r3, r0
 8005768:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800576a:	7ffb      	ldrb	r3, [r7, #31]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f040 809c 	bne.w	80058aa <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	899b      	ldrh	r3, [r3, #12]
 800577c:	461a      	mov	r2, r3
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	fbb3 f0f2 	udiv	r0, r3, r2
 8005784:	fb00 f202 	mul.w	r2, r0, r2
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	440b      	add	r3, r1
 800578c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <put_fat+0x11a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	091b      	lsrs	r3, r3, #4
 800579c:	b2db      	uxtb	r3, r3
 800579e:	e00e      	b.n	80057be <put_fat+0x138>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	b25b      	sxtb	r3, r3
 80057a6:	f023 030f 	bic.w	r3, r3, #15
 80057aa:	b25a      	sxtb	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	b25b      	sxtb	r3, r3
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	b25b      	sxtb	r3, r3
 80057b8:	4313      	orrs	r3, r2
 80057ba:	b25b      	sxtb	r3, r3
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	70da      	strb	r2, [r3, #3]
			break;
 80057c8:	e074      	b.n	80058b4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	899b      	ldrh	r3, [r3, #12]
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	4619      	mov	r1, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	fbb3 f3f1 	udiv	r3, r3, r1
 80057de:	4413      	add	r3, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f7ff fdbe 	bl	8005364 <move_window>
 80057e8:	4603      	mov	r3, r0
 80057ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057ec:	7ffb      	ldrb	r3, [r7, #31]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d15d      	bne.n	80058ae <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	8992      	ldrh	r2, [r2, #12]
 8005800:	fbb3 f0f2 	udiv	r0, r3, r2
 8005804:	fb00 f202 	mul.w	r2, r0, r2
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	440b      	add	r3, r1
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	b292      	uxth	r2, r2
 8005810:	4611      	mov	r1, r2
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fb31 	bl	8004e7a <st_word>
			fs->wflag = 1;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	70da      	strb	r2, [r3, #3]
			break;
 800581e:	e049      	b.n	80058b4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	899b      	ldrh	r3, [r3, #12]
 8005828:	089b      	lsrs	r3, r3, #2
 800582a:	b29b      	uxth	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	fbb3 f3f1 	udiv	r3, r3, r1
 8005834:	4413      	add	r3, r2
 8005836:	4619      	mov	r1, r3
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff fd93 	bl	8005364 <move_window>
 800583e:	4603      	mov	r3, r0
 8005840:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005842:	7ffb      	ldrb	r3, [r7, #31]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d134      	bne.n	80058b2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	8992      	ldrh	r2, [r2, #12]
 800585c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005860:	fb00 f202 	mul.w	r2, r0, r2
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	440b      	add	r3, r1
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fae3 	bl	8004e34 <ld_dword>
 800586e:	4603      	mov	r3, r0
 8005870:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005874:	4323      	orrs	r3, r4
 8005876:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	8992      	ldrh	r2, [r2, #12]
 8005886:	fbb3 f0f2 	udiv	r0, r3, r2
 800588a:	fb00 f202 	mul.w	r2, r0, r2
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	440b      	add	r3, r1
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fb0b 	bl	8004eb0 <st_dword>
			fs->wflag = 1;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	70da      	strb	r2, [r3, #3]
			break;
 80058a0:	e008      	b.n	80058b4 <put_fat+0x22e>
		}
	}
 80058a2:	bf00      	nop
 80058a4:	e006      	b.n	80058b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80058a6:	bf00      	nop
 80058a8:	e004      	b.n	80058b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80058b2:	bf00      	nop
	return res;
 80058b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3724      	adds	r7, #36	; 0x24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd90      	pop	{r4, r7, pc}

080058be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b088      	sub	sp, #32
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d904      	bls.n	80058e4 <remove_chain+0x26>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d301      	bcc.n	80058e8 <remove_chain+0x2a>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e04b      	b.n	8005980 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00c      	beq.n	8005908 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	69b8      	ldr	r0, [r7, #24]
 80058f6:	f7ff fec6 	bl	8005686 <put_fat>
 80058fa:	4603      	mov	r3, r0
 80058fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80058fe:	7ffb      	ldrb	r3, [r7, #31]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <remove_chain+0x4a>
 8005904:	7ffb      	ldrb	r3, [r7, #31]
 8005906:	e03b      	b.n	8005980 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff fde7 	bl	80054de <get_fat>
 8005910:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d031      	beq.n	800597c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <remove_chain+0x64>
 800591e:	2302      	movs	r3, #2
 8005920:	e02e      	b.n	8005980 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d101      	bne.n	800592e <remove_chain+0x70>
 800592a:	2301      	movs	r3, #1
 800592c:	e028      	b.n	8005980 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800592e:	2200      	movs	r2, #0
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	69b8      	ldr	r0, [r7, #24]
 8005934:	f7ff fea7 	bl	8005686 <put_fat>
 8005938:	4603      	mov	r3, r0
 800593a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800593c:	7ffb      	ldrb	r3, [r7, #31]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <remove_chain+0x88>
 8005942:	7ffb      	ldrb	r3, [r7, #31]
 8005944:	e01c      	b.n	8005980 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	3b02      	subs	r3, #2
 8005950:	429a      	cmp	r2, r3
 8005952:	d20b      	bcs.n	800596c <remove_chain+0xae>
			fs->free_clst++;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	791b      	ldrb	r3, [r3, #4]
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	d3c6      	bcc.n	8005908 <remove_chain+0x4a>
 800597a:	e000      	b.n	800597e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800597c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3720      	adds	r7, #32
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10d      	bne.n	80059ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d004      	beq.n	80059b4 <create_chain+0x2c>
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d31b      	bcc.n	80059ec <create_chain+0x64>
 80059b4:	2301      	movs	r3, #1
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	e018      	b.n	80059ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff fd8e 	bl	80054de <get_fat>
 80059c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d801      	bhi.n	80059ce <create_chain+0x46>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e070      	b.n	8005ab0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d4:	d101      	bne.n	80059da <create_chain+0x52>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	e06a      	b.n	8005ab0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d201      	bcs.n	80059e8 <create_chain+0x60>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	e063      	b.n	8005ab0 <create_chain+0x128>
		scl = clst;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	3301      	adds	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d307      	bcc.n	8005a10 <create_chain+0x88>
				ncl = 2;
 8005a00:	2302      	movs	r3, #2
 8005a02:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d901      	bls.n	8005a10 <create_chain+0x88>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e04f      	b.n	8005ab0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005a10:	69f9      	ldr	r1, [r7, #28]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fd63 	bl	80054de <get_fat>
 8005a18:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00e      	beq.n	8005a3e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d003      	beq.n	8005a2e <create_chain+0xa6>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d101      	bne.n	8005a32 <create_chain+0xaa>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	e03e      	b.n	8005ab0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d1da      	bne.n	80059f0 <create_chain+0x68>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e038      	b.n	8005ab0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005a3e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005a40:	f04f 32ff 	mov.w	r2, #4294967295
 8005a44:	69f9      	ldr	r1, [r7, #28]
 8005a46:	6938      	ldr	r0, [r7, #16]
 8005a48:	f7ff fe1d 	bl	8005686 <put_fat>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <create_chain+0xe2>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d006      	beq.n	8005a6a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6938      	ldr	r0, [r7, #16]
 8005a62:	f7ff fe10 	bl	8005686 <put_fat>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d116      	bne.n	8005a9e <create_chain+0x116>
		fs->last_clst = ncl;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	3b02      	subs	r3, #2
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d804      	bhi.n	8005a8e <create_chain+0x106>
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	1e5a      	subs	r2, r3, #1
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	791b      	ldrb	r3, [r3, #4]
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	711a      	strb	r2, [r3, #4]
 8005a9c:	e007      	b.n	8005aae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d102      	bne.n	8005aaa <create_chain+0x122>
 8005aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa8:	e000      	b.n	8005aac <create_chain+0x124>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005aae:	69fb      	ldr	r3, [r7, #28]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	3304      	adds	r3, #4
 8005ace:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	899b      	ldrh	r3, [r3, #12]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	8952      	ldrh	r2, [r2, #10]
 8005ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1d1a      	adds	r2, r3, #4
 8005aea:	613a      	str	r2, [r7, #16]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <clmt_clust+0x42>
 8005af6:	2300      	movs	r3, #0
 8005af8:	e010      	b.n	8005b1c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d307      	bcc.n	8005b12 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b10:	e7e9      	b.n	8005ae6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005b12:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4413      	add	r3, r2
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b3e:	d204      	bcs.n	8005b4a <dir_sdi+0x22>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <dir_sdi+0x26>
		return FR_INT_ERR;
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e071      	b.n	8005c32 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d106      	bne.n	8005b6e <dir_sdi+0x46>
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d902      	bls.n	8005b6e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10c      	bne.n	8005b8e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	8912      	ldrh	r2, [r2, #8]
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d301      	bcc.n	8005b84 <dir_sdi+0x5c>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e056      	b.n	8005c32 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	61da      	str	r2, [r3, #28]
 8005b8c:	e02d      	b.n	8005bea <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	895b      	ldrh	r3, [r3, #10]
 8005b92:	461a      	mov	r2, r3
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	899b      	ldrh	r3, [r3, #12]
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005b9e:	e019      	b.n	8005bd4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6979      	ldr	r1, [r7, #20]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fc9a 	bl	80054de <get_fat>
 8005baa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb2:	d101      	bne.n	8005bb8 <dir_sdi+0x90>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e03c      	b.n	8005c32 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d904      	bls.n	8005bc8 <dir_sdi+0xa0>
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d301      	bcc.n	8005bcc <dir_sdi+0xa4>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e032      	b.n	8005c32 <dir_sdi+0x10a>
			ofs -= csz;
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d2e1      	bcs.n	8005ba0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005bdc:	6979      	ldr	r1, [r7, #20]
 8005bde:	6938      	ldr	r0, [r7, #16]
 8005be0:	f7ff fc5e 	bl	80054a0 <clust2sect>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <dir_sdi+0xd4>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e01a      	b.n	8005c32 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	899b      	ldrh	r3, [r3, #12]
 8005c04:	4619      	mov	r1, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c0c:	441a      	add	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	899b      	ldrh	r3, [r3, #12]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c24:	fb00 f202 	mul.w	r2, r0, r2
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	18ca      	adds	r2, r1, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	3320      	adds	r3, #32
 8005c50:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <dir_next+0x28>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c60:	d301      	bcc.n	8005c66 <dir_next+0x2c>
 8005c62:	2304      	movs	r3, #4
 8005c64:	e0bb      	b.n	8005dde <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	899b      	ldrh	r3, [r3, #12]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c72:	fb01 f202 	mul.w	r2, r1, r2
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f040 809d 	bne.w	8005db8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	8912      	ldrh	r2, [r2, #8]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	f0c0 808d 	bcc.w	8005db8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	61da      	str	r2, [r3, #28]
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	e09a      	b.n	8005dde <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	899b      	ldrh	r3, [r3, #12]
 8005cac:	461a      	mov	r2, r3
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	8952      	ldrh	r2, [r2, #10]
 8005cb8:	3a01      	subs	r2, #1
 8005cba:	4013      	ands	r3, r2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d17b      	bne.n	8005db8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4610      	mov	r0, r2
 8005cca:	f7ff fc08 	bl	80054de <get_fat>
 8005cce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d801      	bhi.n	8005cda <dir_next+0xa0>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e081      	b.n	8005dde <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d101      	bne.n	8005ce6 <dir_next+0xac>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e07b      	b.n	8005dde <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d359      	bcc.n	8005da4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d104      	bne.n	8005d00 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	61da      	str	r2, [r3, #28]
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	e06e      	b.n	8005dde <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f7ff fe3d 	bl	8005988 <create_chain>
 8005d0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <dir_next+0xe0>
 8005d16:	2307      	movs	r3, #7
 8005d18:	e061      	b.n	8005dde <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <dir_next+0xea>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e05c      	b.n	8005dde <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2a:	d101      	bne.n	8005d30 <dir_next+0xf6>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e056      	b.n	8005dde <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff fad3 	bl	80052dc <sync_window>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <dir_next+0x106>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e04e      	b.n	8005dde <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	899b      	ldrh	r3, [r3, #12]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	f7ff f8fc 	bl	8004f4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	6979      	ldr	r1, [r7, #20]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7ff fba1 	bl	80054a0 <clust2sect>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	635a      	str	r2, [r3, #52]	; 0x34
 8005d64:	e012      	b.n	8005d8c <dir_next+0x152>
						fs->wflag = 1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f7ff fab5 	bl	80052dc <sync_window>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <dir_next+0x142>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e030      	b.n	8005dde <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	635a      	str	r2, [r3, #52]	; 0x34
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	895b      	ldrh	r3, [r3, #10]
 8005d90:	461a      	mov	r2, r3
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d3e6      	bcc.n	8005d66 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad2      	subs	r2, r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005daa:	6979      	ldr	r1, [r7, #20]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f7ff fb77 	bl	80054a0 <clust2sect>
 8005db2:	4602      	mov	r2, r0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	899b      	ldrh	r3, [r3, #12]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dd0:	fb00 f202 	mul.w	r2, r0, r2
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	18ca      	adds	r2, r1, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b086      	sub	sp, #24
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005df6:	2100      	movs	r1, #0
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fe95 	bl	8005b28 <dir_sdi>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d12b      	bne.n	8005e60 <dir_alloc+0x7a>
		n = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	4619      	mov	r1, r3
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7ff faa6 	bl	8005364 <move_window>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d11d      	bne.n	8005e5e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2be5      	cmp	r3, #229	; 0xe5
 8005e2a:	d004      	beq.n	8005e36 <dir_alloc+0x50>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d107      	bne.n	8005e46 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d102      	bne.n	8005e4a <dir_alloc+0x64>
 8005e44:	e00c      	b.n	8005e60 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff fef4 	bl	8005c3a <dir_next>
 8005e52:	4603      	mov	r3, r0
 8005e54:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0d7      	beq.n	8005e0c <dir_alloc+0x26>
 8005e5c:	e000      	b.n	8005e60 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005e5e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d101      	bne.n	8005e6a <dir_alloc+0x84>
 8005e66:	2307      	movs	r3, #7
 8005e68:	75fb      	strb	r3, [r7, #23]
	return res;
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	331a      	adds	r3, #26
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe ffbe 	bl	8004e04 <ld_word>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d109      	bne.n	8005ea8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	3314      	adds	r3, #20
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe ffb3 	bl	8004e04 <ld_word>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	331a      	adds	r3, #26
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	b292      	uxth	r2, r2
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe ffd6 	bl	8004e7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d109      	bne.n	8005eea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f103 0214 	add.w	r2, r3, #20
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	0c1b      	lsrs	r3, r3, #16
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f7fe ffc8 	bl	8004e7a <st_word>
	}
}
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	331a      	adds	r3, #26
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe ff7e 	bl	8004e04 <ld_word>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <cmp_lfn+0x1e>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e059      	b.n	8005fc6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f1a:	1e5a      	subs	r2, r3, #1
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005f28:	2301      	movs	r3, #1
 8005f2a:	81fb      	strh	r3, [r7, #14]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	e033      	b.n	8005f9a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005f32:	4a27      	ldr	r2, [pc, #156]	; (8005fd0 <cmp_lfn+0xdc>)
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	4413      	add	r3, r2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe ff5f 	bl	8004e04 <ld_word>
 8005f46:	4603      	mov	r3, r0
 8005f48:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005f4a:	89fb      	ldrh	r3, [r7, #14]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01a      	beq.n	8005f86 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2bfe      	cmp	r3, #254	; 0xfe
 8005f54:	d812      	bhi.n	8005f7c <cmp_lfn+0x88>
 8005f56:	89bb      	ldrh	r3, [r7, #12]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f002 fc85 	bl	8008868 <ff_wtoupper>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	461c      	mov	r4, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	617a      	str	r2, [r7, #20]
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f002 fc79 	bl	8008868 <ff_wtoupper>
 8005f76:	4603      	mov	r3, r0
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	d001      	beq.n	8005f80 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e022      	b.n	8005fc6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005f80:	89bb      	ldrh	r3, [r7, #12]
 8005f82:	81fb      	strh	r3, [r7, #14]
 8005f84:	e006      	b.n	8005f94 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005f86:	89bb      	ldrh	r3, [r7, #12]
 8005f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d001      	beq.n	8005f94 <cmp_lfn+0xa0>
 8005f90:	2300      	movs	r3, #0
 8005f92:	e018      	b.n	8005fc6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	3301      	adds	r3, #1
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b0c      	cmp	r3, #12
 8005f9e:	d9c8      	bls.n	8005f32 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <cmp_lfn+0xd0>
 8005fac:	89fb      	ldrh	r3, [r7, #14]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <cmp_lfn+0xd0>
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <cmp_lfn+0xd0>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e000      	b.n	8005fc6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005fc4:	2301      	movs	r3, #1
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd90      	pop	{r4, r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	080096f0 	.word	0x080096f0

08005fd4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	331a      	adds	r3, #26
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe ff0e 	bl	8004e04 <ld_word>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <pick_lfn+0x1e>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e04d      	b.n	800608e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffa:	1e5a      	subs	r2, r3, #1
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006008:	2301      	movs	r3, #1
 800600a:	81fb      	strh	r3, [r7, #14]
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	e028      	b.n	8006064 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006012:	4a21      	ldr	r2, [pc, #132]	; (8006098 <pick_lfn+0xc4>)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4413      	add	r3, r2
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	4413      	add	r3, r2
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe feef 	bl	8004e04 <ld_word>
 8006026:	4603      	mov	r3, r0
 8006028:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800602a:	89fb      	ldrh	r3, [r7, #14]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00f      	beq.n	8006050 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2bfe      	cmp	r3, #254	; 0xfe
 8006034:	d901      	bls.n	800603a <pick_lfn+0x66>
 8006036:	2300      	movs	r3, #0
 8006038:	e029      	b.n	800608e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800603a:	89bb      	ldrh	r3, [r7, #12]
 800603c:	81fb      	strh	r3, [r7, #14]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	617a      	str	r2, [r7, #20]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4413      	add	r3, r2
 800604a:	89fa      	ldrh	r2, [r7, #14]
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	e006      	b.n	800605e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006050:	89bb      	ldrh	r3, [r7, #12]
 8006052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006056:	4293      	cmp	r3, r2
 8006058:	d001      	beq.n	800605e <pick_lfn+0x8a>
 800605a:	2300      	movs	r3, #0
 800605c:	e017      	b.n	800608e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	3301      	adds	r3, #1
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b0c      	cmp	r3, #12
 8006068:	d9d3      	bls.n	8006012 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2bfe      	cmp	r3, #254	; 0xfe
 800607a:	d901      	bls.n	8006080 <pick_lfn+0xac>
 800607c:	2300      	movs	r3, #0
 800607e:	e006      	b.n	800608e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	4413      	add	r3, r2
 8006088:	2200      	movs	r2, #0
 800608a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800608c:	2301      	movs	r3, #1
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	080096f0 	.word	0x080096f0

0800609c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	4611      	mov	r1, r2
 80060a8:	461a      	mov	r2, r3
 80060aa:	460b      	mov	r3, r1
 80060ac:	71fb      	strb	r3, [r7, #7]
 80060ae:	4613      	mov	r3, r2
 80060b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	330d      	adds	r3, #13
 80060b6:	79ba      	ldrb	r2, [r7, #6]
 80060b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	330b      	adds	r3, #11
 80060be:	220f      	movs	r2, #15
 80060c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	330c      	adds	r3, #12
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	331a      	adds	r3, #26
 80060ce:	2100      	movs	r1, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe fed2 	bl	8004e7a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	1e5a      	subs	r2, r3, #1
 80060da:	4613      	mov	r3, r2
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	82fb      	strh	r3, [r7, #22]
 80060ea:	2300      	movs	r3, #0
 80060ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80060ee:	8afb      	ldrh	r3, [r7, #22]
 80060f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d007      	beq.n	8006108 <put_lfn+0x6c>
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	61fa      	str	r2, [r7, #28]
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006108:	4a17      	ldr	r2, [pc, #92]	; (8006168 <put_lfn+0xcc>)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	4413      	add	r3, r2
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4413      	add	r3, r2
 8006116:	8afa      	ldrh	r2, [r7, #22]
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe fead 	bl	8004e7a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006120:	8afb      	ldrh	r3, [r7, #22]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d102      	bne.n	800612c <put_lfn+0x90>
 8006126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800612a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	3301      	adds	r3, #1
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b0c      	cmp	r3, #12
 8006136:	d9da      	bls.n	80060ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006138:	8afb      	ldrh	r3, [r7, #22]
 800613a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800613e:	4293      	cmp	r3, r2
 8006140:	d006      	beq.n	8006150 <put_lfn+0xb4>
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <put_lfn+0xbc>
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006156:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	79fa      	ldrb	r2, [r7, #7]
 800615c:	701a      	strb	r2, [r3, #0]
}
 800615e:	bf00      	nop
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	080096f0 	.word	0x080096f0

0800616c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08c      	sub	sp, #48	; 0x30
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800617a:	220b      	movs	r2, #11
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7fe fec2 	bl	8004f08 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b05      	cmp	r3, #5
 8006188:	d92b      	bls.n	80061e2 <gen_numname+0x76>
		sr = seq;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800618e:	e022      	b.n	80061d6 <gen_numname+0x6a>
			wc = *lfn++;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800619a:	2300      	movs	r3, #0
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
 800619e:	e017      	b.n	80061d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	005a      	lsls	r2, r3, #1
 80061a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	4413      	add	r3, r2
 80061ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80061ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061b0:	085b      	lsrs	r3, r3, #1
 80061b2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d005      	beq.n	80061ca <gen_numname+0x5e>
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80061c4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80061c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	3301      	adds	r3, #1
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	2b0f      	cmp	r3, #15
 80061d4:	d9e4      	bls.n	80061a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1d8      	bne.n	8006190 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80061e2:	2307      	movs	r3, #7
 80061e4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	3330      	adds	r3, #48	; 0x30
 80061f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80061f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061fa:	2b39      	cmp	r3, #57	; 0x39
 80061fc:	d904      	bls.n	8006208 <gen_numname+0x9c>
 80061fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006202:	3307      	adds	r3, #7
 8006204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	1e5a      	subs	r2, r3, #1
 800620c:	62ba      	str	r2, [r7, #40]	; 0x28
 800620e:	3330      	adds	r3, #48	; 0x30
 8006210:	443b      	add	r3, r7
 8006212:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006216:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1df      	bne.n	80061e6 <gen_numname+0x7a>
	ns[i] = '~';
 8006226:	f107 0214 	add.w	r2, r7, #20
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	4413      	add	r3, r2
 800622e:	227e      	movs	r2, #126	; 0x7e
 8006230:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006232:	2300      	movs	r3, #0
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
 8006236:	e002      	b.n	800623e <gen_numname+0xd2>
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	3301      	adds	r3, #1
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
 800623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	429a      	cmp	r2, r3
 8006244:	d205      	bcs.n	8006252 <gen_numname+0xe6>
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	4413      	add	r3, r2
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b20      	cmp	r3, #32
 8006250:	d1f2      	bne.n	8006238 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	2b07      	cmp	r3, #7
 8006256:	d807      	bhi.n	8006268 <gen_numname+0xfc>
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	62ba      	str	r2, [r7, #40]	; 0x28
 800625e:	3330      	adds	r3, #48	; 0x30
 8006260:	443b      	add	r3, r7
 8006262:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006266:	e000      	b.n	800626a <gen_numname+0xfe>
 8006268:	2120      	movs	r1, #32
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	627a      	str	r2, [r7, #36]	; 0x24
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	460a      	mov	r2, r1
 8006276:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	2b07      	cmp	r3, #7
 800627c:	d9e9      	bls.n	8006252 <gen_numname+0xe6>
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	3730      	adds	r7, #48	; 0x30
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006294:	230b      	movs	r3, #11
 8006296:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	0852      	lsrs	r2, r2, #1
 800629e:	01db      	lsls	r3, r3, #7
 80062a0:	4313      	orrs	r3, r2
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	1c59      	adds	r1, r3, #1
 80062a8:	6079      	str	r1, [r7, #4]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	4413      	add	r3, r2
 80062ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1ed      	bne.n	8006298 <sum_sfn+0x10>
	return sum;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b086      	sub	sp, #24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80062d4:	2304      	movs	r3, #4
 80062d6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80062de:	23ff      	movs	r3, #255	; 0xff
 80062e0:	757b      	strb	r3, [r7, #21]
 80062e2:	23ff      	movs	r3, #255	; 0xff
 80062e4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80062e6:	e081      	b.n	80063ec <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	4619      	mov	r1, r3
 80062ee:	6938      	ldr	r0, [r7, #16]
 80062f0:	f7ff f838 	bl	8005364 <move_window>
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d17c      	bne.n	80063f8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006306:	7dbb      	ldrb	r3, [r7, #22]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800630c:	2304      	movs	r3, #4
 800630e:	75fb      	strb	r3, [r7, #23]
 8006310:	e077      	b.n	8006402 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	330b      	adds	r3, #11
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800631e:	73fb      	strb	r3, [r7, #15]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7bfa      	ldrb	r2, [r7, #15]
 8006324:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006326:	7dbb      	ldrb	r3, [r7, #22]
 8006328:	2be5      	cmp	r3, #229	; 0xe5
 800632a:	d00e      	beq.n	800634a <dir_read+0x80>
 800632c:	7dbb      	ldrb	r3, [r7, #22]
 800632e:	2b2e      	cmp	r3, #46	; 0x2e
 8006330:	d00b      	beq.n	800634a <dir_read+0x80>
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	f023 0320 	bic.w	r3, r3, #32
 8006338:	2b08      	cmp	r3, #8
 800633a:	bf0c      	ite	eq
 800633c:	2301      	moveq	r3, #1
 800633e:	2300      	movne	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4293      	cmp	r3, r2
 8006348:	d002      	beq.n	8006350 <dir_read+0x86>
				ord = 0xFF;
 800634a:	23ff      	movs	r3, #255	; 0xff
 800634c:	757b      	strb	r3, [r7, #21]
 800634e:	e044      	b.n	80063da <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	2b0f      	cmp	r3, #15
 8006354:	d12f      	bne.n	80063b6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006356:	7dbb      	ldrb	r3, [r7, #22]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00d      	beq.n	800637c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	7b5b      	ldrb	r3, [r3, #13]
 8006366:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8006368:	7dbb      	ldrb	r3, [r7, #22]
 800636a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800636e:	75bb      	strb	r3, [r7, #22]
 8006370:	7dbb      	ldrb	r3, [r7, #22]
 8006372:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	695a      	ldr	r2, [r3, #20]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800637c:	7dba      	ldrb	r2, [r7, #22]
 800637e:	7d7b      	ldrb	r3, [r7, #21]
 8006380:	429a      	cmp	r2, r3
 8006382:	d115      	bne.n	80063b0 <dir_read+0xe6>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	330d      	adds	r3, #13
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	7d3a      	ldrb	r2, [r7, #20]
 800638e:	429a      	cmp	r2, r3
 8006390:	d10e      	bne.n	80063b0 <dir_read+0xe6>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	691a      	ldr	r2, [r3, #16]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f7ff fe19 	bl	8005fd4 <pick_lfn>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <dir_read+0xe6>
 80063a8:	7d7b      	ldrb	r3, [r7, #21]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e000      	b.n	80063b2 <dir_read+0xe8>
 80063b0:	23ff      	movs	r3, #255	; 0xff
 80063b2:	757b      	strb	r3, [r7, #21]
 80063b4:	e011      	b.n	80063da <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80063b6:	7d7b      	ldrb	r3, [r7, #21]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d109      	bne.n	80063d0 <dir_read+0x106>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff ff61 	bl	8006288 <sum_sfn>
 80063c6:	4603      	mov	r3, r0
 80063c8:	461a      	mov	r2, r3
 80063ca:	7d3b      	ldrb	r3, [r7, #20]
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d015      	beq.n	80063fc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f04f 32ff 	mov.w	r2, #4294967295
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80063d8:	e010      	b.n	80063fc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80063da:	2100      	movs	r1, #0
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fc2c 	bl	8005c3a <dir_next>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d109      	bne.n	8006400 <dir_read+0x136>
	while (dp->sect) {
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f47f af79 	bne.w	80062e8 <dir_read+0x1e>
 80063f6:	e004      	b.n	8006402 <dir_read+0x138>
		if (res != FR_OK) break;
 80063f8:	bf00      	nop
 80063fa:	e002      	b.n	8006402 <dir_read+0x138>
					break;
 80063fc:	bf00      	nop
 80063fe:	e000      	b.n	8006402 <dir_read+0x138>
		if (res != FR_OK) break;
 8006400:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <dir_read+0x144>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	61da      	str	r2, [r3, #28]
	return res;
 800640e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006426:	2100      	movs	r1, #0
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fb7d 	bl	8005b28 <dir_sdi>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <dir_find+0x24>
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	e0a9      	b.n	8006590 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800643c:	23ff      	movs	r3, #255	; 0xff
 800643e:	753b      	strb	r3, [r7, #20]
 8006440:	7d3b      	ldrb	r3, [r7, #20]
 8006442:	757b      	strb	r3, [r7, #21]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f04f 32ff 	mov.w	r2, #4294967295
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	4619      	mov	r1, r3
 8006452:	6938      	ldr	r0, [r7, #16]
 8006454:	f7fe ff86 	bl	8005364 <move_window>
 8006458:	4603      	mov	r3, r0
 800645a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 8090 	bne.w	8006584 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800646c:	7dbb      	ldrb	r3, [r7, #22]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <dir_find+0x60>
 8006472:	2304      	movs	r3, #4
 8006474:	75fb      	strb	r3, [r7, #23]
 8006476:	e08a      	b.n	800658e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	330b      	adds	r3, #11
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006484:	73fb      	strb	r3, [r7, #15]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	7bfa      	ldrb	r2, [r7, #15]
 800648a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800648c:	7dbb      	ldrb	r3, [r7, #22]
 800648e:	2be5      	cmp	r3, #229	; 0xe5
 8006490:	d007      	beq.n	80064a2 <dir_find+0x8a>
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d009      	beq.n	80064b0 <dir_find+0x98>
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d006      	beq.n	80064b0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064a2:	23ff      	movs	r3, #255	; 0xff
 80064a4:	757b      	strb	r3, [r7, #21]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30
 80064ae:	e05e      	b.n	800656e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	2b0f      	cmp	r3, #15
 80064b4:	d136      	bne.n	8006524 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d154      	bne.n	800656e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80064c4:	7dbb      	ldrb	r3, [r7, #22]
 80064c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	7b5b      	ldrb	r3, [r3, #13]
 80064d4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80064d6:	7dbb      	ldrb	r3, [r7, #22]
 80064d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064dc:	75bb      	strb	r3, [r7, #22]
 80064de:	7dbb      	ldrb	r3, [r7, #22]
 80064e0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80064ea:	7dba      	ldrb	r2, [r7, #22]
 80064ec:	7d7b      	ldrb	r3, [r7, #21]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d115      	bne.n	800651e <dir_find+0x106>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	330d      	adds	r3, #13
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	7d3a      	ldrb	r2, [r7, #20]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d10e      	bne.n	800651e <dir_find+0x106>
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f7ff fcf2 	bl	8005ef4 <cmp_lfn>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <dir_find+0x106>
 8006516:	7d7b      	ldrb	r3, [r7, #21]
 8006518:	3b01      	subs	r3, #1
 800651a:	b2db      	uxtb	r3, r3
 800651c:	e000      	b.n	8006520 <dir_find+0x108>
 800651e:	23ff      	movs	r3, #255	; 0xff
 8006520:	757b      	strb	r3, [r7, #21]
 8006522:	e024      	b.n	800656e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006524:	7d7b      	ldrb	r3, [r7, #21]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <dir_find+0x126>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff feaa 	bl	8006288 <sum_sfn>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	7d3b      	ldrb	r3, [r7, #20]
 800653a:	4293      	cmp	r3, r2
 800653c:	d024      	beq.n	8006588 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <dir_find+0x14a>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a18      	ldr	r0, [r3, #32]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3324      	adds	r3, #36	; 0x24
 8006554:	220b      	movs	r2, #11
 8006556:	4619      	mov	r1, r3
 8006558:	f7fe fd12 	bl	8004f80 <mem_cmp>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d014      	beq.n	800658c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006562:	23ff      	movs	r3, #255	; 0xff
 8006564:	757b      	strb	r3, [r7, #21]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800656e:	2100      	movs	r1, #0
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fb62 	bl	8005c3a <dir_next>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f43f af65 	beq.w	800644c <dir_find+0x34>
 8006582:	e004      	b.n	800658e <dir_find+0x176>
		if (res != FR_OK) break;
 8006584:	bf00      	nop
 8006586:	e002      	b.n	800658e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006588:	bf00      	nop
 800658a:	e000      	b.n	800658e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800658c:	bf00      	nop

	return res;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08c      	sub	sp, #48	; 0x30
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80065ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <dir_register+0x20>
 80065b4:	2306      	movs	r3, #6
 80065b6:	e0e0      	b.n	800677a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80065b8:	2300      	movs	r3, #0
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
 80065bc:	e002      	b.n	80065c4 <dir_register+0x2c>
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	3301      	adds	r3, #1
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1f4      	bne.n	80065be <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80065da:	f107 030c 	add.w	r3, r7, #12
 80065de:	220c      	movs	r2, #12
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe fc91 	bl	8004f08 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d032      	beq.n	8006656 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2240      	movs	r2, #64	; 0x40
 80065f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80065f8:	2301      	movs	r3, #1
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fc:	e016      	b.n	800662c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	f107 010c 	add.w	r1, r7, #12
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	f7ff fdad 	bl	800616c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff ff00 	bl	8006418 <dir_find>
 8006618:	4603      	mov	r3, r0
 800661a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800661e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	3301      	adds	r3, #1
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	2b63      	cmp	r3, #99	; 0x63
 8006630:	d9e5      	bls.n	80065fe <dir_register+0x66>
 8006632:	e000      	b.n	8006636 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006634:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	2b64      	cmp	r3, #100	; 0x64
 800663a:	d101      	bne.n	8006640 <dir_register+0xa8>
 800663c:	2307      	movs	r3, #7
 800663e:	e09c      	b.n	800677a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006644:	2b04      	cmp	r3, #4
 8006646:	d002      	beq.n	800664e <dir_register+0xb6>
 8006648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800664c:	e095      	b.n	800677a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800664e:	7dfa      	ldrb	r2, [r7, #23]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <dir_register+0xd8>
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	330c      	adds	r3, #12
 8006664:	4a47      	ldr	r2, [pc, #284]	; (8006784 <dir_register+0x1ec>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	089b      	lsrs	r3, r3, #2
 800666c:	3301      	adds	r3, #1
 800666e:	e000      	b.n	8006672 <dir_register+0xda>
 8006670:	2301      	movs	r3, #1
 8006672:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006674:	6a39      	ldr	r1, [r7, #32]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7ff fbb5 	bl	8005de6 <dir_alloc>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006686:	2b00      	cmp	r3, #0
 8006688:	d148      	bne.n	800671c <dir_register+0x184>
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	3b01      	subs	r3, #1
 800668e:	623b      	str	r3, [r7, #32]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d042      	beq.n	800671c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695a      	ldr	r2, [r3, #20]
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	015b      	lsls	r3, r3, #5
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff fa40 	bl	8005b28 <dir_sdi>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80066ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d132      	bne.n	800671c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3324      	adds	r3, #36	; 0x24
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fde4 	bl	8006288 <sum_sfn>
 80066c0:	4603      	mov	r3, r0
 80066c2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	4619      	mov	r1, r3
 80066ca:	69f8      	ldr	r0, [r7, #28]
 80066cc:	f7fe fe4a 	bl	8005364 <move_window>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80066d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d11d      	bne.n	800671a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	6918      	ldr	r0, [r3, #16]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a19      	ldr	r1, [r3, #32]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	7efb      	ldrb	r3, [r7, #27]
 80066ec:	f7ff fcd6 	bl	800609c <put_lfn>
				fs->wflag = 1;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2201      	movs	r2, #1
 80066f4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80066f6:	2100      	movs	r1, #0
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff fa9e 	bl	8005c3a <dir_next>
 80066fe:	4603      	mov	r3, r0
 8006700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006708:	2b00      	cmp	r3, #0
 800670a:	d107      	bne.n	800671c <dir_register+0x184>
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	3b01      	subs	r3, #1
 8006710:	623b      	str	r3, [r7, #32]
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1d5      	bne.n	80066c4 <dir_register+0x12c>
 8006718:	e000      	b.n	800671c <dir_register+0x184>
				if (res != FR_OK) break;
 800671a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800671c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006720:	2b00      	cmp	r3, #0
 8006722:	d128      	bne.n	8006776 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	4619      	mov	r1, r3
 800672a:	69f8      	ldr	r0, [r7, #28]
 800672c:	f7fe fe1a 	bl	8005364 <move_window>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800673a:	2b00      	cmp	r3, #0
 800673c:	d11b      	bne.n	8006776 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	2220      	movs	r2, #32
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fbff 	bl	8004f4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a18      	ldr	r0, [r3, #32]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3324      	adds	r3, #36	; 0x24
 8006754:	220b      	movs	r2, #11
 8006756:	4619      	mov	r1, r3
 8006758:	f7fe fbd6 	bl	8004f08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	330c      	adds	r3, #12
 8006768:	f002 0218 	and.w	r2, r2, #24
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	2201      	movs	r2, #1
 8006774:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800677a:	4618      	mov	r0, r3
 800677c:	3730      	adds	r7, #48	; 0x30
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	4ec4ec4f 	.word	0x4ec4ec4f

08006788 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d007      	beq.n	80067b6 <dir_remove+0x2e>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff f9bb 	bl	8005b28 <dir_sdi>
 80067b2:	4603      	mov	r3, r0
 80067b4:	e000      	b.n	80067b8 <dir_remove+0x30>
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d128      	bne.n	8006812 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	4619      	mov	r1, r3
 80067c6:	6938      	ldr	r0, [r7, #16]
 80067c8:	f7fe fdcc 	bl	8005364 <move_window>
 80067cc:	4603      	mov	r3, r0
 80067ce:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d115      	bne.n	8006802 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	22e5      	movs	r2, #229	; 0xe5
 80067dc:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2201      	movs	r2, #1
 80067e2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d90b      	bls.n	8006806 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80067ee:	2100      	movs	r1, #0
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fa22 	bl	8005c3a <dir_next>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0df      	beq.n	80067c0 <dir_remove+0x38>
 8006800:	e002      	b.n	8006808 <dir_remove+0x80>
			if (res != FR_OK) break;
 8006802:	bf00      	nop
 8006804:	e000      	b.n	8006808 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8006806:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	2b04      	cmp	r3, #4
 800680c:	d101      	bne.n	8006812 <dir_remove+0x8a>
 800680e:	2302      	movs	r3, #2
 8006810:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	61ba      	str	r2, [r7, #24]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4413      	add	r3, r2
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800684a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800684c:	2b1f      	cmp	r3, #31
 800684e:	d940      	bls.n	80068d2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006850:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006852:	2b2f      	cmp	r3, #47	; 0x2f
 8006854:	d006      	beq.n	8006864 <create_name+0x48>
 8006856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006858:	2b5c      	cmp	r3, #92	; 0x5c
 800685a:	d110      	bne.n	800687e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800685c:	e002      	b.n	8006864 <create_name+0x48>
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	3301      	adds	r3, #1
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	4413      	add	r3, r2
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b2f      	cmp	r3, #47	; 0x2f
 800686e:	d0f6      	beq.n	800685e <create_name+0x42>
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	4413      	add	r3, r2
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b5c      	cmp	r3, #92	; 0x5c
 800687a:	d0f0      	beq.n	800685e <create_name+0x42>
			break;
 800687c:	e02a      	b.n	80068d4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2bfe      	cmp	r3, #254	; 0xfe
 8006882:	d901      	bls.n	8006888 <create_name+0x6c>
 8006884:	2306      	movs	r3, #6
 8006886:	e17d      	b.n	8006b84 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800688a:	b2db      	uxtb	r3, r3
 800688c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800688e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006890:	2101      	movs	r1, #1
 8006892:	4618      	mov	r0, r3
 8006894:	f001 ffac 	bl	80087f0 <ff_convert>
 8006898:	4603      	mov	r3, r0
 800689a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800689c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <create_name+0x8a>
 80068a2:	2306      	movs	r3, #6
 80068a4:	e16e      	b.n	8006b84 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80068a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068a8:	2b7f      	cmp	r3, #127	; 0x7f
 80068aa:	d809      	bhi.n	80068c0 <create_name+0xa4>
 80068ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068ae:	4619      	mov	r1, r3
 80068b0:	488d      	ldr	r0, [pc, #564]	; (8006ae8 <create_name+0x2cc>)
 80068b2:	f7fe fb8c 	bl	8004fce <chk_chr>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <create_name+0xa4>
 80068bc:	2306      	movs	r3, #6
 80068be:	e161      	b.n	8006b84 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	617a      	str	r2, [r7, #20]
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80068d0:	e7b4      	b.n	800683c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80068d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	441a      	add	r2, r3
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80068de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068e0:	2b1f      	cmp	r3, #31
 80068e2:	d801      	bhi.n	80068e8 <create_name+0xcc>
 80068e4:	2304      	movs	r3, #4
 80068e6:	e000      	b.n	80068ea <create_name+0xce>
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80068ee:	e011      	b.n	8006914 <create_name+0xf8>
		w = lfn[di - 1];
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068f6:	3b01      	subs	r3, #1
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006904:	2b20      	cmp	r3, #32
 8006906:	d002      	beq.n	800690e <create_name+0xf2>
 8006908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800690a:	2b2e      	cmp	r3, #46	; 0x2e
 800690c:	d106      	bne.n	800691c <create_name+0x100>
		di--;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	3b01      	subs	r3, #1
 8006912:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1ea      	bne.n	80068f0 <create_name+0xd4>
 800691a:	e000      	b.n	800691e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800691c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	2200      	movs	r2, #0
 8006928:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <create_name+0x118>
 8006930:	2306      	movs	r3, #6
 8006932:	e127      	b.n	8006b84 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3324      	adds	r3, #36	; 0x24
 8006938:	220b      	movs	r2, #11
 800693a:	2120      	movs	r1, #32
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe fb04 	bl	8004f4a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006942:	2300      	movs	r3, #0
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	e002      	b.n	800694e <create_name+0x132>
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	3301      	adds	r3, #1
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4413      	add	r3, r2
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	2b20      	cmp	r3, #32
 800695a:	d0f5      	beq.n	8006948 <create_name+0x12c>
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	2b2e      	cmp	r3, #46	; 0x2e
 8006968:	d0ee      	beq.n	8006948 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <create_name+0x168>
 8006970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006974:	f043 0303 	orr.w	r3, r3, #3
 8006978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800697c:	e002      	b.n	8006984 <create_name+0x168>
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	3b01      	subs	r3, #1
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d009      	beq.n	800699e <create_name+0x182>
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006990:	3b01      	subs	r3, #1
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	2b2e      	cmp	r3, #46	; 0x2e
 800699c:	d1ef      	bne.n	800697e <create_name+0x162>

	i = b = 0; ni = 8;
 800699e:	2300      	movs	r3, #0
 80069a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069a4:	2300      	movs	r3, #0
 80069a6:	623b      	str	r3, [r7, #32]
 80069a8:	2308      	movs	r3, #8
 80069aa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	61ba      	str	r2, [r7, #24]
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80069bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 8090 	beq.w	8006ae4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80069c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d006      	beq.n	80069d8 <create_name+0x1bc>
 80069ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069cc:	2b2e      	cmp	r3, #46	; 0x2e
 80069ce:	d10a      	bne.n	80069e6 <create_name+0x1ca>
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d006      	beq.n	80069e6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80069d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069dc:	f043 0303 	orr.w	r3, r3, #3
 80069e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069e4:	e07d      	b.n	8006ae2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d203      	bcs.n	80069f6 <create_name+0x1da>
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d123      	bne.n	8006a3e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	2b0b      	cmp	r3, #11
 80069fa:	d106      	bne.n	8006a0a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80069fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a00:	f043 0303 	orr.w	r3, r3, #3
 8006a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a08:	e075      	b.n	8006af6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d005      	beq.n	8006a1e <create_name+0x202>
 8006a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a16:	f043 0303 	orr.w	r3, r3, #3
 8006a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d866      	bhi.n	8006af4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	623b      	str	r3, [r7, #32]
 8006a2e:	230b      	movs	r3, #11
 8006a30:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006a32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a3c:	e051      	b.n	8006ae2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a40:	2b7f      	cmp	r3, #127	; 0x7f
 8006a42:	d914      	bls.n	8006a6e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a46:	2100      	movs	r1, #0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 fed1 	bl	80087f0 <ff_convert>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <create_name+0x246>
 8006a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a5a:	3b80      	subs	r3, #128	; 0x80
 8006a5c:	4a23      	ldr	r2, [pc, #140]	; (8006aec <create_name+0x2d0>)
 8006a5e:	5cd3      	ldrb	r3, [r2, r3]
 8006a60:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a66:	f043 0302 	orr.w	r3, r3, #2
 8006a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <create_name+0x268>
 8006a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a76:	4619      	mov	r1, r3
 8006a78:	481d      	ldr	r0, [pc, #116]	; (8006af0 <create_name+0x2d4>)
 8006a7a:	f7fe faa8 	bl	8004fce <chk_chr>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d008      	beq.n	8006a96 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006a84:	235f      	movs	r3, #95	; 0x5f
 8006a86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a8c:	f043 0303 	orr.w	r3, r3, #3
 8006a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a94:	e01b      	b.n	8006ace <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	d909      	bls.n	8006ab0 <create_name+0x294>
 8006a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a9e:	2b5a      	cmp	r3, #90	; 0x5a
 8006aa0:	d806      	bhi.n	8006ab0 <create_name+0x294>
					b |= 2;
 8006aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006aa6:	f043 0302 	orr.w	r3, r3, #2
 8006aaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006aae:	e00e      	b.n	8006ace <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ab2:	2b60      	cmp	r3, #96	; 0x60
 8006ab4:	d90b      	bls.n	8006ace <create_name+0x2b2>
 8006ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ab8:	2b7a      	cmp	r3, #122	; 0x7a
 8006aba:	d808      	bhi.n	8006ace <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006abc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ac0:	f043 0301 	orr.w	r3, r3, #1
 8006ac4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aca:	3b20      	subs	r3, #32
 8006acc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	623a      	str	r2, [r7, #32]
 8006ad4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ad6:	b2d1      	uxtb	r1, r2
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	4413      	add	r3, r2
 8006adc:	460a      	mov	r2, r1
 8006ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006ae2:	e763      	b.n	80069ac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006ae4:	bf00      	nop
 8006ae6:	e006      	b.n	8006af6 <create_name+0x2da>
 8006ae8:	080095e0 	.word	0x080095e0
 8006aec:	08009670 	.word	0x08009670
 8006af0:	080095ec 	.word	0x080095ec
			if (si > di) break;			/* No extension */
 8006af4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006afc:	2be5      	cmp	r3, #229	; 0xe5
 8006afe:	d103      	bne.n	8006b08 <create_name+0x2ec>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2205      	movs	r2, #5
 8006b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d104      	bne.n	8006b18 <create_name+0x2fc>
 8006b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006b18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b1c:	f003 030c 	and.w	r3, r3, #12
 8006b20:	2b0c      	cmp	r3, #12
 8006b22:	d005      	beq.n	8006b30 <create_name+0x314>
 8006b24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d105      	bne.n	8006b3c <create_name+0x320>
 8006b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b34:	f043 0302 	orr.w	r3, r3, #2
 8006b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d117      	bne.n	8006b78 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d105      	bne.n	8006b60 <create_name+0x344>
 8006b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b58:	f043 0310 	orr.w	r3, r3, #16
 8006b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006b60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b64:	f003 030c 	and.w	r3, r3, #12
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d105      	bne.n	8006b78 <create_name+0x35c>
 8006b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b70:	f043 0308 	orr.w	r3, r3, #8
 8006b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006b7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006b82:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3728      	adds	r7, #40	; 0x28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ba0:	e002      	b.n	8006ba8 <follow_path+0x1c>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b2f      	cmp	r3, #47	; 0x2f
 8006bae:	d0f8      	beq.n	8006ba2 <follow_path+0x16>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8006bb6:	d0f4      	beq.n	8006ba2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b1f      	cmp	r3, #31
 8006bc4:	d80a      	bhi.n	8006bdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2280      	movs	r2, #128	; 0x80
 8006bca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006bce:	2100      	movs	r1, #0
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7fe ffa9 	bl	8005b28 <dir_sdi>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]
 8006bda:	e048      	b.n	8006c6e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bdc:	463b      	mov	r3, r7
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fe1b 	bl	800681c <create_name>
 8006be6:	4603      	mov	r3, r0
 8006be8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d139      	bne.n	8006c64 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff fc11 	bl	8006418 <dir_find>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d12c      	bne.n	8006c68 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d127      	bne.n	8006c68 <follow_path+0xdc>
 8006c18:	2305      	movs	r3, #5
 8006c1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006c1c:	e024      	b.n	8006c68 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c1e:	7afb      	ldrb	r3, [r7, #11]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d121      	bne.n	8006c6c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	799b      	ldrb	r3, [r3, #6]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d102      	bne.n	8006c3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006c34:	2305      	movs	r3, #5
 8006c36:	75fb      	strb	r3, [r7, #23]
 8006c38:	e019      	b.n	8006c6e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	8992      	ldrh	r2, [r2, #12]
 8006c48:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c4c:	fb00 f202 	mul.w	r2, r0, r2
 8006c50:	1a9b      	subs	r3, r3, r2
 8006c52:	440b      	add	r3, r1
 8006c54:	4619      	mov	r1, r3
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7ff f90c 	bl	8005e74 <ld_clust>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c62:	e7bb      	b.n	8006bdc <follow_path+0x50>
			if (res != FR_OK) break;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <follow_path+0xe2>
				break;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c6c:	bf00      	nop
			}
		}
	}

	return res;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c80:	f04f 33ff 	mov.w	r3, #4294967295
 8006c84:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d031      	beq.n	8006cf2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	e002      	b.n	8006c9c <get_ldnumber+0x24>
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b1f      	cmp	r3, #31
 8006ca2:	d903      	bls.n	8006cac <get_ldnumber+0x34>
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b3a      	cmp	r3, #58	; 0x3a
 8006caa:	d1f4      	bne.n	8006c96 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b3a      	cmp	r3, #58	; 0x3a
 8006cb2:	d11c      	bne.n	8006cee <get_ldnumber+0x76>
			tp = *path;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	60fa      	str	r2, [r7, #12]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	3b30      	subs	r3, #48	; 0x30
 8006cc4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b09      	cmp	r3, #9
 8006cca:	d80e      	bhi.n	8006cea <get_ldnumber+0x72>
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d10a      	bne.n	8006cea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d107      	bne.n	8006cea <get_ldnumber+0x72>
					vol = (int)i;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	e002      	b.n	8006cf4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006cf2:	693b      	ldr	r3, [r7, #16]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	70da      	strb	r2, [r3, #3]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f04f 32ff 	mov.w	r2, #4294967295
 8006d16:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fe fb22 	bl	8005364 <move_window>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <check_fs+0x2a>
 8006d26:	2304      	movs	r3, #4
 8006d28:	e038      	b.n	8006d9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3338      	adds	r3, #56	; 0x38
 8006d2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe f866 	bl	8004e04 <ld_word>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d001      	beq.n	8006d48 <check_fs+0x48>
 8006d44:	2303      	movs	r3, #3
 8006d46:	e029      	b.n	8006d9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d4e:	2be9      	cmp	r3, #233	; 0xe9
 8006d50:	d009      	beq.n	8006d66 <check_fs+0x66>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d58:	2beb      	cmp	r3, #235	; 0xeb
 8006d5a:	d11e      	bne.n	8006d9a <check_fs+0x9a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d62:	2b90      	cmp	r3, #144	; 0x90
 8006d64:	d119      	bne.n	8006d9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3338      	adds	r3, #56	; 0x38
 8006d6a:	3336      	adds	r3, #54	; 0x36
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe f861 	bl	8004e34 <ld_dword>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d78:	4a0a      	ldr	r2, [pc, #40]	; (8006da4 <check_fs+0xa4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d101      	bne.n	8006d82 <check_fs+0x82>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e00c      	b.n	8006d9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3338      	adds	r3, #56	; 0x38
 8006d86:	3352      	adds	r3, #82	; 0x52
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe f853 	bl	8004e34 <ld_dword>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4a05      	ldr	r2, [pc, #20]	; (8006da8 <check_fs+0xa8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d101      	bne.n	8006d9a <check_fs+0x9a>
 8006d96:	2300      	movs	r3, #0
 8006d98:	e000      	b.n	8006d9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006d9a:	2302      	movs	r3, #2
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	00544146 	.word	0x00544146
 8006da8:	33544146 	.word	0x33544146

08006dac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b096      	sub	sp, #88	; 0x58
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7ff ff59 	bl	8006c78 <get_ldnumber>
 8006dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	da01      	bge.n	8006dd2 <find_volume+0x26>
 8006dce:	230b      	movs	r3, #11
 8006dd0:	e265      	b.n	800729e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006dd2:	4a9f      	ldr	r2, [pc, #636]	; (8007050 <find_volume+0x2a4>)
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <find_volume+0x3a>
 8006de2:	230c      	movs	r3, #12
 8006de4:	e25b      	b.n	800729e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	f023 0301 	bic.w	r3, r3, #1
 8006df2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01a      	beq.n	8006e32 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fd ff61 	bl	8004cc8 <disk_status>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10c      	bne.n	8006e32 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d007      	beq.n	8006e2e <find_volume+0x82>
 8006e1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006e2a:	230a      	movs	r3, #10
 8006e2c:	e237      	b.n	800729e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e235      	b.n	800729e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	2200      	movs	r2, #0
 8006e36:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fd ff59 	bl	8004cfc <disk_initialize>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006e50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e21e      	b.n	800729e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <find_volume+0xca>
 8006e66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006e72:	230a      	movs	r3, #10
 8006e74:	e213      	b.n	800729e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	7858      	ldrb	r0, [r3, #1]
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	461a      	mov	r2, r3
 8006e80:	2102      	movs	r1, #2
 8006e82:	f7fd ffa1 	bl	8004dc8 <disk_ioctl>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <find_volume+0xe4>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e206      	b.n	800729e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	899b      	ldrh	r3, [r3, #12]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e98:	d80d      	bhi.n	8006eb6 <find_volume+0x10a>
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9c:	899b      	ldrh	r3, [r3, #12]
 8006e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea2:	d308      	bcc.n	8006eb6 <find_volume+0x10a>
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	899b      	ldrh	r3, [r3, #12]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	899b      	ldrh	r3, [r3, #12]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <find_volume+0x10e>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e1f1      	b.n	800729e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006ebe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ec2:	f7ff ff1d 	bl	8006d00 <check_fs>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d149      	bne.n	8006f68 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed8:	e01e      	b.n	8006f18 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006ee8:	4413      	add	r3, r2
 8006eea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	3304      	adds	r3, #4
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d006      	beq.n	8006f04 <find_volume+0x158>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	3308      	adds	r3, #8
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fd ff9a 	bl	8004e34 <ld_dword>
 8006f00:	4602      	mov	r2, r0
 8006f02:	e000      	b.n	8006f06 <find_volume+0x15a>
 8006f04:	2200      	movs	r2, #0
 8006f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	3358      	adds	r3, #88	; 0x58
 8006f0c:	443b      	add	r3, r7
 8006f0e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f14:	3301      	adds	r3, #1
 8006f16:	643b      	str	r3, [r7, #64]	; 0x40
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d9dd      	bls.n	8006eda <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006f1e:	2300      	movs	r3, #0
 8006f20:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <find_volume+0x182>
 8006f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	3358      	adds	r3, #88	; 0x58
 8006f34:	443b      	add	r3, r7
 8006f36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006f3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <find_volume+0x1a2>
 8006f42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f46:	f7ff fedb 	bl	8006d00 <check_fs>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	e000      	b.n	8006f50 <find_volume+0x1a4>
 8006f4e:	2303      	movs	r3, #3
 8006f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d905      	bls.n	8006f68 <find_volume+0x1bc>
 8006f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5e:	3301      	adds	r3, #1
 8006f60:	643b      	str	r3, [r7, #64]	; 0x40
 8006f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d9e2      	bls.n	8006f2e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d101      	bne.n	8006f74 <find_volume+0x1c8>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e194      	b.n	800729e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d901      	bls.n	8006f80 <find_volume+0x1d4>
 8006f7c:	230d      	movs	r3, #13
 8006f7e:	e18e      	b.n	800729e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	3338      	adds	r3, #56	; 0x38
 8006f84:	330b      	adds	r3, #11
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fd ff3c 	bl	8004e04 <ld_word>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	899b      	ldrh	r3, [r3, #12]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <find_volume+0x1f0>
 8006f98:	230d      	movs	r3, #13
 8006f9a:	e180      	b.n	800729e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	3338      	adds	r3, #56	; 0x38
 8006fa0:	3316      	adds	r3, #22
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fd ff2e 	bl	8004e04 <ld_word>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <find_volume+0x214>
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	3338      	adds	r3, #56	; 0x38
 8006fb6:	3324      	adds	r3, #36	; 0x24
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fd ff3b 	bl	8004e34 <ld_dword>
 8006fbe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fc4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	789b      	ldrb	r3, [r3, #2]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d005      	beq.n	8006fe4 <find_volume+0x238>
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	789b      	ldrb	r3, [r3, #2]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d001      	beq.n	8006fe4 <find_volume+0x238>
 8006fe0:	230d      	movs	r3, #13
 8006fe2:	e15c      	b.n	800729e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	789b      	ldrb	r3, [r3, #2]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fec:	fb02 f303 	mul.w	r3, r2, r3
 8006ff0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	895b      	ldrh	r3, [r3, #10]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d008      	beq.n	8007018 <find_volume+0x26c>
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	895b      	ldrh	r3, [r3, #10]
 800700a:	461a      	mov	r2, r3
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	895b      	ldrh	r3, [r3, #10]
 8007010:	3b01      	subs	r3, #1
 8007012:	4013      	ands	r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <find_volume+0x270>
 8007018:	230d      	movs	r3, #13
 800701a:	e140      	b.n	800729e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	3338      	adds	r3, #56	; 0x38
 8007020:	3311      	adds	r3, #17
 8007022:	4618      	mov	r0, r3
 8007024:	f7fd feee 	bl	8004e04 <ld_word>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	891b      	ldrh	r3, [r3, #8]
 8007034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007036:	8992      	ldrh	r2, [r2, #12]
 8007038:	0952      	lsrs	r2, r2, #5
 800703a:	b292      	uxth	r2, r2
 800703c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007040:	fb01 f202 	mul.w	r2, r1, r2
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <find_volume+0x2a8>
 800704c:	230d      	movs	r3, #13
 800704e:	e126      	b.n	800729e <find_volume+0x4f2>
 8007050:	200022ac 	.word	0x200022ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	3338      	adds	r3, #56	; 0x38
 8007058:	3313      	adds	r3, #19
 800705a:	4618      	mov	r0, r3
 800705c:	f7fd fed2 	bl	8004e04 <ld_word>
 8007060:	4603      	mov	r3, r0
 8007062:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007066:	2b00      	cmp	r3, #0
 8007068:	d106      	bne.n	8007078 <find_volume+0x2cc>
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	3338      	adds	r3, #56	; 0x38
 800706e:	3320      	adds	r3, #32
 8007070:	4618      	mov	r0, r3
 8007072:	f7fd fedf 	bl	8004e34 <ld_dword>
 8007076:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	3338      	adds	r3, #56	; 0x38
 800707c:	330e      	adds	r3, #14
 800707e:	4618      	mov	r0, r3
 8007080:	f7fd fec0 	bl	8004e04 <ld_word>
 8007084:	4603      	mov	r3, r0
 8007086:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007088:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <find_volume+0x2e6>
 800708e:	230d      	movs	r3, #13
 8007090:	e105      	b.n	800729e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007092:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007096:	4413      	add	r3, r2
 8007098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800709a:	8911      	ldrh	r1, [r2, #8]
 800709c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800709e:	8992      	ldrh	r2, [r2, #12]
 80070a0:	0952      	lsrs	r2, r2, #5
 80070a2:	b292      	uxth	r2, r2
 80070a4:	fbb1 f2f2 	udiv	r2, r1, r2
 80070a8:	b292      	uxth	r2, r2
 80070aa:	4413      	add	r3, r2
 80070ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80070ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d201      	bcs.n	80070ba <find_volume+0x30e>
 80070b6:	230d      	movs	r3, #13
 80070b8:	e0f1      	b.n	800729e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80070ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070c2:	8952      	ldrh	r2, [r2, #10]
 80070c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <find_volume+0x328>
 80070d0:	230d      	movs	r3, #13
 80070d2:	e0e4      	b.n	800729e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80070d4:	2303      	movs	r3, #3
 80070d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d802      	bhi.n	80070ea <find_volume+0x33e>
 80070e4:	2302      	movs	r3, #2
 80070e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d802      	bhi.n	80070fa <find_volume+0x34e>
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007106:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007108:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800710a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710c:	441a      	add	r2, r3
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	441a      	add	r2, r3
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800711c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007120:	2b03      	cmp	r3, #3
 8007122:	d11e      	bne.n	8007162 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	3338      	adds	r3, #56	; 0x38
 8007128:	332a      	adds	r3, #42	; 0x2a
 800712a:	4618      	mov	r0, r3
 800712c:	f7fd fe6a 	bl	8004e04 <ld_word>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <find_volume+0x38e>
 8007136:	230d      	movs	r3, #13
 8007138:	e0b1      	b.n	800729e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	891b      	ldrh	r3, [r3, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <find_volume+0x39a>
 8007142:	230d      	movs	r3, #13
 8007144:	e0ab      	b.n	800729e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	3338      	adds	r3, #56	; 0x38
 800714a:	332c      	adds	r3, #44	; 0x2c
 800714c:	4618      	mov	r0, r3
 800714e:	f7fd fe71 	bl	8004e34 <ld_dword>
 8007152:	4602      	mov	r2, r0
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	647b      	str	r3, [r7, #68]	; 0x44
 8007160:	e01f      	b.n	80071a2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	891b      	ldrh	r3, [r3, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <find_volume+0x3c2>
 800716a:	230d      	movs	r3, #13
 800716c:	e097      	b.n	800729e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007174:	441a      	add	r2, r3
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800717a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800717e:	2b02      	cmp	r3, #2
 8007180:	d103      	bne.n	800718a <find_volume+0x3de>
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	e00a      	b.n	80071a0 <find_volume+0x3f4>
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	69da      	ldr	r2, [r3, #28]
 800718e:	4613      	mov	r3, r2
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	4413      	add	r3, r2
 8007194:	085a      	lsrs	r2, r3, #1
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80071a0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	6a1a      	ldr	r2, [r3, #32]
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	899b      	ldrh	r3, [r3, #12]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ae:	440b      	add	r3, r1
 80071b0:	3b01      	subs	r3, #1
 80071b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071b4:	8989      	ldrh	r1, [r1, #12]
 80071b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d201      	bcs.n	80071c2 <find_volume+0x416>
 80071be:	230d      	movs	r3, #13
 80071c0:	e06d      	b.n	800729e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	f04f 32ff 	mov.w	r2, #4294967295
 80071c8:	619a      	str	r2, [r3, #24]
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80071d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d149      	bne.n	8007274 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	3338      	adds	r3, #56	; 0x38
 80071e4:	3330      	adds	r3, #48	; 0x30
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fd fe0c 	bl	8004e04 <ld_word>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d140      	bne.n	8007274 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80071f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f4:	3301      	adds	r3, #1
 80071f6:	4619      	mov	r1, r3
 80071f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071fa:	f7fe f8b3 	bl	8005364 <move_window>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d137      	bne.n	8007274 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	2200      	movs	r2, #0
 8007208:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	3338      	adds	r3, #56	; 0x38
 800720e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007212:	4618      	mov	r0, r3
 8007214:	f7fd fdf6 	bl	8004e04 <ld_word>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007220:	429a      	cmp	r2, r3
 8007222:	d127      	bne.n	8007274 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	3338      	adds	r3, #56	; 0x38
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd fe03 	bl	8004e34 <ld_dword>
 800722e:	4603      	mov	r3, r0
 8007230:	4a1d      	ldr	r2, [pc, #116]	; (80072a8 <find_volume+0x4fc>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d11e      	bne.n	8007274 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	3338      	adds	r3, #56	; 0x38
 800723a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800723e:	4618      	mov	r0, r3
 8007240:	f7fd fdf8 	bl	8004e34 <ld_dword>
 8007244:	4603      	mov	r3, r0
 8007246:	4a19      	ldr	r2, [pc, #100]	; (80072ac <find_volume+0x500>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d113      	bne.n	8007274 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	3338      	adds	r3, #56	; 0x38
 8007250:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007254:	4618      	mov	r0, r3
 8007256:	f7fd fded 	bl	8004e34 <ld_dword>
 800725a:	4602      	mov	r2, r0
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	3338      	adds	r3, #56	; 0x38
 8007264:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007268:	4618      	mov	r0, r3
 800726a:	f7fd fde3 	bl	8004e34 <ld_dword>
 800726e:	4602      	mov	r2, r0
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800727a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800727c:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <find_volume+0x504>)
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	3301      	adds	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <find_volume+0x504>)
 8007286:	801a      	strh	r2, [r3, #0]
 8007288:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <find_volume+0x504>)
 800728a:	881a      	ldrh	r2, [r3, #0]
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	4a08      	ldr	r2, [pc, #32]	; (80072b4 <find_volume+0x508>)
 8007294:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007296:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007298:	f7fd fffc 	bl	8005294 <clear_lock>
#endif
	return FR_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3758      	adds	r7, #88	; 0x58
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	41615252 	.word	0x41615252
 80072ac:	61417272 	.word	0x61417272
 80072b0:	200022b0 	.word	0x200022b0
 80072b4:	200022d4 	.word	0x200022d4

080072b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80072c2:	2309      	movs	r3, #9
 80072c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01c      	beq.n	8007306 <validate+0x4e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d018      	beq.n	8007306 <validate+0x4e>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d013      	beq.n	8007306 <validate+0x4e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	889a      	ldrh	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	88db      	ldrh	r3, [r3, #6]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d10c      	bne.n	8007306 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	785b      	ldrb	r3, [r3, #1]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fd fce8 	bl	8004cc8 <disk_status>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <validate+0x4e>
			res = FR_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <validate+0x5a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	e000      	b.n	8007314 <validate+0x5c>
 8007312:	2300      	movs	r3, #0
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	6013      	str	r3, [r2, #0]
	return res;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007336:	f107 0310 	add.w	r3, r7, #16
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff fc9c 	bl	8006c78 <get_ldnumber>
 8007340:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	2b00      	cmp	r3, #0
 8007346:	da01      	bge.n	800734c <f_mount+0x28>
 8007348:	230b      	movs	r3, #11
 800734a:	e02b      	b.n	80073a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800734c:	4a17      	ldr	r2, [pc, #92]	; (80073ac <f_mount+0x88>)
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007354:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800735c:	69b8      	ldr	r0, [r7, #24]
 800735e:	f7fd ff99 	bl	8005294 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	490d      	ldr	r1, [pc, #52]	; (80073ac <f_mount+0x88>)
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <f_mount+0x66>
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d001      	beq.n	800738e <f_mount+0x6a>
 800738a:	2300      	movs	r3, #0
 800738c:	e00a      	b.n	80073a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800738e:	f107 010c 	add.w	r1, r7, #12
 8007392:	f107 0308 	add.w	r3, r7, #8
 8007396:	2200      	movs	r2, #0
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fd07 	bl	8006dac <find_volume>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	200022ac 	.word	0x200022ac

080073b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b09a      	sub	sp, #104	; 0x68
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4613      	mov	r3, r2
 80073bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <f_open+0x18>
 80073c4:	2309      	movs	r3, #9
 80073c6:	e1bb      	b.n	8007740 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80073d0:	79fa      	ldrb	r2, [r7, #7]
 80073d2:	f107 0114 	add.w	r1, r7, #20
 80073d6:	f107 0308 	add.w	r3, r7, #8
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff fce6 	bl	8006dac <find_volume>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80073e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f040 819f 	bne.w	800772e <f_open+0x37e>
		dj.obj.fs = fs;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	f107 0318 	add.w	r3, r7, #24
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fbc5 	bl	8006b8c <follow_path>
 8007402:	4603      	mov	r3, r0
 8007404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007408:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800740c:	2b00      	cmp	r3, #0
 800740e:	d11a      	bne.n	8007446 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007410:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007414:	b25b      	sxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	da03      	bge.n	8007422 <f_open+0x72>
				res = FR_INVALID_NAME;
 800741a:	2306      	movs	r3, #6
 800741c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007420:	e011      	b.n	8007446 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	bf14      	ite	ne
 800742c:	2301      	movne	r3, #1
 800742e:	2300      	moveq	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	461a      	mov	r2, r3
 8007434:	f107 0318 	add.w	r3, r7, #24
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f7fd fde2 	bl	8005004 <chk_lock>
 8007440:	4603      	mov	r3, r0
 8007442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	f003 031c 	and.w	r3, r3, #28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d07f      	beq.n	8007550 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007450:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007454:	2b00      	cmp	r3, #0
 8007456:	d017      	beq.n	8007488 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007458:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800745c:	2b04      	cmp	r3, #4
 800745e:	d10e      	bne.n	800747e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007460:	f7fd fe2c 	bl	80050bc <enq_lock>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d006      	beq.n	8007478 <f_open+0xc8>
 800746a:	f107 0318 	add.w	r3, r7, #24
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff f892 	bl	8006598 <dir_register>
 8007474:	4603      	mov	r3, r0
 8007476:	e000      	b.n	800747a <f_open+0xca>
 8007478:	2312      	movs	r3, #18
 800747a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	f043 0308 	orr.w	r3, r3, #8
 8007484:	71fb      	strb	r3, [r7, #7]
 8007486:	e010      	b.n	80074aa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007488:	7fbb      	ldrb	r3, [r7, #30]
 800748a:	f003 0311 	and.w	r3, r3, #17
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <f_open+0xea>
					res = FR_DENIED;
 8007492:	2307      	movs	r3, #7
 8007494:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007498:	e007      	b.n	80074aa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <f_open+0xfa>
 80074a4:	2308      	movs	r3, #8
 80074a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80074aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d168      	bne.n	8007584 <f_open+0x1d4>
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d063      	beq.n	8007584 <f_open+0x1d4>
				dw = GET_FATTIME();
 80074bc:	f7fd fba2 	bl	8004c04 <get_fattime>
 80074c0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	330e      	adds	r3, #14
 80074c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fd fcf1 	bl	8004eb0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	3316      	adds	r3, #22
 80074d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fd fceb 	bl	8004eb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	330b      	adds	r3, #11
 80074de:	2220      	movs	r2, #32
 80074e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe fcc3 	bl	8005e74 <ld_clust>
 80074ee:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074f4:	2200      	movs	r2, #0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe fcdb 	bl	8005eb2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	331c      	adds	r3, #28
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f7fd fcd4 	bl	8004eb0 <st_dword>
					fs->wflag = 1;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2201      	movs	r2, #1
 800750c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800750e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007510:	2b00      	cmp	r3, #0
 8007512:	d037      	beq.n	8007584 <f_open+0x1d4>
						dw = fs->winsect;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800751a:	f107 0318 	add.w	r3, r7, #24
 800751e:	2200      	movs	r2, #0
 8007520:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe f9cb 	bl	80058be <remove_chain>
 8007528:	4603      	mov	r3, r0
 800752a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800752e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007532:	2b00      	cmp	r3, #0
 8007534:	d126      	bne.n	8007584 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800753a:	4618      	mov	r0, r3
 800753c:	f7fd ff12 	bl	8005364 <move_window>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800754a:	3a01      	subs	r2, #1
 800754c:	615a      	str	r2, [r3, #20]
 800754e:	e019      	b.n	8007584 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007554:	2b00      	cmp	r3, #0
 8007556:	d115      	bne.n	8007584 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007558:	7fbb      	ldrb	r3, [r7, #30]
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007562:	2304      	movs	r3, #4
 8007564:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007568:	e00c      	b.n	8007584 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d007      	beq.n	8007584 <f_open+0x1d4>
 8007574:	7fbb      	ldrb	r3, [r7, #30]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <f_open+0x1d4>
						res = FR_DENIED;
 800757e:	2307      	movs	r3, #7
 8007580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007584:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007588:	2b00      	cmp	r3, #0
 800758a:	d128      	bne.n	80075de <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800758c:	79fb      	ldrb	r3, [r7, #7]
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80075a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bf14      	ite	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	2300      	moveq	r3, #0
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	f107 0318 	add.w	r3, r7, #24
 80075c2:	4611      	mov	r1, r2
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fd fd9b 	bl	8005100 <inc_lock>
 80075ca:	4602      	mov	r2, r0
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <f_open+0x22e>
 80075d8:	2302      	movs	r3, #2
 80075da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80075de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 80a3 	bne.w	800772e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ec:	4611      	mov	r1, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fc40 	bl	8005e74 <ld_clust>
 80075f4:	4602      	mov	r2, r0
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	331c      	adds	r3, #28
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fd fc18 	bl	8004e34 <ld_dword>
 8007604:	4602      	mov	r2, r0
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	88da      	ldrh	r2, [r3, #6]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	79fa      	ldrb	r2, [r7, #7]
 8007622:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3330      	adds	r3, #48	; 0x30
 800763a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800763e:	2100      	movs	r1, #0
 8007640:	4618      	mov	r0, r3
 8007642:	f7fd fc82 	bl	8004f4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d06e      	beq.n	800772e <f_open+0x37e>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d06a      	beq.n	800772e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	895b      	ldrh	r3, [r3, #10]
 8007664:	461a      	mov	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	899b      	ldrh	r3, [r3, #12]
 800766a:	fb02 f303 	mul.w	r3, r2, r3
 800766e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800767c:	e016      	b.n	80076ac <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007682:	4618      	mov	r0, r3
 8007684:	f7fd ff2b 	bl	80054de <get_fat>
 8007688:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800768a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800768c:	2b01      	cmp	r3, #1
 800768e:	d802      	bhi.n	8007696 <f_open+0x2e6>
 8007690:	2302      	movs	r3, #2
 8007692:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d102      	bne.n	80076a4 <f_open+0x2f4>
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80076a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <f_open+0x30c>
 80076b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d8e0      	bhi.n	800767e <f_open+0x2ce>
				}
				fp->clust = clst;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80076c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d131      	bne.n	800772e <f_open+0x37e>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	899b      	ldrh	r3, [r3, #12]
 80076ce:	461a      	mov	r2, r3
 80076d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80076d6:	fb01 f202 	mul.w	r2, r1, r2
 80076da:	1a9b      	subs	r3, r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d026      	beq.n	800772e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fd fedb 	bl	80054a0 <clust2sect>
 80076ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 80076ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <f_open+0x34a>
						res = FR_INT_ERR;
 80076f2:	2302      	movs	r3, #2
 80076f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80076f8:	e019      	b.n	800772e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	461a      	mov	r2, r3
 8007700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007702:	fbb3 f2f2 	udiv	r2, r3, r2
 8007706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007708:	441a      	add	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	7858      	ldrb	r0, [r3, #1]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	2301      	movs	r3, #1
 800771e:	f7fd fb13 	bl	8004d48 <disk_read>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <f_open+0x37e>
 8007728:	2301      	movs	r3, #1
 800772a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800772e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <f_open+0x38c>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800773c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007740:	4618      	mov	r0, r3
 8007742:	3768      	adds	r7, #104	; 0x68
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08e      	sub	sp, #56	; 0x38
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f107 0214 	add.w	r2, r7, #20
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fda5 	bl	80072b8 <validate>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007774:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007778:	2b00      	cmp	r3, #0
 800777a:	d107      	bne.n	800778c <f_read+0x44>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	7d5b      	ldrb	r3, [r3, #21]
 8007780:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007784:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <f_read+0x4a>
 800778c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007790:	e135      	b.n	80079fe <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	7d1b      	ldrb	r3, [r3, #20]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <f_read+0x5a>
 800779e:	2307      	movs	r3, #7
 80077a0:	e12d      	b.n	80079fe <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	f240 811e 	bls.w	80079f4 <f_read+0x2ac>
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80077bc:	e11a      	b.n	80079f4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	8992      	ldrh	r2, [r2, #12]
 80077c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80077ca:	fb01 f202 	mul.w	r2, r1, r2
 80077ce:	1a9b      	subs	r3, r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 80d5 	bne.w	8007980 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	8992      	ldrh	r2, [r2, #12]
 80077de:	fbb3 f3f2 	udiv	r3, r3, r2
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	8952      	ldrh	r2, [r2, #10]
 80077e6:	3a01      	subs	r2, #1
 80077e8:	4013      	ands	r3, r2
 80077ea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d12f      	bne.n	8007852 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007800:	e013      	b.n	800782a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	4619      	mov	r1, r3
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f7fe f951 	bl	8005ab8 <clmt_clust>
 8007816:	6338      	str	r0, [r7, #48]	; 0x30
 8007818:	e007      	b.n	800782a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f7fd fe5b 	bl	80054de <get_fat>
 8007828:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	2b01      	cmp	r3, #1
 800782e:	d804      	bhi.n	800783a <f_read+0xf2>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2202      	movs	r2, #2
 8007834:	755a      	strb	r2, [r3, #21]
 8007836:	2302      	movs	r3, #2
 8007838:	e0e1      	b.n	80079fe <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d104      	bne.n	800784c <f_read+0x104>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	755a      	strb	r2, [r3, #21]
 8007848:	2301      	movs	r3, #1
 800784a:	e0d8      	b.n	80079fe <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007850:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	4619      	mov	r1, r3
 800785a:	4610      	mov	r0, r2
 800785c:	f7fd fe20 	bl	80054a0 <clust2sect>
 8007860:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d104      	bne.n	8007872 <f_read+0x12a>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2202      	movs	r2, #2
 800786c:	755a      	strb	r2, [r3, #21]
 800786e:	2302      	movs	r3, #2
 8007870:	e0c5      	b.n	80079fe <f_read+0x2b6>
			sect += csect;
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	4413      	add	r3, r2
 8007878:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	899b      	ldrh	r3, [r3, #12]
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	fbb3 f3f2 	udiv	r3, r3, r2
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	d041      	beq.n	8007912 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800788e:	69fa      	ldr	r2, [r7, #28]
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	4413      	add	r3, r2
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	8952      	ldrh	r2, [r2, #10]
 8007898:	4293      	cmp	r3, r2
 800789a:	d905      	bls.n	80078a8 <f_read+0x160>
					cc = fs->csize - csect;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	895b      	ldrh	r3, [r3, #10]
 80078a0:	461a      	mov	r2, r3
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	7858      	ldrb	r0, [r3, #1]
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078b2:	f7fd fa49 	bl	8004d48 <disk_read>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <f_read+0x17e>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	755a      	strb	r2, [r3, #21]
 80078c2:	2301      	movs	r3, #1
 80078c4:	e09b      	b.n	80079fe <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	7d1b      	ldrb	r3, [r3, #20]
 80078ca:	b25b      	sxtb	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	da18      	bge.n	8007902 <f_read+0x1ba>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a1a      	ldr	r2, [r3, #32]
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078da:	429a      	cmp	r2, r3
 80078dc:	d911      	bls.n	8007902 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a1a      	ldr	r2, [r3, #32]
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	8992      	ldrh	r2, [r2, #12]
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f0:	18d0      	adds	r0, r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	899b      	ldrh	r3, [r3, #12]
 80078fc:	461a      	mov	r2, r3
 80078fe:	f7fd fb03 	bl	8004f08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	899b      	ldrh	r3, [r3, #12]
 8007906:	461a      	mov	r2, r3
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007910:	e05c      	b.n	80079cc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	429a      	cmp	r2, r3
 800791a:	d02e      	beq.n	800797a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	7d1b      	ldrb	r3, [r3, #20]
 8007920:	b25b      	sxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	da18      	bge.n	8007958 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	7858      	ldrb	r0, [r3, #1]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a1a      	ldr	r2, [r3, #32]
 8007934:	2301      	movs	r3, #1
 8007936:	f7fd fa27 	bl	8004d88 <disk_write>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <f_read+0x202>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	755a      	strb	r2, [r3, #21]
 8007946:	2301      	movs	r3, #1
 8007948:	e059      	b.n	80079fe <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	7d1b      	ldrb	r3, [r3, #20]
 800794e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007952:	b2da      	uxtb	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	7858      	ldrb	r0, [r3, #1]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007962:	2301      	movs	r3, #1
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	f7fd f9ef 	bl	8004d48 <disk_read>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d004      	beq.n	800797a <f_read+0x232>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	755a      	strb	r2, [r3, #21]
 8007976:	2301      	movs	r3, #1
 8007978:	e041      	b.n	80079fe <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	899b      	ldrh	r3, [r3, #12]
 8007984:	4618      	mov	r0, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	8992      	ldrh	r2, [r2, #12]
 800798e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007992:	fb01 f202 	mul.w	r2, r1, r2
 8007996:	1a9b      	subs	r3, r3, r2
 8007998:	1ac3      	subs	r3, r0, r3
 800799a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800799c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d901      	bls.n	80079a8 <f_read+0x260>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	8992      	ldrh	r2, [r2, #12]
 80079b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80079ba:	fb00 f202 	mul.w	r2, r0, r2
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	440b      	add	r3, r1
 80079c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079c4:	4619      	mov	r1, r3
 80079c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079c8:	f7fd fa9e 	bl	8004f08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80079cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	4413      	add	r3, r2
 80079d2:	627b      	str	r3, [r7, #36]	; 0x24
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	441a      	add	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	619a      	str	r2, [r3, #24]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	441a      	add	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f47f aee1 	bne.w	80077be <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3738      	adds	r7, #56	; 0x38
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b08c      	sub	sp, #48	; 0x30
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f107 0210 	add.w	r2, r7, #16
 8007a24:	4611      	mov	r1, r2
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7ff fc46 	bl	80072b8 <validate>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d107      	bne.n	8007a4a <f_write+0x44>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	7d5b      	ldrb	r3, [r3, #21]
 8007a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <f_write+0x4a>
 8007a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a4e:	e16a      	b.n	8007d26 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	7d1b      	ldrb	r3, [r3, #20]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <f_write+0x5a>
 8007a5c:	2307      	movs	r3, #7
 8007a5e:	e162      	b.n	8007d26 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	699a      	ldr	r2, [r3, #24]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	441a      	add	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	f080 814c 	bcs.w	8007d0a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	43db      	mvns	r3, r3
 8007a78:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007a7a:	e146      	b.n	8007d0a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	8992      	ldrh	r2, [r2, #12]
 8007a84:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a88:	fb01 f202 	mul.w	r2, r1, r2
 8007a8c:	1a9b      	subs	r3, r3, r2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f040 80f1 	bne.w	8007c76 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	8992      	ldrh	r2, [r2, #12]
 8007a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	8952      	ldrh	r2, [r2, #10]
 8007aa4:	3a01      	subs	r2, #1
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d143      	bne.n	8007b38 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10c      	bne.n	8007ad2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d11a      	bne.n	8007afa <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fd ff5d 	bl	8005988 <create_chain>
 8007ace:	62b8      	str	r0, [r7, #40]	; 0x28
 8007ad0:	e013      	b.n	8007afa <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d007      	beq.n	8007aea <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f7fd ffe9 	bl	8005ab8 <clmt_clust>
 8007ae6:	62b8      	str	r0, [r7, #40]	; 0x28
 8007ae8:	e007      	b.n	8007afa <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f7fd ff48 	bl	8005988 <create_chain>
 8007af8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8109 	beq.w	8007d14 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d104      	bne.n	8007b12 <f_write+0x10c>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	755a      	strb	r2, [r3, #21]
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e109      	b.n	8007d26 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b18:	d104      	bne.n	8007b24 <f_write+0x11e>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	755a      	strb	r2, [r3, #21]
 8007b20:	2301      	movs	r3, #1
 8007b22:	e100      	b.n	8007d26 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b28:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <f_write+0x132>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b36:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	7d1b      	ldrb	r3, [r3, #20]
 8007b3c:	b25b      	sxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da18      	bge.n	8007b74 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	7858      	ldrb	r0, [r3, #1]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6a1a      	ldr	r2, [r3, #32]
 8007b50:	2301      	movs	r3, #1
 8007b52:	f7fd f919 	bl	8004d88 <disk_write>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <f_write+0x160>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	755a      	strb	r2, [r3, #21]
 8007b62:	2301      	movs	r3, #1
 8007b64:	e0df      	b.n	8007d26 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	7d1b      	ldrb	r3, [r3, #20]
 8007b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	f7fd fc8f 	bl	80054a0 <clust2sect>
 8007b82:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d104      	bne.n	8007b94 <f_write+0x18e>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	755a      	strb	r2, [r3, #21]
 8007b90:	2302      	movs	r3, #2
 8007b92:	e0c8      	b.n	8007d26 <f_write+0x320>
			sect += csect;
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	4413      	add	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	899b      	ldrh	r3, [r3, #12]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d043      	beq.n	8007c38 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	8952      	ldrh	r2, [r2, #10]
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d905      	bls.n	8007bca <f_write+0x1c4>
					cc = fs->csize - csect;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	895b      	ldrh	r3, [r3, #10]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	7858      	ldrb	r0, [r3, #1]
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	69f9      	ldr	r1, [r7, #28]
 8007bd4:	f7fd f8d8 	bl	8004d88 <disk_write>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <f_write+0x1e2>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2201      	movs	r2, #1
 8007be2:	755a      	strb	r2, [r3, #21]
 8007be4:	2301      	movs	r3, #1
 8007be6:	e09e      	b.n	8007d26 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a1a      	ldr	r2, [r3, #32]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	6a3a      	ldr	r2, [r7, #32]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d918      	bls.n	8007c28 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6a1a      	ldr	r2, [r3, #32]
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	8992      	ldrh	r2, [r2, #12]
 8007c08:	fb02 f303 	mul.w	r3, r2, r3
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	18d1      	adds	r1, r2, r3
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	899b      	ldrh	r3, [r3, #12]
 8007c14:	461a      	mov	r2, r3
 8007c16:	f7fd f977 	bl	8004f08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	7d1b      	ldrb	r3, [r3, #20]
 8007c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	899b      	ldrh	r3, [r3, #12]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	fb02 f303 	mul.w	r3, r2, r3
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007c36:	e04b      	b.n	8007cd0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d016      	beq.n	8007c70 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d210      	bcs.n	8007c70 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	7858      	ldrb	r0, [r3, #1]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c58:	2301      	movs	r3, #1
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	f7fd f874 	bl	8004d48 <disk_read>
 8007c60:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	755a      	strb	r2, [r3, #21]
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e05a      	b.n	8007d26 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	899b      	ldrh	r3, [r3, #12]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	8992      	ldrh	r2, [r2, #12]
 8007c84:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c88:	fb01 f202 	mul.w	r2, r1, r2
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	1ac3      	subs	r3, r0, r3
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d901      	bls.n	8007c9e <f_write+0x298>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	8992      	ldrh	r2, [r2, #12]
 8007cac:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cb0:	fb00 f202 	mul.w	r2, r0, r2
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	440b      	add	r3, r1
 8007cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cba:	69f9      	ldr	r1, [r7, #28]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fd f923 	bl	8004f08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	7d1b      	ldrb	r3, [r3, #20]
 8007cc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	4413      	add	r3, r2
 8007cd6:	61fb      	str	r3, [r7, #28]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	699a      	ldr	r2, [r3, #24]
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	441a      	add	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	619a      	str	r2, [r3, #24]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	bf38      	it	cc
 8007cf0:	461a      	movcc	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	60da      	str	r2, [r3, #12]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	441a      	add	r2, r3
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f47f aeb5 	bne.w	8007a7c <f_write+0x76>
 8007d12:	e000      	b.n	8007d16 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007d14:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	7d1b      	ldrb	r3, [r3, #20]
 8007d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3730      	adds	r7, #48	; 0x30
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f107 0208 	add.w	r2, r7, #8
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff faba 	bl	80072b8 <validate>
 8007d44:	4603      	mov	r3, r0
 8007d46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d168      	bne.n	8007e20 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	7d1b      	ldrb	r3, [r3, #20]
 8007d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d062      	beq.n	8007e20 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7d1b      	ldrb	r3, [r3, #20]
 8007d5e:	b25b      	sxtb	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	da15      	bge.n	8007d90 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	7858      	ldrb	r0, [r3, #1]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1a      	ldr	r2, [r3, #32]
 8007d72:	2301      	movs	r3, #1
 8007d74:	f7fd f808 	bl	8004d88 <disk_write>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <f_sync+0x54>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e04f      	b.n	8007e22 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	7d1b      	ldrb	r3, [r3, #20]
 8007d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007d90:	f7fc ff38 	bl	8004c04 <get_fattime>
 8007d94:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7fd fae0 	bl	8005364 <move_window>
 8007da4:	4603      	mov	r3, r0
 8007da6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d138      	bne.n	8007e20 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	330b      	adds	r3, #11
 8007db8:	781a      	ldrb	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	330b      	adds	r3, #11
 8007dbe:	f042 0220 	orr.w	r2, r2, #32
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	68f9      	ldr	r1, [r7, #12]
 8007dd2:	f7fe f86e 	bl	8005eb2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f103 021c 	add.w	r2, r3, #28
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	4619      	mov	r1, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	f7fd f864 	bl	8004eb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3316      	adds	r3, #22
 8007dec:	6939      	ldr	r1, [r7, #16]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fd f85e 	bl	8004eb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	3312      	adds	r3, #18
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fd f83d 	bl	8004e7a <st_word>
					fs->wflag = 1;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2201      	movs	r2, #1
 8007e04:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fd fad9 	bl	80053c0 <sync_fs>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	7d1b      	ldrb	r3, [r3, #20]
 8007e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff ff7b 	bl	8007d2e <f_sync>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d118      	bne.n	8007e74 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f107 0208 	add.w	r2, r7, #8
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fa34 	bl	80072b8 <validate>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10c      	bne.n	8007e74 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fd f9dc 	bl	800521c <dec_lock>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b090      	sub	sp, #64	; 0x40
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f107 0208 	add.w	r2, r7, #8
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fa11 	bl	80072b8 <validate>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <f_lseek+0x2e>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	7d5b      	ldrb	r3, [r3, #21]
 8007ea8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007eac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <f_lseek+0x3c>
 8007eb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007eb8:	e201      	b.n	80082be <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 80d9 	beq.w	8008076 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eca:	d15a      	bne.n	8007f82 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	1d1a      	adds	r2, r3, #4
 8007ed6:	627a      	str	r2, [r7, #36]	; 0x24
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	2302      	movs	r3, #2
 8007ede:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d03a      	beq.n	8007f62 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	3302      	adds	r3, #2
 8007ef8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	3301      	adds	r3, #1
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fd fae8 	bl	80054de <get_fat>
 8007f0e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d804      	bhi.n	8007f20 <f_lseek+0xa2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	755a      	strb	r2, [r3, #21]
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e1ce      	b.n	80082be <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	d104      	bne.n	8007f32 <f_lseek+0xb4>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	755a      	strb	r2, [r3, #21]
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e1c5      	b.n	80082be <f_lseek+0x440>
					} while (cl == pcl + 1);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3301      	adds	r3, #1
 8007f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d0de      	beq.n	8007efa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d809      	bhi.n	8007f58 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	627a      	str	r2, [r7, #36]	; 0x24
 8007f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	627a      	str	r2, [r7, #36]	; 0x24
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	69db      	ldr	r3, [r3, #28]
 8007f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d3c4      	bcc.n	8007eec <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f68:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d803      	bhi.n	8007f7a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	e19f      	b.n	80082ba <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007f7a:	2311      	movs	r3, #17
 8007f7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007f80:	e19b      	b.n	80082ba <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d902      	bls.n	8007f92 <f_lseek+0x114>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 818d 	beq.w	80082ba <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fd fd86 	bl	8005ab8 <clmt_clust>
 8007fac:	4602      	mov	r2, r0
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f7fd fa70 	bl	80054a0 <clust2sect>
 8007fc0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d104      	bne.n	8007fd2 <f_lseek+0x154>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	755a      	strb	r2, [r3, #21]
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e175      	b.n	80082be <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	8992      	ldrh	r2, [r2, #12]
 8007fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	8952      	ldrh	r2, [r2, #10]
 8007fe2:	3a01      	subs	r2, #1
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	4413      	add	r3, r2
 8007fea:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	8992      	ldrh	r2, [r2, #12]
 8007ff4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ff8:	fb01 f202 	mul.w	r2, r1, r2
 8007ffc:	1a9b      	subs	r3, r3, r2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 815b 	beq.w	80082ba <f_lseek+0x43c>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	429a      	cmp	r2, r3
 800800c:	f000 8155 	beq.w	80082ba <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	7d1b      	ldrb	r3, [r3, #20]
 8008014:	b25b      	sxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	da18      	bge.n	800804c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	7858      	ldrb	r0, [r3, #1]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a1a      	ldr	r2, [r3, #32]
 8008028:	2301      	movs	r3, #1
 800802a:	f7fc fead 	bl	8004d88 <disk_write>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <f_lseek+0x1c0>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	755a      	strb	r2, [r3, #21]
 800803a:	2301      	movs	r3, #1
 800803c:	e13f      	b.n	80082be <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	7d1b      	ldrb	r3, [r3, #20]
 8008042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008046:	b2da      	uxtb	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	7858      	ldrb	r0, [r3, #1]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008056:	2301      	movs	r3, #1
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	f7fc fe75 	bl	8004d48 <disk_read>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <f_lseek+0x1f0>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	755a      	strb	r2, [r3, #21]
 800806a:	2301      	movs	r3, #1
 800806c:	e127      	b.n	80082be <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	621a      	str	r2, [r3, #32]
 8008074:	e121      	b.n	80082ba <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d908      	bls.n	8008092 <f_lseek+0x214>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7d1b      	ldrb	r3, [r3, #20]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080a0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 80b5 	beq.w	8008214 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	895b      	ldrh	r3, [r3, #10]
 80080ae:	461a      	mov	r2, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	899b      	ldrh	r3, [r3, #12]
 80080b4:	fb02 f303 	mul.w	r3, r2, r3
 80080b8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01b      	beq.n	80080f8 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	1e5a      	subs	r2, r3, #1
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	1e59      	subs	r1, r3, #1
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d30f      	bcc.n	80080f8 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	1e5a      	subs	r2, r3, #1
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	425b      	negs	r3, r3
 80080e0:	401a      	ands	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80080f6:	e022      	b.n	800813e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	2b00      	cmp	r3, #0
 8008102:	d119      	bne.n	8008138 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2100      	movs	r1, #0
 8008108:	4618      	mov	r0, r3
 800810a:	f7fd fc3d 	bl	8005988 <create_chain>
 800810e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	2b01      	cmp	r3, #1
 8008114:	d104      	bne.n	8008120 <f_lseek+0x2a2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2202      	movs	r2, #2
 800811a:	755a      	strb	r2, [r3, #21]
 800811c:	2302      	movs	r3, #2
 800811e:	e0ce      	b.n	80082be <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	d104      	bne.n	8008132 <f_lseek+0x2b4>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	755a      	strb	r2, [r3, #21]
 800812e:	2301      	movs	r3, #1
 8008130:	e0c5      	b.n	80082be <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008136:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800813c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	2b00      	cmp	r3, #0
 8008142:	d067      	beq.n	8008214 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008144:	e03a      	b.n	80081bc <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	603b      	str	r3, [r7, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	441a      	add	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	7d1b      	ldrb	r3, [r3, #20]
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00b      	beq.n	800817e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800816a:	4618      	mov	r0, r3
 800816c:	f7fd fc0c 	bl	8005988 <create_chain>
 8008170:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	2b00      	cmp	r3, #0
 8008176:	d108      	bne.n	800818a <f_lseek+0x30c>
							ofs = 0; break;
 8008178:	2300      	movs	r3, #0
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	e022      	b.n	80081c4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008182:	4618      	mov	r0, r3
 8008184:	f7fd f9ab 	bl	80054de <get_fat>
 8008188:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008190:	d104      	bne.n	800819c <f_lseek+0x31e>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	755a      	strb	r2, [r3, #21]
 8008198:	2301      	movs	r3, #1
 800819a:	e090      	b.n	80082be <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d904      	bls.n	80081ac <f_lseek+0x32e>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d304      	bcc.n	80081b6 <f_lseek+0x338>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	755a      	strb	r2, [r3, #21]
 80081b2:	2302      	movs	r3, #2
 80081b4:	e083      	b.n	80082be <f_lseek+0x440>
					fp->clust = clst;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ba:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d8c0      	bhi.n	8008146 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	699a      	ldr	r2, [r3, #24]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	441a      	add	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	899b      	ldrh	r3, [r3, #12]
 80081d4:	461a      	mov	r2, r3
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80081dc:	fb01 f202 	mul.w	r2, r1, r2
 80081e0:	1a9b      	subs	r3, r3, r2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d016      	beq.n	8008214 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fd f958 	bl	80054a0 <clust2sect>
 80081f0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80081f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d104      	bne.n	8008202 <f_lseek+0x384>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	755a      	strb	r2, [r3, #21]
 80081fe:	2302      	movs	r3, #2
 8008200:	e05d      	b.n	80082be <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	899b      	ldrh	r3, [r3, #12]
 8008206:	461a      	mov	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	fbb3 f3f2 	udiv	r3, r3, r2
 800820e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008210:	4413      	add	r3, r2
 8008212:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699a      	ldr	r2, [r3, #24]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	429a      	cmp	r2, r3
 800821e:	d90a      	bls.n	8008236 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	7d1b      	ldrb	r3, [r3, #20]
 800822c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008230:	b2da      	uxtb	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	8992      	ldrh	r2, [r2, #12]
 800823e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008242:	fb01 f202 	mul.w	r2, r1, r2
 8008246:	1a9b      	subs	r3, r3, r2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d036      	beq.n	80082ba <f_lseek+0x43c>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008252:	429a      	cmp	r2, r3
 8008254:	d031      	beq.n	80082ba <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	7d1b      	ldrb	r3, [r3, #20]
 800825a:	b25b      	sxtb	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	da18      	bge.n	8008292 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	7858      	ldrb	r0, [r3, #1]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1a      	ldr	r2, [r3, #32]
 800826e:	2301      	movs	r3, #1
 8008270:	f7fc fd8a 	bl	8004d88 <disk_write>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d004      	beq.n	8008284 <f_lseek+0x406>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	755a      	strb	r2, [r3, #21]
 8008280:	2301      	movs	r3, #1
 8008282:	e01c      	b.n	80082be <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	7d1b      	ldrb	r3, [r3, #20]
 8008288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800828c:	b2da      	uxtb	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	7858      	ldrb	r0, [r3, #1]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800829c:	2301      	movs	r3, #1
 800829e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a0:	f7fc fd52 	bl	8004d48 <disk_read>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d004      	beq.n	80082b4 <f_lseek+0x436>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	755a      	strb	r2, [r3, #21]
 80082b0:	2301      	movs	r3, #1
 80082b2:	e004      	b.n	80082be <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082b8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80082ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3740      	adds	r7, #64	; 0x40
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b092      	sub	sp, #72	; 0x48
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80082d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80082d6:	f107 030c 	add.w	r3, r7, #12
 80082da:	2200      	movs	r2, #0
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fd65 	bl	8006dac <find_volume>
 80082e2:	4603      	mov	r3, r0
 80082e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80082e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f040 8099 	bne.w	8008424 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80082f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	699a      	ldr	r2, [r3, #24]
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	3b02      	subs	r3, #2
 8008302:	429a      	cmp	r2, r3
 8008304:	d804      	bhi.n	8008310 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e089      	b.n	8008424 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d128      	bne.n	800836e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800831c:	2302      	movs	r3, #2
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800832a:	4618      	mov	r0, r3
 800832c:	f7fd f8d7 	bl	80054de <get_fat>
 8008330:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008338:	d103      	bne.n	8008342 <f_getfree+0x7c>
 800833a:	2301      	movs	r3, #1
 800833c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008340:	e063      	b.n	800840a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	2b01      	cmp	r3, #1
 8008346:	d103      	bne.n	8008350 <f_getfree+0x8a>
 8008348:	2302      	movs	r3, #2
 800834a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800834e:	e05c      	b.n	800840a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <f_getfree+0x96>
 8008356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008358:	3301      	adds	r3, #1
 800835a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800835c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835e:	3301      	adds	r3, #1
 8008360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008368:	429a      	cmp	r2, r3
 800836a:	d3db      	bcc.n	8008324 <f_getfree+0x5e>
 800836c:	e04d      	b.n	800840a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008378:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	637b      	str	r3, [r7, #52]	; 0x34
 800837e:	2300      	movs	r3, #0
 8008380:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008384:	2b00      	cmp	r3, #0
 8008386:	d113      	bne.n	80083b0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008390:	4619      	mov	r1, r3
 8008392:	f7fc ffe7 	bl	8005364 <move_window>
 8008396:	4603      	mov	r3, r0
 8008398:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800839c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d131      	bne.n	8008408 <f_getfree+0x142>
							p = fs->win;
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	3338      	adds	r3, #56	; 0x38
 80083a8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	899b      	ldrh	r3, [r3, #12]
 80083ae:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d10f      	bne.n	80083d8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80083b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ba:	f7fc fd23 	bl	8004e04 <ld_word>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d102      	bne.n	80083ca <f_getfree+0x104>
 80083c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c6:	3301      	adds	r3, #1
 80083c8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	3302      	adds	r3, #2
 80083ce:	633b      	str	r3, [r7, #48]	; 0x30
 80083d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d2:	3b02      	subs	r3, #2
 80083d4:	637b      	str	r3, [r7, #52]	; 0x34
 80083d6:	e010      	b.n	80083fa <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80083d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083da:	f7fc fd2b 	bl	8004e34 <ld_dword>
 80083de:	4603      	mov	r3, r0
 80083e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <f_getfree+0x128>
 80083e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ea:	3301      	adds	r3, #1
 80083ec:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	3304      	adds	r3, #4
 80083f2:	633b      	str	r3, [r7, #48]	; 0x30
 80083f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f6:	3b04      	subs	r3, #4
 80083f8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80083fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fc:	3b01      	subs	r3, #1
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1bd      	bne.n	8008382 <f_getfree+0xbc>
 8008406:	e000      	b.n	800840a <f_getfree+0x144>
							if (res != FR_OK) break;
 8008408:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800840e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008414:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	791a      	ldrb	r2, [r3, #4]
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	f042 0201 	orr.w	r2, r2, #1
 8008420:	b2d2      	uxtb	r2, r2
 8008422:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008424:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008428:	4618      	mov	r0, r3
 800842a:	3748      	adds	r7, #72	; 0x48
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b0a0      	sub	sp, #128	; 0x80
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800843c:	f107 010c 	add.w	r1, r7, #12
 8008440:	1d3b      	adds	r3, r7, #4
 8008442:	2202      	movs	r2, #2
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe fcb1 	bl	8006dac <find_volume>
 800844a:	4603      	mov	r3, r0
 800844c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8008454:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008458:	2b00      	cmp	r3, #0
 800845a:	f040 808e 	bne.w	800857a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008464:	4611      	mov	r1, r2
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fb90 	bl	8006b8c <follow_path>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008472:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008476:	2b00      	cmp	r3, #0
 8008478:	d108      	bne.n	800848c <f_unlink+0x5c>
 800847a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800847e:	2102      	movs	r1, #2
 8008480:	4618      	mov	r0, r3
 8008482:	f7fc fdbf 	bl	8005004 <chk_lock>
 8008486:	4603      	mov	r3, r0
 8008488:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800848c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008490:	2b00      	cmp	r3, #0
 8008492:	d172      	bne.n	800857a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008494:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008498:	b25b      	sxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	da03      	bge.n	80084a6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800849e:	2306      	movs	r3, #6
 80084a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80084a4:	e008      	b.n	80084b8 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80084a6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80084b2:	2307      	movs	r3, #7
 80084b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80084b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d134      	bne.n	800852a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fd fcd4 	bl	8005e74 <ld_clust>
 80084cc:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80084ce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80084d2:	f003 0310 	and.w	r3, r3, #16
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d027      	beq.n	800852a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80084de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084e0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80084e2:	f107 0310 	add.w	r3, r7, #16
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fd fb1d 	bl	8005b28 <dir_sdi>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 80084f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d116      	bne.n	800852a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80084fc:	f107 0310 	add.w	r3, r7, #16
 8008500:	2100      	movs	r1, #0
 8008502:	4618      	mov	r0, r3
 8008504:	f7fd fee1 	bl	80062ca <dir_read>
 8008508:	4603      	mov	r3, r0
 800850a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800850e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <f_unlink+0xec>
 8008516:	2307      	movs	r3, #7
 8008518:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800851c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008520:	2b04      	cmp	r3, #4
 8008522:	d102      	bne.n	800852a <f_unlink+0xfa>
 8008524:	2300      	movs	r3, #0
 8008526:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800852a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800852e:	2b00      	cmp	r3, #0
 8008530:	d123      	bne.n	800857a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008532:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe f926 	bl	8006788 <dir_remove>
 800853c:	4603      	mov	r3, r0
 800853e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008542:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10c      	bne.n	8008564 <f_unlink+0x134>
 800854a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800854c:	2b00      	cmp	r3, #0
 800854e:	d009      	beq.n	8008564 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008550:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008554:	2200      	movs	r2, #0
 8008556:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008558:	4618      	mov	r0, r3
 800855a:	f7fd f9b0 	bl	80058be <remove_chain>
 800855e:	4603      	mov	r3, r0
 8008560:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008564:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008568:	2b00      	cmp	r3, #0
 800856a:	d106      	bne.n	800857a <f_unlink+0x14a>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4618      	mov	r0, r3
 8008570:	f7fc ff26 	bl	80053c0 <sync_fs>
 8008574:	4603      	mov	r3, r0
 8008576:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800857a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800857e:	4618      	mov	r0, r3
 8008580:	3780      	adds	r7, #128	; 0x80
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b088      	sub	sp, #32
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008592:	2300      	movs	r3, #0
 8008594:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800859a:	e01b      	b.n	80085d4 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800859c:	f107 0310 	add.w	r3, r7, #16
 80085a0:	f107 0114 	add.w	r1, r7, #20
 80085a4:	2201      	movs	r2, #1
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff f8ce 	bl	8007748 <f_read>
		if (rc != 1) break;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d116      	bne.n	80085e0 <f_gets+0x5a>
		c = s[0];
 80085b2:	7d3b      	ldrb	r3, [r7, #20]
 80085b4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	2b0d      	cmp	r3, #13
 80085ba:	d100      	bne.n	80085be <f_gets+0x38>
 80085bc:	e00a      	b.n	80085d4 <f_gets+0x4e>
		*p++ = c;
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	61ba      	str	r2, [r7, #24]
 80085c4:	7dfa      	ldrb	r2, [r7, #23]
 80085c6:	701a      	strb	r2, [r3, #0]
		n++;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	3301      	adds	r3, #1
 80085cc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80085ce:	7dfb      	ldrb	r3, [r7, #23]
 80085d0:	2b0a      	cmp	r3, #10
 80085d2:	d007      	beq.n	80085e4 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	429a      	cmp	r2, r3
 80085dc:	dbde      	blt.n	800859c <f_gets+0x16>
 80085de:	e002      	b.n	80085e6 <f_gets+0x60>
		if (rc != 1) break;
 80085e0:	bf00      	nop
 80085e2:	e000      	b.n	80085e6 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80085e4:	bf00      	nop
	}
	*p = 0;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2200      	movs	r2, #0
 80085ea:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <f_gets+0x70>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	e000      	b.n	80085f8 <f_gets+0x72>
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3720      	adds	r7, #32
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	2b0a      	cmp	r3, #10
 8008610:	d103      	bne.n	800861a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008612:	210d      	movs	r1, #13
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff fff3 	bl	8008600 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	db25      	blt.n	8008672 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	60fa      	str	r2, [r7, #12]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	4413      	add	r3, r2
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b3c      	cmp	r3, #60	; 0x3c
 8008638:	dd12      	ble.n	8008660 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f103 010c 	add.w	r1, r3, #12
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	f107 0308 	add.w	r3, r7, #8
 800864a:	f7ff f9dc 	bl	8007a06 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	429a      	cmp	r2, r3
 8008654:	d101      	bne.n	800865a <putc_bfd+0x5a>
 8008656:	2300      	movs	r3, #0
 8008658:	e001      	b.n	800865e <putc_bfd+0x5e>
 800865a:	f04f 33ff 	mov.w	r3, #4294967295
 800865e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	609a      	str	r2, [r3, #8]
 8008670:	e000      	b.n	8008674 <putc_bfd+0x74>
	if (i < 0) return;
 8008672:	bf00      	nop
}
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	db16      	blt.n	80086b8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6818      	ldr	r0, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f103 010c 	add.w	r1, r3, #12
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	461a      	mov	r2, r3
 800869a:	f107 030c 	add.w	r3, r7, #12
 800869e:	f7ff f9b2 	bl	8007a06 <f_write>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d107      	bne.n	80086b8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d102      	bne.n	80086b8 <putc_flush+0x3e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	e001      	b.n	80086bc <putc_flush+0x42>
	return EOF;
 80086b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	605a      	str	r2, [r3, #4]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	609a      	str	r2, [r3, #8]
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b096      	sub	sp, #88	; 0x58
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80086f8:	f107 030c 	add.w	r3, r7, #12
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff ffe0 	bl	80086c4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008704:	e009      	b.n	800871a <f_puts+0x2c>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	781a      	ldrb	r2, [r3, #0]
 800870e:	f107 030c 	add.w	r3, r7, #12
 8008712:	4611      	mov	r1, r2
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff ff73 	bl	8008600 <putc_bfd>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1f1      	bne.n	8008706 <f_puts+0x18>
	return putc_flush(&pb);
 8008722:	f107 030c 	add.w	r3, r7, #12
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff ffa7 	bl	800867a <putc_flush>
 800872c:	4603      	mov	r3, r0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3758      	adds	r7, #88	; 0x58
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4613      	mov	r3, r2
 8008744:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008746:	2301      	movs	r3, #1
 8008748:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800874e:	4b1f      	ldr	r3, [pc, #124]	; (80087cc <FATFS_LinkDriverEx+0x94>)
 8008750:	7a5b      	ldrb	r3, [r3, #9]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d131      	bne.n	80087bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008758:	4b1c      	ldr	r3, [pc, #112]	; (80087cc <FATFS_LinkDriverEx+0x94>)
 800875a:	7a5b      	ldrb	r3, [r3, #9]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	461a      	mov	r2, r3
 8008760:	4b1a      	ldr	r3, [pc, #104]	; (80087cc <FATFS_LinkDriverEx+0x94>)
 8008762:	2100      	movs	r1, #0
 8008764:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008766:	4b19      	ldr	r3, [pc, #100]	; (80087cc <FATFS_LinkDriverEx+0x94>)
 8008768:	7a5b      	ldrb	r3, [r3, #9]
 800876a:	b2db      	uxtb	r3, r3
 800876c:	4a17      	ldr	r2, [pc, #92]	; (80087cc <FATFS_LinkDriverEx+0x94>)
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008776:	4b15      	ldr	r3, [pc, #84]	; (80087cc <FATFS_LinkDriverEx+0x94>)
 8008778:	7a5b      	ldrb	r3, [r3, #9]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	461a      	mov	r2, r3
 800877e:	4b13      	ldr	r3, [pc, #76]	; (80087cc <FATFS_LinkDriverEx+0x94>)
 8008780:	4413      	add	r3, r2
 8008782:	79fa      	ldrb	r2, [r7, #7]
 8008784:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008786:	4b11      	ldr	r3, [pc, #68]	; (80087cc <FATFS_LinkDriverEx+0x94>)
 8008788:	7a5b      	ldrb	r3, [r3, #9]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	b2d1      	uxtb	r1, r2
 8008790:	4a0e      	ldr	r2, [pc, #56]	; (80087cc <FATFS_LinkDriverEx+0x94>)
 8008792:	7251      	strb	r1, [r2, #9]
 8008794:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008796:	7dbb      	ldrb	r3, [r7, #22]
 8008798:	3330      	adds	r3, #48	; 0x30
 800879a:	b2da      	uxtb	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	3301      	adds	r3, #1
 80087a4:	223a      	movs	r2, #58	; 0x3a
 80087a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3302      	adds	r3, #2
 80087ac:	222f      	movs	r2, #47	; 0x2f
 80087ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	3303      	adds	r3, #3
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80087b8:	2300      	movs	r3, #0
 80087ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	200024d4 	.word	0x200024d4

080087d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80087da:	2200      	movs	r2, #0
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7ff ffaa 	bl	8008738 <FATFS_LinkDriverEx>
 80087e4:	4603      	mov	r3, r0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80087fc:	88fb      	ldrh	r3, [r7, #6]
 80087fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008800:	d802      	bhi.n	8008808 <ff_convert+0x18>
		c = chr;
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	81fb      	strh	r3, [r7, #14]
 8008806:	e025      	b.n	8008854 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00b      	beq.n	8008826 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800880e:	88fb      	ldrh	r3, [r7, #6]
 8008810:	2bff      	cmp	r3, #255	; 0xff
 8008812:	d805      	bhi.n	8008820 <ff_convert+0x30>
 8008814:	88fb      	ldrh	r3, [r7, #6]
 8008816:	3b80      	subs	r3, #128	; 0x80
 8008818:	4a12      	ldr	r2, [pc, #72]	; (8008864 <ff_convert+0x74>)
 800881a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800881e:	e000      	b.n	8008822 <ff_convert+0x32>
 8008820:	2300      	movs	r3, #0
 8008822:	81fb      	strh	r3, [r7, #14]
 8008824:	e016      	b.n	8008854 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008826:	2300      	movs	r3, #0
 8008828:	81fb      	strh	r3, [r7, #14]
 800882a:	e009      	b.n	8008840 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800882c:	89fb      	ldrh	r3, [r7, #14]
 800882e:	4a0d      	ldr	r2, [pc, #52]	; (8008864 <ff_convert+0x74>)
 8008830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008834:	88fa      	ldrh	r2, [r7, #6]
 8008836:	429a      	cmp	r2, r3
 8008838:	d006      	beq.n	8008848 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800883a:	89fb      	ldrh	r3, [r7, #14]
 800883c:	3301      	adds	r3, #1
 800883e:	81fb      	strh	r3, [r7, #14]
 8008840:	89fb      	ldrh	r3, [r7, #14]
 8008842:	2b7f      	cmp	r3, #127	; 0x7f
 8008844:	d9f2      	bls.n	800882c <ff_convert+0x3c>
 8008846:	e000      	b.n	800884a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008848:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800884a:	89fb      	ldrh	r3, [r7, #14]
 800884c:	3380      	adds	r3, #128	; 0x80
 800884e:	b29b      	uxth	r3, r3
 8008850:	b2db      	uxtb	r3, r3
 8008852:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008854:	89fb      	ldrh	r3, [r7, #14]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	08009700 	.word	0x08009700

08008868 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008872:	88fb      	ldrh	r3, [r7, #6]
 8008874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008878:	d201      	bcs.n	800887e <ff_wtoupper+0x16>
 800887a:	4b3e      	ldr	r3, [pc, #248]	; (8008974 <ff_wtoupper+0x10c>)
 800887c:	e000      	b.n	8008880 <ff_wtoupper+0x18>
 800887e:	4b3e      	ldr	r3, [pc, #248]	; (8008978 <ff_wtoupper+0x110>)
 8008880:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	1c9a      	adds	r2, r3, #2
 8008886:	617a      	str	r2, [r7, #20]
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800888c:	8a7b      	ldrh	r3, [r7, #18]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d068      	beq.n	8008964 <ff_wtoupper+0xfc>
 8008892:	88fa      	ldrh	r2, [r7, #6]
 8008894:	8a7b      	ldrh	r3, [r7, #18]
 8008896:	429a      	cmp	r2, r3
 8008898:	d364      	bcc.n	8008964 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	1c9a      	adds	r2, r3, #2
 800889e:	617a      	str	r2, [r7, #20]
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	823b      	strh	r3, [r7, #16]
 80088a4:	8a3b      	ldrh	r3, [r7, #16]
 80088a6:	0a1b      	lsrs	r3, r3, #8
 80088a8:	81fb      	strh	r3, [r7, #14]
 80088aa:	8a3b      	ldrh	r3, [r7, #16]
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80088b0:	88fa      	ldrh	r2, [r7, #6]
 80088b2:	8a79      	ldrh	r1, [r7, #18]
 80088b4:	8a3b      	ldrh	r3, [r7, #16]
 80088b6:	440b      	add	r3, r1
 80088b8:	429a      	cmp	r2, r3
 80088ba:	da49      	bge.n	8008950 <ff_wtoupper+0xe8>
			switch (cmd) {
 80088bc:	89fb      	ldrh	r3, [r7, #14]
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d84f      	bhi.n	8008962 <ff_wtoupper+0xfa>
 80088c2:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <ff_wtoupper+0x60>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	080088ed 	.word	0x080088ed
 80088cc:	080088ff 	.word	0x080088ff
 80088d0:	08008915 	.word	0x08008915
 80088d4:	0800891d 	.word	0x0800891d
 80088d8:	08008925 	.word	0x08008925
 80088dc:	0800892d 	.word	0x0800892d
 80088e0:	08008935 	.word	0x08008935
 80088e4:	0800893d 	.word	0x0800893d
 80088e8:	08008945 	.word	0x08008945
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80088ec:	88fa      	ldrh	r2, [r7, #6]
 80088ee:	8a7b      	ldrh	r3, [r7, #18]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	4413      	add	r3, r2
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	80fb      	strh	r3, [r7, #6]
 80088fc:	e027      	b.n	800894e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80088fe:	88fa      	ldrh	r2, [r7, #6]
 8008900:	8a7b      	ldrh	r3, [r7, #18]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	b29b      	uxth	r3, r3
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	b29b      	uxth	r3, r3
 800890c:	88fa      	ldrh	r2, [r7, #6]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	80fb      	strh	r3, [r7, #6]
 8008912:	e01c      	b.n	800894e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008914:	88fb      	ldrh	r3, [r7, #6]
 8008916:	3b10      	subs	r3, #16
 8008918:	80fb      	strh	r3, [r7, #6]
 800891a:	e018      	b.n	800894e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	3b20      	subs	r3, #32
 8008920:	80fb      	strh	r3, [r7, #6]
 8008922:	e014      	b.n	800894e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008924:	88fb      	ldrh	r3, [r7, #6]
 8008926:	3b30      	subs	r3, #48	; 0x30
 8008928:	80fb      	strh	r3, [r7, #6]
 800892a:	e010      	b.n	800894e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800892c:	88fb      	ldrh	r3, [r7, #6]
 800892e:	3b1a      	subs	r3, #26
 8008930:	80fb      	strh	r3, [r7, #6]
 8008932:	e00c      	b.n	800894e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008934:	88fb      	ldrh	r3, [r7, #6]
 8008936:	3308      	adds	r3, #8
 8008938:	80fb      	strh	r3, [r7, #6]
 800893a:	e008      	b.n	800894e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	3b50      	subs	r3, #80	; 0x50
 8008940:	80fb      	strh	r3, [r7, #6]
 8008942:	e004      	b.n	800894e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008944:	88fb      	ldrh	r3, [r7, #6]
 8008946:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800894a:	80fb      	strh	r3, [r7, #6]
 800894c:	bf00      	nop
			}
			break;
 800894e:	e008      	b.n	8008962 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008950:	89fb      	ldrh	r3, [r7, #14]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d195      	bne.n	8008882 <ff_wtoupper+0x1a>
 8008956:	8a3b      	ldrh	r3, [r7, #16]
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4413      	add	r3, r2
 800895e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008960:	e78f      	b.n	8008882 <ff_wtoupper+0x1a>
			break;
 8008962:	bf00      	nop
	}

	return chr;
 8008964:	88fb      	ldrh	r3, [r7, #6]
}
 8008966:	4618      	mov	r0, r3
 8008968:	371c      	adds	r7, #28
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	08009800 	.word	0x08009800
 8008978:	080099f4 	.word	0x080099f4

0800897c <__errno>:
 800897c:	4b01      	ldr	r3, [pc, #4]	; (8008984 <__errno+0x8>)
 800897e:	6818      	ldr	r0, [r3, #0]
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	20000024 	.word	0x20000024

08008988 <__libc_init_array>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	4d0d      	ldr	r5, [pc, #52]	; (80089c0 <__libc_init_array+0x38>)
 800898c:	4c0d      	ldr	r4, [pc, #52]	; (80089c4 <__libc_init_array+0x3c>)
 800898e:	1b64      	subs	r4, r4, r5
 8008990:	10a4      	asrs	r4, r4, #2
 8008992:	2600      	movs	r6, #0
 8008994:	42a6      	cmp	r6, r4
 8008996:	d109      	bne.n	80089ac <__libc_init_array+0x24>
 8008998:	4d0b      	ldr	r5, [pc, #44]	; (80089c8 <__libc_init_array+0x40>)
 800899a:	4c0c      	ldr	r4, [pc, #48]	; (80089cc <__libc_init_array+0x44>)
 800899c:	f000 fc8e 	bl	80092bc <_init>
 80089a0:	1b64      	subs	r4, r4, r5
 80089a2:	10a4      	asrs	r4, r4, #2
 80089a4:	2600      	movs	r6, #0
 80089a6:	42a6      	cmp	r6, r4
 80089a8:	d105      	bne.n	80089b6 <__libc_init_array+0x2e>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b0:	4798      	blx	r3
 80089b2:	3601      	adds	r6, #1
 80089b4:	e7ee      	b.n	8008994 <__libc_init_array+0xc>
 80089b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ba:	4798      	blx	r3
 80089bc:	3601      	adds	r6, #1
 80089be:	e7f2      	b.n	80089a6 <__libc_init_array+0x1e>
 80089c0:	08009aec 	.word	0x08009aec
 80089c4:	08009aec 	.word	0x08009aec
 80089c8:	08009aec 	.word	0x08009aec
 80089cc:	08009af0 	.word	0x08009af0

080089d0 <memcpy>:
 80089d0:	440a      	add	r2, r1
 80089d2:	4291      	cmp	r1, r2
 80089d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d8:	d100      	bne.n	80089dc <memcpy+0xc>
 80089da:	4770      	bx	lr
 80089dc:	b510      	push	{r4, lr}
 80089de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089e6:	4291      	cmp	r1, r2
 80089e8:	d1f9      	bne.n	80089de <memcpy+0xe>
 80089ea:	bd10      	pop	{r4, pc}

080089ec <memset>:
 80089ec:	4402      	add	r2, r0
 80089ee:	4603      	mov	r3, r0
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d100      	bne.n	80089f6 <memset+0xa>
 80089f4:	4770      	bx	lr
 80089f6:	f803 1b01 	strb.w	r1, [r3], #1
 80089fa:	e7f9      	b.n	80089f0 <memset+0x4>

080089fc <siprintf>:
 80089fc:	b40e      	push	{r1, r2, r3}
 80089fe:	b500      	push	{lr}
 8008a00:	b09c      	sub	sp, #112	; 0x70
 8008a02:	ab1d      	add	r3, sp, #116	; 0x74
 8008a04:	9002      	str	r0, [sp, #8]
 8008a06:	9006      	str	r0, [sp, #24]
 8008a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a0c:	4809      	ldr	r0, [pc, #36]	; (8008a34 <siprintf+0x38>)
 8008a0e:	9107      	str	r1, [sp, #28]
 8008a10:	9104      	str	r1, [sp, #16]
 8008a12:	4909      	ldr	r1, [pc, #36]	; (8008a38 <siprintf+0x3c>)
 8008a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a18:	9105      	str	r1, [sp, #20]
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	a902      	add	r1, sp, #8
 8008a20:	f000 f868 	bl	8008af4 <_svfiprintf_r>
 8008a24:	9b02      	ldr	r3, [sp, #8]
 8008a26:	2200      	movs	r2, #0
 8008a28:	701a      	strb	r2, [r3, #0]
 8008a2a:	b01c      	add	sp, #112	; 0x70
 8008a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a30:	b003      	add	sp, #12
 8008a32:	4770      	bx	lr
 8008a34:	20000024 	.word	0x20000024
 8008a38:	ffff0208 	.word	0xffff0208

08008a3c <__ssputs_r>:
 8008a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	688e      	ldr	r6, [r1, #8]
 8008a42:	429e      	cmp	r6, r3
 8008a44:	4682      	mov	sl, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	4690      	mov	r8, r2
 8008a4a:	461f      	mov	r7, r3
 8008a4c:	d838      	bhi.n	8008ac0 <__ssputs_r+0x84>
 8008a4e:	898a      	ldrh	r2, [r1, #12]
 8008a50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a54:	d032      	beq.n	8008abc <__ssputs_r+0x80>
 8008a56:	6825      	ldr	r5, [r4, #0]
 8008a58:	6909      	ldr	r1, [r1, #16]
 8008a5a:	eba5 0901 	sub.w	r9, r5, r1
 8008a5e:	6965      	ldr	r5, [r4, #20]
 8008a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a68:	3301      	adds	r3, #1
 8008a6a:	444b      	add	r3, r9
 8008a6c:	106d      	asrs	r5, r5, #1
 8008a6e:	429d      	cmp	r5, r3
 8008a70:	bf38      	it	cc
 8008a72:	461d      	movcc	r5, r3
 8008a74:	0553      	lsls	r3, r2, #21
 8008a76:	d531      	bpl.n	8008adc <__ssputs_r+0xa0>
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f000 fb55 	bl	8009128 <_malloc_r>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	b950      	cbnz	r0, 8008a98 <__ssputs_r+0x5c>
 8008a82:	230c      	movs	r3, #12
 8008a84:	f8ca 3000 	str.w	r3, [sl]
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a8e:	81a3      	strh	r3, [r4, #12]
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295
 8008a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a98:	6921      	ldr	r1, [r4, #16]
 8008a9a:	464a      	mov	r2, r9
 8008a9c:	f7ff ff98 	bl	80089d0 <memcpy>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	6126      	str	r6, [r4, #16]
 8008aae:	6165      	str	r5, [r4, #20]
 8008ab0:	444e      	add	r6, r9
 8008ab2:	eba5 0509 	sub.w	r5, r5, r9
 8008ab6:	6026      	str	r6, [r4, #0]
 8008ab8:	60a5      	str	r5, [r4, #8]
 8008aba:	463e      	mov	r6, r7
 8008abc:	42be      	cmp	r6, r7
 8008abe:	d900      	bls.n	8008ac2 <__ssputs_r+0x86>
 8008ac0:	463e      	mov	r6, r7
 8008ac2:	6820      	ldr	r0, [r4, #0]
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	4641      	mov	r1, r8
 8008ac8:	f000 faa8 	bl	800901c <memmove>
 8008acc:	68a3      	ldr	r3, [r4, #8]
 8008ace:	1b9b      	subs	r3, r3, r6
 8008ad0:	60a3      	str	r3, [r4, #8]
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	4433      	add	r3, r6
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e7db      	b.n	8008a94 <__ssputs_r+0x58>
 8008adc:	462a      	mov	r2, r5
 8008ade:	f000 fb97 	bl	8009210 <_realloc_r>
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d1e1      	bne.n	8008aac <__ssputs_r+0x70>
 8008ae8:	6921      	ldr	r1, [r4, #16]
 8008aea:	4650      	mov	r0, sl
 8008aec:	f000 fab0 	bl	8009050 <_free_r>
 8008af0:	e7c7      	b.n	8008a82 <__ssputs_r+0x46>
	...

08008af4 <_svfiprintf_r>:
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	4698      	mov	r8, r3
 8008afa:	898b      	ldrh	r3, [r1, #12]
 8008afc:	061b      	lsls	r3, r3, #24
 8008afe:	b09d      	sub	sp, #116	; 0x74
 8008b00:	4607      	mov	r7, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	4614      	mov	r4, r2
 8008b06:	d50e      	bpl.n	8008b26 <_svfiprintf_r+0x32>
 8008b08:	690b      	ldr	r3, [r1, #16]
 8008b0a:	b963      	cbnz	r3, 8008b26 <_svfiprintf_r+0x32>
 8008b0c:	2140      	movs	r1, #64	; 0x40
 8008b0e:	f000 fb0b 	bl	8009128 <_malloc_r>
 8008b12:	6028      	str	r0, [r5, #0]
 8008b14:	6128      	str	r0, [r5, #16]
 8008b16:	b920      	cbnz	r0, 8008b22 <_svfiprintf_r+0x2e>
 8008b18:	230c      	movs	r3, #12
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	e0d1      	b.n	8008cc6 <_svfiprintf_r+0x1d2>
 8008b22:	2340      	movs	r3, #64	; 0x40
 8008b24:	616b      	str	r3, [r5, #20]
 8008b26:	2300      	movs	r3, #0
 8008b28:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2a:	2320      	movs	r3, #32
 8008b2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b34:	2330      	movs	r3, #48	; 0x30
 8008b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ce0 <_svfiprintf_r+0x1ec>
 8008b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b3e:	f04f 0901 	mov.w	r9, #1
 8008b42:	4623      	mov	r3, r4
 8008b44:	469a      	mov	sl, r3
 8008b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b4a:	b10a      	cbz	r2, 8008b50 <_svfiprintf_r+0x5c>
 8008b4c:	2a25      	cmp	r2, #37	; 0x25
 8008b4e:	d1f9      	bne.n	8008b44 <_svfiprintf_r+0x50>
 8008b50:	ebba 0b04 	subs.w	fp, sl, r4
 8008b54:	d00b      	beq.n	8008b6e <_svfiprintf_r+0x7a>
 8008b56:	465b      	mov	r3, fp
 8008b58:	4622      	mov	r2, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f7ff ff6d 	bl	8008a3c <__ssputs_r>
 8008b62:	3001      	adds	r0, #1
 8008b64:	f000 80aa 	beq.w	8008cbc <_svfiprintf_r+0x1c8>
 8008b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b6a:	445a      	add	r2, fp
 8008b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 80a2 	beq.w	8008cbc <_svfiprintf_r+0x1c8>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b82:	f10a 0a01 	add.w	sl, sl, #1
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	9307      	str	r3, [sp, #28]
 8008b8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b8e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b90:	4654      	mov	r4, sl
 8008b92:	2205      	movs	r2, #5
 8008b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b98:	4851      	ldr	r0, [pc, #324]	; (8008ce0 <_svfiprintf_r+0x1ec>)
 8008b9a:	f7f7 fb21 	bl	80001e0 <memchr>
 8008b9e:	9a04      	ldr	r2, [sp, #16]
 8008ba0:	b9d8      	cbnz	r0, 8008bda <_svfiprintf_r+0xe6>
 8008ba2:	06d0      	lsls	r0, r2, #27
 8008ba4:	bf44      	itt	mi
 8008ba6:	2320      	movmi	r3, #32
 8008ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bac:	0711      	lsls	r1, r2, #28
 8008bae:	bf44      	itt	mi
 8008bb0:	232b      	movmi	r3, #43	; 0x2b
 8008bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bba:	2b2a      	cmp	r3, #42	; 0x2a
 8008bbc:	d015      	beq.n	8008bea <_svfiprintf_r+0xf6>
 8008bbe:	9a07      	ldr	r2, [sp, #28]
 8008bc0:	4654      	mov	r4, sl
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	f04f 0c0a 	mov.w	ip, #10
 8008bc8:	4621      	mov	r1, r4
 8008bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bce:	3b30      	subs	r3, #48	; 0x30
 8008bd0:	2b09      	cmp	r3, #9
 8008bd2:	d94e      	bls.n	8008c72 <_svfiprintf_r+0x17e>
 8008bd4:	b1b0      	cbz	r0, 8008c04 <_svfiprintf_r+0x110>
 8008bd6:	9207      	str	r2, [sp, #28]
 8008bd8:	e014      	b.n	8008c04 <_svfiprintf_r+0x110>
 8008bda:	eba0 0308 	sub.w	r3, r0, r8
 8008bde:	fa09 f303 	lsl.w	r3, r9, r3
 8008be2:	4313      	orrs	r3, r2
 8008be4:	9304      	str	r3, [sp, #16]
 8008be6:	46a2      	mov	sl, r4
 8008be8:	e7d2      	b.n	8008b90 <_svfiprintf_r+0x9c>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	1d19      	adds	r1, r3, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	9103      	str	r1, [sp, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bfbb      	ittet	lt
 8008bf6:	425b      	neglt	r3, r3
 8008bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfc:	9307      	strge	r3, [sp, #28]
 8008bfe:	9307      	strlt	r3, [sp, #28]
 8008c00:	bfb8      	it	lt
 8008c02:	9204      	strlt	r2, [sp, #16]
 8008c04:	7823      	ldrb	r3, [r4, #0]
 8008c06:	2b2e      	cmp	r3, #46	; 0x2e
 8008c08:	d10c      	bne.n	8008c24 <_svfiprintf_r+0x130>
 8008c0a:	7863      	ldrb	r3, [r4, #1]
 8008c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0e:	d135      	bne.n	8008c7c <_svfiprintf_r+0x188>
 8008c10:	9b03      	ldr	r3, [sp, #12]
 8008c12:	1d1a      	adds	r2, r3, #4
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	9203      	str	r2, [sp, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	bfb8      	it	lt
 8008c1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c20:	3402      	adds	r4, #2
 8008c22:	9305      	str	r3, [sp, #20]
 8008c24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008cf0 <_svfiprintf_r+0x1fc>
 8008c28:	7821      	ldrb	r1, [r4, #0]
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	f7f7 fad7 	bl	80001e0 <memchr>
 8008c32:	b140      	cbz	r0, 8008c46 <_svfiprintf_r+0x152>
 8008c34:	2340      	movs	r3, #64	; 0x40
 8008c36:	eba0 000a 	sub.w	r0, r0, sl
 8008c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c3e:	9b04      	ldr	r3, [sp, #16]
 8008c40:	4303      	orrs	r3, r0
 8008c42:	3401      	adds	r4, #1
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4a:	4826      	ldr	r0, [pc, #152]	; (8008ce4 <_svfiprintf_r+0x1f0>)
 8008c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c50:	2206      	movs	r2, #6
 8008c52:	f7f7 fac5 	bl	80001e0 <memchr>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d038      	beq.n	8008ccc <_svfiprintf_r+0x1d8>
 8008c5a:	4b23      	ldr	r3, [pc, #140]	; (8008ce8 <_svfiprintf_r+0x1f4>)
 8008c5c:	bb1b      	cbnz	r3, 8008ca6 <_svfiprintf_r+0x1b2>
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	3307      	adds	r3, #7
 8008c62:	f023 0307 	bic.w	r3, r3, #7
 8008c66:	3308      	adds	r3, #8
 8008c68:	9303      	str	r3, [sp, #12]
 8008c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6c:	4433      	add	r3, r6
 8008c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c70:	e767      	b.n	8008b42 <_svfiprintf_r+0x4e>
 8008c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c76:	460c      	mov	r4, r1
 8008c78:	2001      	movs	r0, #1
 8008c7a:	e7a5      	b.n	8008bc8 <_svfiprintf_r+0xd4>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	3401      	adds	r4, #1
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	4619      	mov	r1, r3
 8008c84:	f04f 0c0a 	mov.w	ip, #10
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8e:	3a30      	subs	r2, #48	; 0x30
 8008c90:	2a09      	cmp	r2, #9
 8008c92:	d903      	bls.n	8008c9c <_svfiprintf_r+0x1a8>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0c5      	beq.n	8008c24 <_svfiprintf_r+0x130>
 8008c98:	9105      	str	r1, [sp, #20]
 8008c9a:	e7c3      	b.n	8008c24 <_svfiprintf_r+0x130>
 8008c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e7f0      	b.n	8008c88 <_svfiprintf_r+0x194>
 8008ca6:	ab03      	add	r3, sp, #12
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	462a      	mov	r2, r5
 8008cac:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <_svfiprintf_r+0x1f8>)
 8008cae:	a904      	add	r1, sp, #16
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f3af 8000 	nop.w
 8008cb6:	1c42      	adds	r2, r0, #1
 8008cb8:	4606      	mov	r6, r0
 8008cba:	d1d6      	bne.n	8008c6a <_svfiprintf_r+0x176>
 8008cbc:	89ab      	ldrh	r3, [r5, #12]
 8008cbe:	065b      	lsls	r3, r3, #25
 8008cc0:	f53f af2c 	bmi.w	8008b1c <_svfiprintf_r+0x28>
 8008cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc6:	b01d      	add	sp, #116	; 0x74
 8008cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ccc:	ab03      	add	r3, sp, #12
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	462a      	mov	r2, r5
 8008cd2:	4b06      	ldr	r3, [pc, #24]	; (8008cec <_svfiprintf_r+0x1f8>)
 8008cd4:	a904      	add	r1, sp, #16
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f000 f87a 	bl	8008dd0 <_printf_i>
 8008cdc:	e7eb      	b.n	8008cb6 <_svfiprintf_r+0x1c2>
 8008cde:	bf00      	nop
 8008ce0:	08009ab0 	.word	0x08009ab0
 8008ce4:	08009aba 	.word	0x08009aba
 8008ce8:	00000000 	.word	0x00000000
 8008cec:	08008a3d 	.word	0x08008a3d
 8008cf0:	08009ab6 	.word	0x08009ab6

08008cf4 <_printf_common>:
 8008cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	4616      	mov	r6, r2
 8008cfa:	4699      	mov	r9, r3
 8008cfc:	688a      	ldr	r2, [r1, #8]
 8008cfe:	690b      	ldr	r3, [r1, #16]
 8008d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d04:	4293      	cmp	r3, r2
 8008d06:	bfb8      	it	lt
 8008d08:	4613      	movlt	r3, r2
 8008d0a:	6033      	str	r3, [r6, #0]
 8008d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d10:	4607      	mov	r7, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	b10a      	cbz	r2, 8008d1a <_printf_common+0x26>
 8008d16:	3301      	adds	r3, #1
 8008d18:	6033      	str	r3, [r6, #0]
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	0699      	lsls	r1, r3, #26
 8008d1e:	bf42      	ittt	mi
 8008d20:	6833      	ldrmi	r3, [r6, #0]
 8008d22:	3302      	addmi	r3, #2
 8008d24:	6033      	strmi	r3, [r6, #0]
 8008d26:	6825      	ldr	r5, [r4, #0]
 8008d28:	f015 0506 	ands.w	r5, r5, #6
 8008d2c:	d106      	bne.n	8008d3c <_printf_common+0x48>
 8008d2e:	f104 0a19 	add.w	sl, r4, #25
 8008d32:	68e3      	ldr	r3, [r4, #12]
 8008d34:	6832      	ldr	r2, [r6, #0]
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	42ab      	cmp	r3, r5
 8008d3a:	dc26      	bgt.n	8008d8a <_printf_common+0x96>
 8008d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d40:	1e13      	subs	r3, r2, #0
 8008d42:	6822      	ldr	r2, [r4, #0]
 8008d44:	bf18      	it	ne
 8008d46:	2301      	movne	r3, #1
 8008d48:	0692      	lsls	r2, r2, #26
 8008d4a:	d42b      	bmi.n	8008da4 <_printf_common+0xb0>
 8008d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d50:	4649      	mov	r1, r9
 8008d52:	4638      	mov	r0, r7
 8008d54:	47c0      	blx	r8
 8008d56:	3001      	adds	r0, #1
 8008d58:	d01e      	beq.n	8008d98 <_printf_common+0xa4>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	68e5      	ldr	r5, [r4, #12]
 8008d5e:	6832      	ldr	r2, [r6, #0]
 8008d60:	f003 0306 	and.w	r3, r3, #6
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	bf08      	it	eq
 8008d68:	1aad      	subeq	r5, r5, r2
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	6922      	ldr	r2, [r4, #16]
 8008d6e:	bf0c      	ite	eq
 8008d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d74:	2500      	movne	r5, #0
 8008d76:	4293      	cmp	r3, r2
 8008d78:	bfc4      	itt	gt
 8008d7a:	1a9b      	subgt	r3, r3, r2
 8008d7c:	18ed      	addgt	r5, r5, r3
 8008d7e:	2600      	movs	r6, #0
 8008d80:	341a      	adds	r4, #26
 8008d82:	42b5      	cmp	r5, r6
 8008d84:	d11a      	bne.n	8008dbc <_printf_common+0xc8>
 8008d86:	2000      	movs	r0, #0
 8008d88:	e008      	b.n	8008d9c <_printf_common+0xa8>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4652      	mov	r2, sl
 8008d8e:	4649      	mov	r1, r9
 8008d90:	4638      	mov	r0, r7
 8008d92:	47c0      	blx	r8
 8008d94:	3001      	adds	r0, #1
 8008d96:	d103      	bne.n	8008da0 <_printf_common+0xac>
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da0:	3501      	adds	r5, #1
 8008da2:	e7c6      	b.n	8008d32 <_printf_common+0x3e>
 8008da4:	18e1      	adds	r1, r4, r3
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	2030      	movs	r0, #48	; 0x30
 8008daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dae:	4422      	add	r2, r4
 8008db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008db8:	3302      	adds	r3, #2
 8008dba:	e7c7      	b.n	8008d4c <_printf_common+0x58>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	47c0      	blx	r8
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d0e6      	beq.n	8008d98 <_printf_common+0xa4>
 8008dca:	3601      	adds	r6, #1
 8008dcc:	e7d9      	b.n	8008d82 <_printf_common+0x8e>
	...

08008dd0 <_printf_i>:
 8008dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	7e0f      	ldrb	r7, [r1, #24]
 8008dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dd8:	2f78      	cmp	r7, #120	; 0x78
 8008dda:	4691      	mov	r9, r2
 8008ddc:	4680      	mov	r8, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	469a      	mov	sl, r3
 8008de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008de6:	d807      	bhi.n	8008df8 <_printf_i+0x28>
 8008de8:	2f62      	cmp	r7, #98	; 0x62
 8008dea:	d80a      	bhi.n	8008e02 <_printf_i+0x32>
 8008dec:	2f00      	cmp	r7, #0
 8008dee:	f000 80d8 	beq.w	8008fa2 <_printf_i+0x1d2>
 8008df2:	2f58      	cmp	r7, #88	; 0x58
 8008df4:	f000 80a3 	beq.w	8008f3e <_printf_i+0x16e>
 8008df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e00:	e03a      	b.n	8008e78 <_printf_i+0xa8>
 8008e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e06:	2b15      	cmp	r3, #21
 8008e08:	d8f6      	bhi.n	8008df8 <_printf_i+0x28>
 8008e0a:	a101      	add	r1, pc, #4	; (adr r1, 8008e10 <_printf_i+0x40>)
 8008e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	08008e7d 	.word	0x08008e7d
 8008e18:	08008df9 	.word	0x08008df9
 8008e1c:	08008df9 	.word	0x08008df9
 8008e20:	08008df9 	.word	0x08008df9
 8008e24:	08008df9 	.word	0x08008df9
 8008e28:	08008e7d 	.word	0x08008e7d
 8008e2c:	08008df9 	.word	0x08008df9
 8008e30:	08008df9 	.word	0x08008df9
 8008e34:	08008df9 	.word	0x08008df9
 8008e38:	08008df9 	.word	0x08008df9
 8008e3c:	08008f89 	.word	0x08008f89
 8008e40:	08008ead 	.word	0x08008ead
 8008e44:	08008f6b 	.word	0x08008f6b
 8008e48:	08008df9 	.word	0x08008df9
 8008e4c:	08008df9 	.word	0x08008df9
 8008e50:	08008fab 	.word	0x08008fab
 8008e54:	08008df9 	.word	0x08008df9
 8008e58:	08008ead 	.word	0x08008ead
 8008e5c:	08008df9 	.word	0x08008df9
 8008e60:	08008df9 	.word	0x08008df9
 8008e64:	08008f73 	.word	0x08008f73
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	1d1a      	adds	r2, r3, #4
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	602a      	str	r2, [r5, #0]
 8008e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e0a3      	b.n	8008fc4 <_printf_i+0x1f4>
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	6829      	ldr	r1, [r5, #0]
 8008e80:	0606      	lsls	r6, r0, #24
 8008e82:	f101 0304 	add.w	r3, r1, #4
 8008e86:	d50a      	bpl.n	8008e9e <_printf_i+0xce>
 8008e88:	680e      	ldr	r6, [r1, #0]
 8008e8a:	602b      	str	r3, [r5, #0]
 8008e8c:	2e00      	cmp	r6, #0
 8008e8e:	da03      	bge.n	8008e98 <_printf_i+0xc8>
 8008e90:	232d      	movs	r3, #45	; 0x2d
 8008e92:	4276      	negs	r6, r6
 8008e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e98:	485e      	ldr	r0, [pc, #376]	; (8009014 <_printf_i+0x244>)
 8008e9a:	230a      	movs	r3, #10
 8008e9c:	e019      	b.n	8008ed2 <_printf_i+0x102>
 8008e9e:	680e      	ldr	r6, [r1, #0]
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ea6:	bf18      	it	ne
 8008ea8:	b236      	sxthne	r6, r6
 8008eaa:	e7ef      	b.n	8008e8c <_printf_i+0xbc>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	6820      	ldr	r0, [r4, #0]
 8008eb0:	1d19      	adds	r1, r3, #4
 8008eb2:	6029      	str	r1, [r5, #0]
 8008eb4:	0601      	lsls	r1, r0, #24
 8008eb6:	d501      	bpl.n	8008ebc <_printf_i+0xec>
 8008eb8:	681e      	ldr	r6, [r3, #0]
 8008eba:	e002      	b.n	8008ec2 <_printf_i+0xf2>
 8008ebc:	0646      	lsls	r6, r0, #25
 8008ebe:	d5fb      	bpl.n	8008eb8 <_printf_i+0xe8>
 8008ec0:	881e      	ldrh	r6, [r3, #0]
 8008ec2:	4854      	ldr	r0, [pc, #336]	; (8009014 <_printf_i+0x244>)
 8008ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2308      	moveq	r3, #8
 8008eca:	230a      	movne	r3, #10
 8008ecc:	2100      	movs	r1, #0
 8008ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ed2:	6865      	ldr	r5, [r4, #4]
 8008ed4:	60a5      	str	r5, [r4, #8]
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	bfa2      	ittt	ge
 8008eda:	6821      	ldrge	r1, [r4, #0]
 8008edc:	f021 0104 	bicge.w	r1, r1, #4
 8008ee0:	6021      	strge	r1, [r4, #0]
 8008ee2:	b90e      	cbnz	r6, 8008ee8 <_printf_i+0x118>
 8008ee4:	2d00      	cmp	r5, #0
 8008ee6:	d04d      	beq.n	8008f84 <_printf_i+0x1b4>
 8008ee8:	4615      	mov	r5, r2
 8008eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eee:	fb03 6711 	mls	r7, r3, r1, r6
 8008ef2:	5dc7      	ldrb	r7, [r0, r7]
 8008ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ef8:	4637      	mov	r7, r6
 8008efa:	42bb      	cmp	r3, r7
 8008efc:	460e      	mov	r6, r1
 8008efe:	d9f4      	bls.n	8008eea <_printf_i+0x11a>
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d10b      	bne.n	8008f1c <_printf_i+0x14c>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	07de      	lsls	r6, r3, #31
 8008f08:	d508      	bpl.n	8008f1c <_printf_i+0x14c>
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	6861      	ldr	r1, [r4, #4]
 8008f0e:	4299      	cmp	r1, r3
 8008f10:	bfde      	ittt	le
 8008f12:	2330      	movle	r3, #48	; 0x30
 8008f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f1c:	1b52      	subs	r2, r2, r5
 8008f1e:	6122      	str	r2, [r4, #16]
 8008f20:	f8cd a000 	str.w	sl, [sp]
 8008f24:	464b      	mov	r3, r9
 8008f26:	aa03      	add	r2, sp, #12
 8008f28:	4621      	mov	r1, r4
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	f7ff fee2 	bl	8008cf4 <_printf_common>
 8008f30:	3001      	adds	r0, #1
 8008f32:	d14c      	bne.n	8008fce <_printf_i+0x1fe>
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	b004      	add	sp, #16
 8008f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3e:	4835      	ldr	r0, [pc, #212]	; (8009014 <_printf_i+0x244>)
 8008f40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f44:	6829      	ldr	r1, [r5, #0]
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f4c:	6029      	str	r1, [r5, #0]
 8008f4e:	061d      	lsls	r5, r3, #24
 8008f50:	d514      	bpl.n	8008f7c <_printf_i+0x1ac>
 8008f52:	07df      	lsls	r7, r3, #31
 8008f54:	bf44      	itt	mi
 8008f56:	f043 0320 	orrmi.w	r3, r3, #32
 8008f5a:	6023      	strmi	r3, [r4, #0]
 8008f5c:	b91e      	cbnz	r6, 8008f66 <_printf_i+0x196>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	f023 0320 	bic.w	r3, r3, #32
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	2310      	movs	r3, #16
 8008f68:	e7b0      	b.n	8008ecc <_printf_i+0xfc>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	f043 0320 	orr.w	r3, r3, #32
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	2378      	movs	r3, #120	; 0x78
 8008f74:	4828      	ldr	r0, [pc, #160]	; (8009018 <_printf_i+0x248>)
 8008f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f7a:	e7e3      	b.n	8008f44 <_printf_i+0x174>
 8008f7c:	0659      	lsls	r1, r3, #25
 8008f7e:	bf48      	it	mi
 8008f80:	b2b6      	uxthmi	r6, r6
 8008f82:	e7e6      	b.n	8008f52 <_printf_i+0x182>
 8008f84:	4615      	mov	r5, r2
 8008f86:	e7bb      	b.n	8008f00 <_printf_i+0x130>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	6826      	ldr	r6, [r4, #0]
 8008f8c:	6961      	ldr	r1, [r4, #20]
 8008f8e:	1d18      	adds	r0, r3, #4
 8008f90:	6028      	str	r0, [r5, #0]
 8008f92:	0635      	lsls	r5, r6, #24
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	d501      	bpl.n	8008f9c <_printf_i+0x1cc>
 8008f98:	6019      	str	r1, [r3, #0]
 8008f9a:	e002      	b.n	8008fa2 <_printf_i+0x1d2>
 8008f9c:	0670      	lsls	r0, r6, #25
 8008f9e:	d5fb      	bpl.n	8008f98 <_printf_i+0x1c8>
 8008fa0:	8019      	strh	r1, [r3, #0]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6123      	str	r3, [r4, #16]
 8008fa6:	4615      	mov	r5, r2
 8008fa8:	e7ba      	b.n	8008f20 <_printf_i+0x150>
 8008faa:	682b      	ldr	r3, [r5, #0]
 8008fac:	1d1a      	adds	r2, r3, #4
 8008fae:	602a      	str	r2, [r5, #0]
 8008fb0:	681d      	ldr	r5, [r3, #0]
 8008fb2:	6862      	ldr	r2, [r4, #4]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7f7 f912 	bl	80001e0 <memchr>
 8008fbc:	b108      	cbz	r0, 8008fc2 <_printf_i+0x1f2>
 8008fbe:	1b40      	subs	r0, r0, r5
 8008fc0:	6060      	str	r0, [r4, #4]
 8008fc2:	6863      	ldr	r3, [r4, #4]
 8008fc4:	6123      	str	r3, [r4, #16]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fcc:	e7a8      	b.n	8008f20 <_printf_i+0x150>
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	4640      	mov	r0, r8
 8008fd6:	47d0      	blx	sl
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d0ab      	beq.n	8008f34 <_printf_i+0x164>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	079b      	lsls	r3, r3, #30
 8008fe0:	d413      	bmi.n	800900a <_printf_i+0x23a>
 8008fe2:	68e0      	ldr	r0, [r4, #12]
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	4298      	cmp	r0, r3
 8008fe8:	bfb8      	it	lt
 8008fea:	4618      	movlt	r0, r3
 8008fec:	e7a4      	b.n	8008f38 <_printf_i+0x168>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4632      	mov	r2, r6
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	47d0      	blx	sl
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d09b      	beq.n	8008f34 <_printf_i+0x164>
 8008ffc:	3501      	adds	r5, #1
 8008ffe:	68e3      	ldr	r3, [r4, #12]
 8009000:	9903      	ldr	r1, [sp, #12]
 8009002:	1a5b      	subs	r3, r3, r1
 8009004:	42ab      	cmp	r3, r5
 8009006:	dcf2      	bgt.n	8008fee <_printf_i+0x21e>
 8009008:	e7eb      	b.n	8008fe2 <_printf_i+0x212>
 800900a:	2500      	movs	r5, #0
 800900c:	f104 0619 	add.w	r6, r4, #25
 8009010:	e7f5      	b.n	8008ffe <_printf_i+0x22e>
 8009012:	bf00      	nop
 8009014:	08009ac1 	.word	0x08009ac1
 8009018:	08009ad2 	.word	0x08009ad2

0800901c <memmove>:
 800901c:	4288      	cmp	r0, r1
 800901e:	b510      	push	{r4, lr}
 8009020:	eb01 0402 	add.w	r4, r1, r2
 8009024:	d902      	bls.n	800902c <memmove+0x10>
 8009026:	4284      	cmp	r4, r0
 8009028:	4623      	mov	r3, r4
 800902a:	d807      	bhi.n	800903c <memmove+0x20>
 800902c:	1e43      	subs	r3, r0, #1
 800902e:	42a1      	cmp	r1, r4
 8009030:	d008      	beq.n	8009044 <memmove+0x28>
 8009032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800903a:	e7f8      	b.n	800902e <memmove+0x12>
 800903c:	4402      	add	r2, r0
 800903e:	4601      	mov	r1, r0
 8009040:	428a      	cmp	r2, r1
 8009042:	d100      	bne.n	8009046 <memmove+0x2a>
 8009044:	bd10      	pop	{r4, pc}
 8009046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800904a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800904e:	e7f7      	b.n	8009040 <memmove+0x24>

08009050 <_free_r>:
 8009050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009052:	2900      	cmp	r1, #0
 8009054:	d044      	beq.n	80090e0 <_free_r+0x90>
 8009056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800905a:	9001      	str	r0, [sp, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	f1a1 0404 	sub.w	r4, r1, #4
 8009062:	bfb8      	it	lt
 8009064:	18e4      	addlt	r4, r4, r3
 8009066:	f000 f913 	bl	8009290 <__malloc_lock>
 800906a:	4a1e      	ldr	r2, [pc, #120]	; (80090e4 <_free_r+0x94>)
 800906c:	9801      	ldr	r0, [sp, #4]
 800906e:	6813      	ldr	r3, [r2, #0]
 8009070:	b933      	cbnz	r3, 8009080 <_free_r+0x30>
 8009072:	6063      	str	r3, [r4, #4]
 8009074:	6014      	str	r4, [r2, #0]
 8009076:	b003      	add	sp, #12
 8009078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800907c:	f000 b90e 	b.w	800929c <__malloc_unlock>
 8009080:	42a3      	cmp	r3, r4
 8009082:	d908      	bls.n	8009096 <_free_r+0x46>
 8009084:	6825      	ldr	r5, [r4, #0]
 8009086:	1961      	adds	r1, r4, r5
 8009088:	428b      	cmp	r3, r1
 800908a:	bf01      	itttt	eq
 800908c:	6819      	ldreq	r1, [r3, #0]
 800908e:	685b      	ldreq	r3, [r3, #4]
 8009090:	1949      	addeq	r1, r1, r5
 8009092:	6021      	streq	r1, [r4, #0]
 8009094:	e7ed      	b.n	8009072 <_free_r+0x22>
 8009096:	461a      	mov	r2, r3
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	b10b      	cbz	r3, 80090a0 <_free_r+0x50>
 800909c:	42a3      	cmp	r3, r4
 800909e:	d9fa      	bls.n	8009096 <_free_r+0x46>
 80090a0:	6811      	ldr	r1, [r2, #0]
 80090a2:	1855      	adds	r5, r2, r1
 80090a4:	42a5      	cmp	r5, r4
 80090a6:	d10b      	bne.n	80090c0 <_free_r+0x70>
 80090a8:	6824      	ldr	r4, [r4, #0]
 80090aa:	4421      	add	r1, r4
 80090ac:	1854      	adds	r4, r2, r1
 80090ae:	42a3      	cmp	r3, r4
 80090b0:	6011      	str	r1, [r2, #0]
 80090b2:	d1e0      	bne.n	8009076 <_free_r+0x26>
 80090b4:	681c      	ldr	r4, [r3, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	6053      	str	r3, [r2, #4]
 80090ba:	4421      	add	r1, r4
 80090bc:	6011      	str	r1, [r2, #0]
 80090be:	e7da      	b.n	8009076 <_free_r+0x26>
 80090c0:	d902      	bls.n	80090c8 <_free_r+0x78>
 80090c2:	230c      	movs	r3, #12
 80090c4:	6003      	str	r3, [r0, #0]
 80090c6:	e7d6      	b.n	8009076 <_free_r+0x26>
 80090c8:	6825      	ldr	r5, [r4, #0]
 80090ca:	1961      	adds	r1, r4, r5
 80090cc:	428b      	cmp	r3, r1
 80090ce:	bf04      	itt	eq
 80090d0:	6819      	ldreq	r1, [r3, #0]
 80090d2:	685b      	ldreq	r3, [r3, #4]
 80090d4:	6063      	str	r3, [r4, #4]
 80090d6:	bf04      	itt	eq
 80090d8:	1949      	addeq	r1, r1, r5
 80090da:	6021      	streq	r1, [r4, #0]
 80090dc:	6054      	str	r4, [r2, #4]
 80090de:	e7ca      	b.n	8009076 <_free_r+0x26>
 80090e0:	b003      	add	sp, #12
 80090e2:	bd30      	pop	{r4, r5, pc}
 80090e4:	200024e0 	.word	0x200024e0

080090e8 <sbrk_aligned>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	4e0e      	ldr	r6, [pc, #56]	; (8009124 <sbrk_aligned+0x3c>)
 80090ec:	460c      	mov	r4, r1
 80090ee:	6831      	ldr	r1, [r6, #0]
 80090f0:	4605      	mov	r5, r0
 80090f2:	b911      	cbnz	r1, 80090fa <sbrk_aligned+0x12>
 80090f4:	f000 f8bc 	bl	8009270 <_sbrk_r>
 80090f8:	6030      	str	r0, [r6, #0]
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 f8b7 	bl	8009270 <_sbrk_r>
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	d00a      	beq.n	800911c <sbrk_aligned+0x34>
 8009106:	1cc4      	adds	r4, r0, #3
 8009108:	f024 0403 	bic.w	r4, r4, #3
 800910c:	42a0      	cmp	r0, r4
 800910e:	d007      	beq.n	8009120 <sbrk_aligned+0x38>
 8009110:	1a21      	subs	r1, r4, r0
 8009112:	4628      	mov	r0, r5
 8009114:	f000 f8ac 	bl	8009270 <_sbrk_r>
 8009118:	3001      	adds	r0, #1
 800911a:	d101      	bne.n	8009120 <sbrk_aligned+0x38>
 800911c:	f04f 34ff 	mov.w	r4, #4294967295
 8009120:	4620      	mov	r0, r4
 8009122:	bd70      	pop	{r4, r5, r6, pc}
 8009124:	200024e4 	.word	0x200024e4

08009128 <_malloc_r>:
 8009128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912c:	1ccd      	adds	r5, r1, #3
 800912e:	f025 0503 	bic.w	r5, r5, #3
 8009132:	3508      	adds	r5, #8
 8009134:	2d0c      	cmp	r5, #12
 8009136:	bf38      	it	cc
 8009138:	250c      	movcc	r5, #12
 800913a:	2d00      	cmp	r5, #0
 800913c:	4607      	mov	r7, r0
 800913e:	db01      	blt.n	8009144 <_malloc_r+0x1c>
 8009140:	42a9      	cmp	r1, r5
 8009142:	d905      	bls.n	8009150 <_malloc_r+0x28>
 8009144:	230c      	movs	r3, #12
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	2600      	movs	r6, #0
 800914a:	4630      	mov	r0, r6
 800914c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009150:	4e2e      	ldr	r6, [pc, #184]	; (800920c <_malloc_r+0xe4>)
 8009152:	f000 f89d 	bl	8009290 <__malloc_lock>
 8009156:	6833      	ldr	r3, [r6, #0]
 8009158:	461c      	mov	r4, r3
 800915a:	bb34      	cbnz	r4, 80091aa <_malloc_r+0x82>
 800915c:	4629      	mov	r1, r5
 800915e:	4638      	mov	r0, r7
 8009160:	f7ff ffc2 	bl	80090e8 <sbrk_aligned>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	4604      	mov	r4, r0
 8009168:	d14d      	bne.n	8009206 <_malloc_r+0xde>
 800916a:	6834      	ldr	r4, [r6, #0]
 800916c:	4626      	mov	r6, r4
 800916e:	2e00      	cmp	r6, #0
 8009170:	d140      	bne.n	80091f4 <_malloc_r+0xcc>
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	4631      	mov	r1, r6
 8009176:	4638      	mov	r0, r7
 8009178:	eb04 0803 	add.w	r8, r4, r3
 800917c:	f000 f878 	bl	8009270 <_sbrk_r>
 8009180:	4580      	cmp	r8, r0
 8009182:	d13a      	bne.n	80091fa <_malloc_r+0xd2>
 8009184:	6821      	ldr	r1, [r4, #0]
 8009186:	3503      	adds	r5, #3
 8009188:	1a6d      	subs	r5, r5, r1
 800918a:	f025 0503 	bic.w	r5, r5, #3
 800918e:	3508      	adds	r5, #8
 8009190:	2d0c      	cmp	r5, #12
 8009192:	bf38      	it	cc
 8009194:	250c      	movcc	r5, #12
 8009196:	4629      	mov	r1, r5
 8009198:	4638      	mov	r0, r7
 800919a:	f7ff ffa5 	bl	80090e8 <sbrk_aligned>
 800919e:	3001      	adds	r0, #1
 80091a0:	d02b      	beq.n	80091fa <_malloc_r+0xd2>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	442b      	add	r3, r5
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	e00e      	b.n	80091c8 <_malloc_r+0xa0>
 80091aa:	6822      	ldr	r2, [r4, #0]
 80091ac:	1b52      	subs	r2, r2, r5
 80091ae:	d41e      	bmi.n	80091ee <_malloc_r+0xc6>
 80091b0:	2a0b      	cmp	r2, #11
 80091b2:	d916      	bls.n	80091e2 <_malloc_r+0xba>
 80091b4:	1961      	adds	r1, r4, r5
 80091b6:	42a3      	cmp	r3, r4
 80091b8:	6025      	str	r5, [r4, #0]
 80091ba:	bf18      	it	ne
 80091bc:	6059      	strne	r1, [r3, #4]
 80091be:	6863      	ldr	r3, [r4, #4]
 80091c0:	bf08      	it	eq
 80091c2:	6031      	streq	r1, [r6, #0]
 80091c4:	5162      	str	r2, [r4, r5]
 80091c6:	604b      	str	r3, [r1, #4]
 80091c8:	4638      	mov	r0, r7
 80091ca:	f104 060b 	add.w	r6, r4, #11
 80091ce:	f000 f865 	bl	800929c <__malloc_unlock>
 80091d2:	f026 0607 	bic.w	r6, r6, #7
 80091d6:	1d23      	adds	r3, r4, #4
 80091d8:	1af2      	subs	r2, r6, r3
 80091da:	d0b6      	beq.n	800914a <_malloc_r+0x22>
 80091dc:	1b9b      	subs	r3, r3, r6
 80091de:	50a3      	str	r3, [r4, r2]
 80091e0:	e7b3      	b.n	800914a <_malloc_r+0x22>
 80091e2:	6862      	ldr	r2, [r4, #4]
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	bf0c      	ite	eq
 80091e8:	6032      	streq	r2, [r6, #0]
 80091ea:	605a      	strne	r2, [r3, #4]
 80091ec:	e7ec      	b.n	80091c8 <_malloc_r+0xa0>
 80091ee:	4623      	mov	r3, r4
 80091f0:	6864      	ldr	r4, [r4, #4]
 80091f2:	e7b2      	b.n	800915a <_malloc_r+0x32>
 80091f4:	4634      	mov	r4, r6
 80091f6:	6876      	ldr	r6, [r6, #4]
 80091f8:	e7b9      	b.n	800916e <_malloc_r+0x46>
 80091fa:	230c      	movs	r3, #12
 80091fc:	603b      	str	r3, [r7, #0]
 80091fe:	4638      	mov	r0, r7
 8009200:	f000 f84c 	bl	800929c <__malloc_unlock>
 8009204:	e7a1      	b.n	800914a <_malloc_r+0x22>
 8009206:	6025      	str	r5, [r4, #0]
 8009208:	e7de      	b.n	80091c8 <_malloc_r+0xa0>
 800920a:	bf00      	nop
 800920c:	200024e0 	.word	0x200024e0

08009210 <_realloc_r>:
 8009210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009214:	4680      	mov	r8, r0
 8009216:	4614      	mov	r4, r2
 8009218:	460e      	mov	r6, r1
 800921a:	b921      	cbnz	r1, 8009226 <_realloc_r+0x16>
 800921c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009220:	4611      	mov	r1, r2
 8009222:	f7ff bf81 	b.w	8009128 <_malloc_r>
 8009226:	b92a      	cbnz	r2, 8009234 <_realloc_r+0x24>
 8009228:	f7ff ff12 	bl	8009050 <_free_r>
 800922c:	4625      	mov	r5, r4
 800922e:	4628      	mov	r0, r5
 8009230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009234:	f000 f838 	bl	80092a8 <_malloc_usable_size_r>
 8009238:	4284      	cmp	r4, r0
 800923a:	4607      	mov	r7, r0
 800923c:	d802      	bhi.n	8009244 <_realloc_r+0x34>
 800923e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009242:	d812      	bhi.n	800926a <_realloc_r+0x5a>
 8009244:	4621      	mov	r1, r4
 8009246:	4640      	mov	r0, r8
 8009248:	f7ff ff6e 	bl	8009128 <_malloc_r>
 800924c:	4605      	mov	r5, r0
 800924e:	2800      	cmp	r0, #0
 8009250:	d0ed      	beq.n	800922e <_realloc_r+0x1e>
 8009252:	42bc      	cmp	r4, r7
 8009254:	4622      	mov	r2, r4
 8009256:	4631      	mov	r1, r6
 8009258:	bf28      	it	cs
 800925a:	463a      	movcs	r2, r7
 800925c:	f7ff fbb8 	bl	80089d0 <memcpy>
 8009260:	4631      	mov	r1, r6
 8009262:	4640      	mov	r0, r8
 8009264:	f7ff fef4 	bl	8009050 <_free_r>
 8009268:	e7e1      	b.n	800922e <_realloc_r+0x1e>
 800926a:	4635      	mov	r5, r6
 800926c:	e7df      	b.n	800922e <_realloc_r+0x1e>
	...

08009270 <_sbrk_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4d06      	ldr	r5, [pc, #24]	; (800928c <_sbrk_r+0x1c>)
 8009274:	2300      	movs	r3, #0
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	602b      	str	r3, [r5, #0]
 800927c:	f7f8 fd74 	bl	8001d68 <_sbrk>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_sbrk_r+0x1a>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_sbrk_r+0x1a>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	200024e8 	.word	0x200024e8

08009290 <__malloc_lock>:
 8009290:	4801      	ldr	r0, [pc, #4]	; (8009298 <__malloc_lock+0x8>)
 8009292:	f000 b811 	b.w	80092b8 <__retarget_lock_acquire_recursive>
 8009296:	bf00      	nop
 8009298:	200024ec 	.word	0x200024ec

0800929c <__malloc_unlock>:
 800929c:	4801      	ldr	r0, [pc, #4]	; (80092a4 <__malloc_unlock+0x8>)
 800929e:	f000 b80c 	b.w	80092ba <__retarget_lock_release_recursive>
 80092a2:	bf00      	nop
 80092a4:	200024ec 	.word	0x200024ec

080092a8 <_malloc_usable_size_r>:
 80092a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ac:	1f18      	subs	r0, r3, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bfbc      	itt	lt
 80092b2:	580b      	ldrlt	r3, [r1, r0]
 80092b4:	18c0      	addlt	r0, r0, r3
 80092b6:	4770      	bx	lr

080092b8 <__retarget_lock_acquire_recursive>:
 80092b8:	4770      	bx	lr

080092ba <__retarget_lock_release_recursive>:
 80092ba:	4770      	bx	lr

080092bc <_init>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	bf00      	nop
 80092c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c2:	bc08      	pop	{r3}
 80092c4:	469e      	mov	lr, r3
 80092c6:	4770      	bx	lr

080092c8 <_fini>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	bf00      	nop
 80092cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ce:	bc08      	pop	{r3}
 80092d0:	469e      	mov	lr, r3
 80092d2:	4770      	bx	lr
