
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003190  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800335c  0800335c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800335c  0800335c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800335c  0800335c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800335c  0800335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003370  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003370  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cc3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001755  00000000  00000000  00029cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d8  00000000  00000000  0002b458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  0002bd30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020109  00000000  00000000  0002c540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007548  00000000  00000000  0004c649  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8292  00000000  00000000  00053b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011be23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f8  00000000  00000000  0011bea0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003304 	.word	0x08003304

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003304 	.word	0x08003304

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fb05 	bl	80007de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f8b6 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f9a6 	bl	8000528 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 f986 	bl	80004ec <MX_DMA_Init>
  MX_ADC1_Init();
 80001e0:	f000 f920 	bl	8000424 <MX_ADC1_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  	  HAL_ADC_Start(&hadc1);
 80001e4:	4855      	ldr	r0, [pc, #340]	; (800033c <main+0x170>)
 80001e6:	f000 fe8b 	bl	8000f00 <HAL_ADC_Start>
	  	  //HAL_ADC_PollForConversion(&hadc1,1000);
	 	  readValue=HAL_ADC_GetValue(&hadc1);
 80001ea:	4854      	ldr	r0, [pc, #336]	; (800033c <main+0x170>)
 80001ec:	f000 feeb 	bl	8000fc6 <HAL_ADC_GetValue>
 80001f0:	4602      	mov	r2, r0
 80001f2:	4b53      	ldr	r3, [pc, #332]	; (8000340 <main+0x174>)
 80001f4:	601a      	str	r2, [r3, #0]

	 	  if(readValue>200){
 80001f6:	4b52      	ldr	r3, [pc, #328]	; (8000340 <main+0x174>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2bc8      	cmp	r3, #200	; 0xc8
 80001fc:	d906      	bls.n	800020c <main+0x40>
	 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_5,1);
 80001fe:	2201      	movs	r2, #1
 8000200:	2120      	movs	r1, #32
 8000202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000206:	f001 ff07 	bl	8002018 <HAL_GPIO_WritePin>
 800020a:	e005      	b.n	8000218 <main+0x4c>
	 	  }
	 	  else{
	 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_5,0);
 800020c:	2200      	movs	r2, #0
 800020e:	2120      	movs	r1, #32
 8000210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000214:	f001 ff00 	bl	8002018 <HAL_GPIO_WritePin>
	 	  }

	 	 if(readValue>470){
 8000218:	4b49      	ldr	r3, [pc, #292]	; (8000340 <main+0x174>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8000220:	d906      	bls.n	8000230 <main+0x64>
	 	 	 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_5,1);
 8000222:	2201      	movs	r2, #1
 8000224:	2120      	movs	r1, #32
 8000226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022a:	f001 fef5 	bl	8002018 <HAL_GPIO_WritePin>
 800022e:	e005      	b.n	800023c <main+0x70>
	 	 	 	  }
	 	 	 	  else{
	 	 	 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_5,0);
 8000230:	2200      	movs	r2, #0
 8000232:	2120      	movs	r1, #32
 8000234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000238:	f001 feee 	bl	8002018 <HAL_GPIO_WritePin>
	 	 	 	  }

	 	if(readValue>407*2){
 800023c:	4b40      	ldr	r3, [pc, #256]	; (8000340 <main+0x174>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f240 322e 	movw	r2, #814	; 0x32e
 8000244:	4293      	cmp	r3, r2
 8000246:	d906      	bls.n	8000256 <main+0x8a>
	 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6,1);
 8000248:	2201      	movs	r2, #1
 800024a:	2140      	movs	r1, #64	; 0x40
 800024c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000250:	f001 fee2 	bl	8002018 <HAL_GPIO_WritePin>
 8000254:	e005      	b.n	8000262 <main+0x96>
	 		 	  }
	 		 	  else{
	 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_6,0);
 8000256:	2200      	movs	r2, #0
 8000258:	2140      	movs	r1, #64	; 0x40
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f001 fedb 	bl	8002018 <HAL_GPIO_WritePin>
	 		 	  }


	 	if(readValue>470*3){
 8000262:	4b37      	ldr	r3, [pc, #220]	; (8000340 <main+0x174>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f240 5282 	movw	r2, #1410	; 0x582
 800026a:	4293      	cmp	r3, r2
 800026c:	d907      	bls.n	800027e <main+0xb2>
	 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_8,1);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000278:	f001 fece 	bl	8002018 <HAL_GPIO_WritePin>
 800027c:	e006      	b.n	800028c <main+0xc0>
	 		 	  }
	 		 	  else{
	 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_8,0);
 800027e:	2200      	movs	r2, #0
 8000280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000288:	f001 fec6 	bl	8002018 <HAL_GPIO_WritePin>
	 		 	  }

	 	if(readValue>470*4){
 800028c:	4b2c      	ldr	r3, [pc, #176]	; (8000340 <main+0x174>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f5b3 6feb 	cmp.w	r3, #1880	; 0x758
 8000294:	d907      	bls.n	80002a6 <main+0xda>
	 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_9,1);
 8000296:	2201      	movs	r2, #1
 8000298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f001 feba 	bl	8002018 <HAL_GPIO_WritePin>
 80002a4:	e006      	b.n	80002b4 <main+0xe8>
	 		 	  }
	 		 	  else{
	 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_9,0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f001 feb2 	bl	8002018 <HAL_GPIO_WritePin>
	 		 	  }
	 	if(readValue>470*5){
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <main+0x174>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f640 122e 	movw	r2, #2350	; 0x92e
 80002bc:	4293      	cmp	r3, r2
 80002be:	d907      	bls.n	80002d0 <main+0x104>
	 		 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_10,1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f001 fea5 	bl	8002018 <HAL_GPIO_WritePin>
 80002ce:	e006      	b.n	80002de <main+0x112>
	 		 		 	  }
	 		 		 	  else{
	 		 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_10,0);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002da:	f001 fe9d 	bl	8002018 <HAL_GPIO_WritePin>
	 		 		 	  }

	 	if(readValue>470*6){
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <main+0x174>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f640 3204 	movw	r2, #2820	; 0xb04
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d907      	bls.n	80002fa <main+0x12e>
	 		 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_11,1);
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f4:	f001 fe90 	bl	8002018 <HAL_GPIO_WritePin>
 80002f8:	e006      	b.n	8000308 <main+0x13c>
	 		 		 	  }
	 		 		 	  else{
	 		 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_11,0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000304:	f001 fe88 	bl	8002018 <HAL_GPIO_WritePin>
	 		 		 	  }
	 	if(readValue>470*7){
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <main+0x174>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f640 42da 	movw	r2, #3290	; 0xcda
 8000310:	4293      	cmp	r3, r2
 8000312:	d907      	bls.n	8000324 <main+0x158>
	 		 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_12,1);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031e:	f001 fe7b 	bl	8002018 <HAL_GPIO_WritePin>
 8000322:	e006      	b.n	8000332 <main+0x166>
	 		 		 	  }
	 		 		 	  else{
	 		 		 		 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_12,0);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032e:	f001 fe73 	bl	8002018 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, 1);
	 	 HAL_Delay(150);
	 	 HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
	 	                           |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, 0);
	 	*/
	 	HAL_Delay(150);
 8000332:	2096      	movs	r0, #150	; 0x96
 8000334:	f000 fac8 	bl	80008c8 <HAL_Delay>
	  	  HAL_ADC_Start(&hadc1);
 8000338:	e754      	b.n	80001e4 <main+0x18>
 800033a:	bf00      	nop
 800033c:	20000028 	.word	0x20000028
 8000340:	200000d4 	.word	0x200000d4

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b0ac      	sub	sp, #176	; 0xb0
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800034e:	2244      	movs	r2, #68	; 0x44
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f002 ffce 	bl	80032f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
 8000366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2254      	movs	r2, #84	; 0x54
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f002 ffc0 	bl	80032f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000374:	2310      	movs	r3, #16
 8000376:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000378:	2301      	movs	r3, #1
 800037a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000384:	2360      	movs	r3, #96	; 0x60
 8000386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038a:	2300      	movs	r3, #0
 800038c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000394:	4618      	mov	r0, r3
 8000396:	f001 febb 	bl	8002110 <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80003a0:	f000 f8f4 	bl	800058c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003a8:	2300      	movs	r3, #0
 80003aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 fac6 	bl	8002950 <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003ca:	f000 f8df 	bl	800058c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003da:	2301      	movs	r3, #1
 80003dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003de:	2301      	movs	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80003e2:	2308      	movs	r3, #8
 80003e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003e6:	2307      	movs	r3, #7
 80003e8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003ea:	2302      	movs	r3, #2
 80003ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003f6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 fc74 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000406:	f000 f8c1 	bl	800058c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800040a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800040e:	f001 fe29 	bl	8002064 <HAL_PWREx_ControlVoltageScaling>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000418:	f000 f8b8 	bl	800058c <Error_Handler>
  }
}
 800041c:	bf00      	nop
 800041e:	37b0      	adds	r7, #176	; 0xb0
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800042a:	463b      	mov	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
 8000438:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_ADC1_Init+0xbc>)
 800043c:	4a29      	ldr	r2, [pc, #164]	; (80004e4 <MX_ADC1_Init+0xc0>)
 800043e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MX_ADC1_Init+0xbc>)
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000446:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <MX_ADC1_Init+0xbc>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044c:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <MX_ADC1_Init+0xbc>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <MX_ADC1_Init+0xbc>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000458:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <MX_ADC1_Init+0xbc>)
 800045a:	2204      	movs	r2, #4
 800045c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800045e:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <MX_ADC1_Init+0xbc>)
 8000460:	2200      	movs	r2, #0
 8000462:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_ADC1_Init+0xbc>)
 8000466:	2200      	movs	r2, #0
 8000468:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800046a:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <MX_ADC1_Init+0xbc>)
 800046c:	2201      	movs	r2, #1
 800046e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_ADC1_Init+0xbc>)
 8000472:	2200      	movs	r2, #0
 8000474:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_ADC1_Init+0xbc>)
 800047a:	2200      	movs	r2, #0
 800047c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800047e:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_ADC1_Init+0xbc>)
 8000480:	2200      	movs	r2, #0
 8000482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <MX_ADC1_Init+0xbc>)
 8000486:	2200      	movs	r2, #0
 8000488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_ADC1_Init+0xbc>)
 800048e:	2200      	movs	r2, #0
 8000490:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <MX_ADC1_Init+0xbc>)
 8000494:	2200      	movs	r2, #0
 8000496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800049a:	4811      	ldr	r0, [pc, #68]	; (80004e0 <MX_ADC1_Init+0xbc>)
 800049c:	f000 fbea 	bl	8000c74 <HAL_ADC_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80004a6:	f000 f871 	bl	800058c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_ADC1_Init+0xc4>)
 80004ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ae:	2306      	movs	r3, #6
 80004b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004b6:	237f      	movs	r3, #127	; 0x7f
 80004b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ba:	2304      	movs	r3, #4
 80004bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c2:	463b      	mov	r3, r7
 80004c4:	4619      	mov	r1, r3
 80004c6:	4806      	ldr	r0, [pc, #24]	; (80004e0 <MX_ADC1_Init+0xbc>)
 80004c8:	f000 fd8a 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80004d2:	f000 f85b 	bl	800058c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	3718      	adds	r7, #24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000028 	.word	0x20000028
 80004e4:	50040000 	.word	0x50040000
 80004e8:	32601000 	.word	0x32601000

080004ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_DMA_Init+0x38>)
 80004f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <MX_DMA_Init+0x38>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6493      	str	r3, [r2, #72]	; 0x48
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_DMA_Init+0x38>)
 8000500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	200b      	movs	r0, #11
 8000510:	f001 fa79 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000514:	200b      	movs	r0, #11
 8000516:	f001 fa92 	bl	8001a3e <HAL_NVIC_EnableIRQ>

}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <MX_GPIO_Init+0x60>)
 800053e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000540:	4a11      	ldr	r2, [pc, #68]	; (8000588 <MX_GPIO_Init+0x60>)
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_GPIO_Init+0x60>)
 800054a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 51fb 	mov.w	r1, #8032	; 0x1f60
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f001 fd5b 	bl	8002018 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA8 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 8000562:	f44f 53fb 	mov.w	r3, #8032	; 0x1f60
 8000566:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4619      	mov	r1, r3
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f001 fbe2 	bl	8001d44 <HAL_GPIO_Init>

}
 8000580:	bf00      	nop
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000

0800058c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000590:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000592:	e7fe      	b.n	8000592 <Error_Handler+0x6>

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <HAL_MspInit+0x44>)
 800059c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <HAL_MspInit+0x44>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6613      	str	r3, [r2, #96]	; 0x60
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <HAL_MspInit+0x44>)
 80005a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <HAL_MspInit+0x44>)
 80005b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b6:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <HAL_MspInit+0x44>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	6593      	str	r3, [r2, #88]	; 0x58
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_MspInit+0x44>)
 80005c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <HAL_ADC_MspInit+0xcc>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d14f      	bne.n	800069e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <HAL_ADC_MspInit+0xd0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a2a      	ldr	r2, [pc, #168]	; (80006ac <HAL_ADC_MspInit+0xd0>)
 8000604:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b28      	ldr	r3, [pc, #160]	; (80006ac <HAL_ADC_MspInit+0xd0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <HAL_ADC_MspInit+0xd0>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a24      	ldr	r2, [pc, #144]	; (80006ac <HAL_ADC_MspInit+0xd0>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <HAL_ADC_MspInit+0xd0>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000632:	230b      	movs	r3, #11
 8000634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000644:	f001 fb7e 	bl	8001d44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 800064a:	4a1a      	ldr	r2, [pc, #104]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 800064c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 8000668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800066c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 8000670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000674:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 8000684:	f001 f9f6 	bl	8001a74 <HAL_DMA_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800068e:	f7ff ff7d 	bl	800058c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 8000696:	64da      	str	r2, [r3, #76]	; 0x4c
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	; 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	50040000 	.word	0x50040000
 80006ac:	40021000 	.word	0x40021000
 80006b0:	2000008c 	.word	0x2000008c
 80006b4:	40020008 	.word	0x40020008

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f8c0 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <DMA1_Channel1_IRQHandler+0x10>)
 8000712:	f001 fa67 	bl	8001be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000008c 	.word	0x2000008c

08000720 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x64>)
 8000726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072a:	4a16      	ldr	r2, [pc, #88]	; (8000784 <SystemInit+0x64>)
 800072c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x68>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <SystemInit+0x68>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <SystemInit+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <SystemInit+0x68>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <SystemInit+0x68>)
 800074c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000750:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000754:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <SystemInit+0x68>)
 8000758:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800075c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <SystemInit+0x68>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a09      	ldr	r2, [pc, #36]	; (8000788 <SystemInit+0x68>)
 8000764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000768:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <SystemInit+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x64>)
 8000772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000776:	609a      	str	r2, [r3, #8]
#endif
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	40021000 	.word	0x40021000

0800078c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800078c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000790:	f7ff ffc6 	bl	8000720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000794:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000796:	e003      	b.n	80007a0 <LoopCopyDataInit>

08000798 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800079a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800079c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800079e:	3104      	adds	r1, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007a8:	d3f6      	bcc.n	8000798 <CopyDataInit>
	ldr	r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007ac:	e002      	b.n	80007b4 <LoopFillZerobss>

080007ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007b0:	f842 3b04 	str.w	r3, [r2], #4

080007b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <LoopForever+0x16>)
	cmp	r2, r3
 80007b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007b8:	d3f9      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ba:	f002 fd77 	bl	80032ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007be:	f7ff fd05 	bl	80001cc <main>

080007c2 <LoopForever>:

LoopForever:
    b LoopForever
 80007c2:	e7fe      	b.n	80007c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007c4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80007c8:	08003364 	.word	0x08003364
	ldr	r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007d0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80007d4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80007d8:	200000dc 	.word	0x200000dc

080007dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_IRQHandler>

080007de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f001 f901 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 f80e 	bl	8000810 <HAL_InitTick>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	e001      	b.n	8000804 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000800:	f7ff fec8 	bl	8000594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000804:	79fb      	ldrb	r3, [r7, #7]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <HAL_InitTick+0x6c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d023      	beq.n	800086c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_InitTick+0x70>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_InitTick+0x6c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000832:	fbb3 f3f1 	udiv	r3, r3, r1
 8000836:	fbb2 f3f3 	udiv	r3, r2, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f90d 	bl	8001a5a <HAL_SYSTICK_Config>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10f      	bne.n	8000866 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d809      	bhi.n	8000860 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f001 f8d7 	bl	8001a06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000858:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <HAL_InitTick+0x74>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
 800085e:	e007      	b.n	8000870 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e004      	b.n	8000870 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	e001      	b.n	8000870 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000870:	7bfb      	ldrb	r3, [r7, #15]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008
 8000880:	20000000 	.word	0x20000000
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_IncTick+0x20>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x24>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_IncTick+0x24>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008
 80008ac:	200000d8 	.word	0x200000d8

080008b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <HAL_GetTick+0x14>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	200000d8 	.word	0x200000d8

080008c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff ffee 	bl	80008b0 <HAL_GetTick>
 80008d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e0:	d005      	beq.n	80008ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_Delay+0x40>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ee:	bf00      	nop
 80008f0:	f7ff ffde 	bl	80008b0 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f7      	bhi.n	80008f0 <HAL_Delay+0x28>
  {
  }
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000008 	.word	0x20000008

0800090c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	431a      	orrs	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	609a      	str	r2, [r3, #8]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	431a      	orrs	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	609a      	str	r2, [r3, #8]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3360      	adds	r3, #96	; 0x60
 8000986:	461a      	mov	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <LL_ADC_SetOffset+0x44>)
 8000996:	4013      	ands	r3, r2
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	430a      	orrs	r2, r1
 80009a2:	4313      	orrs	r3, r2
 80009a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80009ac:	bf00      	nop
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	03fff000 	.word	0x03fff000

080009bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3360      	adds	r3, #96	; 0x60
 80009ca:	461a      	mov	r2, r3
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4413      	add	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3360      	adds	r3, #96	; 0x60
 80009f8:	461a      	mov	r2, r3
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a12:	bf00      	nop
 8000a14:	371c      	adds	r7, #28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b087      	sub	sp, #28
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3330      	adds	r3, #48	; 0x30
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	f003 030c 	and.w	r3, r3, #12
 8000a3a:	4413      	add	r3, r2
 8000a3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	f003 031f 	and.w	r3, r3, #31
 8000a48:	211f      	movs	r1, #31
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	401a      	ands	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	0e9b      	lsrs	r3, r3, #26
 8000a56:	f003 011f 	and.w	r1, r3, #31
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	f003 031f 	and.w	r3, r3, #31
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	431a      	orrs	r2, r3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a6a:	bf00      	nop
 8000a6c:	371c      	adds	r7, #28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b087      	sub	sp, #28
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3314      	adds	r3, #20
 8000a86:	461a      	mov	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	0e5b      	lsrs	r3, r3, #25
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	4413      	add	r3, r2
 8000a94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	0d1b      	lsrs	r3, r3, #20
 8000a9e:	f003 031f 	and.w	r3, r3, #31
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	401a      	ands	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	0d1b      	lsrs	r3, r3, #20
 8000ab0:	f003 031f 	and.w	r3, r3, #31
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	431a      	orrs	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0318 	and.w	r3, r3, #24
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000af0:	40d9      	lsrs	r1, r3
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	400b      	ands	r3, r1
 8000af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000afa:	431a      	orrs	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	0007ffff 	.word	0x0007ffff

08000b14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000b24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	6093      	str	r3, [r2, #8]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b4c:	d101      	bne.n	8000b52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000b70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b9c:	d101      	bne.n	8000ba2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e000      	b.n	8000ba4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000bc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bc4:	f043 0201 	orr.w	r2, r3, #1
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d101      	bne.n	8000bf0 <LL_ADC_IsEnabled+0x18>
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <LL_ADC_IsEnabled+0x1a>
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c12:	f043 0204 	orr.w	r2, r3, #4
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d101      	bne.n	8000c3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	2b08      	cmp	r3, #8
 8000c5e:	d101      	bne.n	8000c64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e12a      	b.n	8000ee4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d109      	bne.n	8000cb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fc9d 	bl	80005dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff3f 	bl	8000b38 <LL_ADC_IsDeepPowerDownEnabled>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d004      	beq.n	8000cca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff25 	bl	8000b14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff5a 	bl	8000b88 <LL_ADC_IsInternalRegulatorEnabled>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d113      	bne.n	8000d02 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff3e 	bl	8000b60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ce4:	4b81      	ldr	r3, [pc, #516]	; (8000eec <HAL_ADC_Init+0x278>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	099b      	lsrs	r3, r3, #6
 8000cea:	4a81      	ldr	r2, [pc, #516]	; (8000ef0 <HAL_ADC_Init+0x27c>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	099b      	lsrs	r3, r3, #6
 8000cf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000cf4:	e002      	b.n	8000cfc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f9      	bne.n	8000cf6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff3e 	bl	8000b88 <LL_ADC_IsInternalRegulatorEnabled>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10d      	bne.n	8000d2e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d16:	f043 0210 	orr.w	r2, r3, #16
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	f043 0201 	orr.w	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff77 	bl	8000c26 <LL_ADC_REG_IsConversionOngoing>
 8000d38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 80c5 	bne.w	8000ed2 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 80c1 	bne.w	8000ed2 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d58:	f043 0202 	orr.w	r2, r3, #2
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff37 	bl	8000bd8 <LL_ADC_IsEnabled>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10b      	bne.n	8000d88 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d70:	4860      	ldr	r0, [pc, #384]	; (8000ef4 <HAL_ADC_Init+0x280>)
 8000d72:	f7ff ff31 	bl	8000bd8 <LL_ADC_IsEnabled>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d105      	bne.n	8000d88 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	4619      	mov	r1, r3
 8000d82:	485d      	ldr	r0, [pc, #372]	; (8000ef8 <HAL_ADC_Init+0x284>)
 8000d84:	f7ff fdc2 	bl	800090c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7e5b      	ldrb	r3, [r3, #25]
 8000d8c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d92:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000d98:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000d9e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d106      	bne.n	8000dc4 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	045b      	lsls	r3, r3, #17
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d009      	beq.n	8000de0 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	4b45      	ldr	r3, [pc, #276]	; (8000efc <HAL_ADC_Init+0x288>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	69b9      	ldr	r1, [r7, #24]
 8000df0:	430b      	orrs	r3, r1
 8000df2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff14 	bl	8000c26 <LL_ADC_REG_IsConversionOngoing>
 8000dfe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff21 	bl	8000c4c <LL_ADC_INJ_IsConversionOngoing>
 8000e0a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d13d      	bne.n	8000e8e <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d13a      	bne.n	8000e8e <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e1c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e24:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e34:	f023 0302 	bic.w	r3, r3, #2
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	6812      	ldr	r2, [r2, #0]
 8000e3c:	69b9      	ldr	r1, [r7, #24]
 8000e3e:	430b      	orrs	r3, r1
 8000e40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d118      	bne.n	8000e7e <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000e56:	f023 0304 	bic.w	r3, r3, #4
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e62:	4311      	orrs	r1, r2
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000e68:	4311      	orrs	r1, r2
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	431a      	orrs	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 0201 	orr.w	r2, r2, #1
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	e007      	b.n	8000e8e <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0201 	bic.w	r2, r2, #1
 8000e8c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d10c      	bne.n	8000eb0 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	f023 010f 	bic.w	r1, r3, #15
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	1e5a      	subs	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	631a      	str	r2, [r3, #48]	; 0x30
 8000eae:	e007      	b.n	8000ec0 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 020f 	bic.w	r2, r2, #15
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec4:	f023 0303 	bic.w	r3, r3, #3
 8000ec8:	f043 0201 	orr.w	r2, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54
 8000ed0:	e007      	b.n	8000ee2 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed6:	f043 0210 	orr.w	r2, r3, #16
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ee2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	053e2d63 	.word	0x053e2d63
 8000ef4:	50040000 	.word	0x50040000
 8000ef8:	50040300 	.word	0x50040300
 8000efc:	fff0c007 	.word	0xfff0c007

08000f00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe8a 	bl	8000c26 <LL_ADC_REG_IsConversionOngoing>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d14f      	bne.n	8000fb8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_Start+0x26>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e04b      	b.n	8000fbe <HAL_ADC_Start+0xbe>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 fc34 	bl	800179c <ADC_Enable>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d137      	bne.n	8000fae <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f5e:	d106      	bne.n	8000f6e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f64:	f023 0206 	bic.w	r2, r3, #6
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8000f6c:	e002      	b.n	8000f74 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	221c      	movs	r2, #28
 8000f7a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fe29 	bl	8000bfe <LL_ADC_REG_StartConversion>
 8000fac:	e006      	b.n	8000fbc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000fb6:	e001      	b.n	8000fbc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0b6      	sub	sp, #216	; 0xd8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_ADC_ConfigChannel+0x22>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e3b8      	b.n	8001774 <HAL_ADC_ConfigChannel+0x794>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe09 	bl	8000c26 <LL_ADC_REG_IsConversionOngoing>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 839d 	bne.w	8001756 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b05      	cmp	r3, #5
 8001022:	d824      	bhi.n	800106e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	3b02      	subs	r3, #2
 800102a:	2b03      	cmp	r3, #3
 800102c:	d81b      	bhi.n	8001066 <HAL_ADC_ConfigChannel+0x86>
 800102e:	a201      	add	r2, pc, #4	; (adr r2, 8001034 <HAL_ADC_ConfigChannel+0x54>)
 8001030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001034:	08001045 	.word	0x08001045
 8001038:	0800104d 	.word	0x0800104d
 800103c:	08001055 	.word	0x08001055
 8001040:	0800105d 	.word	0x0800105d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	220c      	movs	r2, #12
 8001048:	605a      	str	r2, [r3, #4]
          break;
 800104a:	e011      	b.n	8001070 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2212      	movs	r2, #18
 8001050:	605a      	str	r2, [r3, #4]
          break;
 8001052:	e00d      	b.n	8001070 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2218      	movs	r2, #24
 8001058:	605a      	str	r2, [r3, #4]
          break;
 800105a:	e009      	b.n	8001070 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001062:	605a      	str	r2, [r3, #4]
          break;
 8001064:	e004      	b.n	8001070 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	2206      	movs	r2, #6
 800106a:	605a      	str	r2, [r3, #4]
          break;
 800106c:	e000      	b.n	8001070 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800106e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6859      	ldr	r1, [r3, #4]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	f7ff fcce 	bl	8000a1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fdcd 	bl	8000c26 <LL_ADC_REG_IsConversionOngoing>
 800108c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fdd9 	bl	8000c4c <LL_ADC_INJ_IsConversionOngoing>
 800109a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800109e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f040 81a6 	bne.w	80013f4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f040 81a1 	bne.w	80013f4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	6819      	ldr	r1, [r3, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	461a      	mov	r2, r3
 80010c0:	f7ff fcd9 	bl	8000a76 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	08db      	lsrs	r3, r3, #3
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d00a      	beq.n	80010fc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	6919      	ldr	r1, [r3, #16]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80010f6:	f7ff fc3d 	bl	8000974 <LL_ADC_SetOffset>
 80010fa:	e17b      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fc5a 	bl	80009bc <LL_ADC_GetOffsetChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10a      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x148>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fc4f 	bl	80009bc <LL_ADC_GetOffsetChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	0e9b      	lsrs	r3, r3, #26
 8001122:	f003 021f 	and.w	r2, r3, #31
 8001126:	e01e      	b.n	8001166 <HAL_ADC_ConfigChannel+0x186>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fc44 	bl	80009bc <LL_ADC_GetOffsetChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800114a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800114e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001156:	2320      	movs	r3, #32
 8001158:	e004      	b.n	8001164 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800115a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800115e:	fab3 f383 	clz	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800116e:	2b00      	cmp	r3, #0
 8001170:	d105      	bne.n	800117e <HAL_ADC_ConfigChannel+0x19e>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	0e9b      	lsrs	r3, r3, #26
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	e018      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x1d0>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800119a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80011a2:	2320      	movs	r3, #32
 80011a4:	e004      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80011a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d106      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fc13 	bl	80009e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2101      	movs	r1, #1
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fbf7 	bl	80009bc <LL_ADC_GetOffsetChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10a      	bne.n	80011ee <HAL_ADC_ConfigChannel+0x20e>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fbec 	bl	80009bc <LL_ADC_GetOffsetChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	0e9b      	lsrs	r3, r3, #26
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	e01e      	b.n	800122c <HAL_ADC_ConfigChannel+0x24c>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fbe1 	bl	80009bc <LL_ADC_GetOffsetChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800120c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800121c:	2320      	movs	r3, #32
 800121e:	e004      	b.n	800122a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001234:	2b00      	cmp	r3, #0
 8001236:	d105      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x264>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0e9b      	lsrs	r3, r3, #26
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	e018      	b.n	8001276 <HAL_ADC_ConfigChannel+0x296>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001258:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800125c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001268:	2320      	movs	r3, #32
 800126a:	e004      	b.n	8001276 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800126c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001270:	fab3 f383 	clz	r3, r3
 8001274:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001276:	429a      	cmp	r2, r3
 8001278:	d106      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2200      	movs	r2, #0
 8001280:	2101      	movs	r1, #1
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fbb0 	bl	80009e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2102      	movs	r1, #2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb94 	bl	80009bc <LL_ADC_GetOffsetChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10a      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x2d4>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2102      	movs	r1, #2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fb89 	bl	80009bc <LL_ADC_GetOffsetChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	0e9b      	lsrs	r3, r3, #26
 80012ae:	f003 021f 	and.w	r2, r3, #31
 80012b2:	e01e      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x312>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2102      	movs	r1, #2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fb7e 	bl	80009bc <LL_ADC_GetOffsetChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80012d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80012da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80012e2:	2320      	movs	r3, #32
 80012e4:	e004      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80012e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012ea:	fab3 f383 	clz	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d105      	bne.n	800130a <HAL_ADC_ConfigChannel+0x32a>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0e9b      	lsrs	r3, r3, #26
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	e016      	b.n	8001338 <HAL_ADC_ConfigChannel+0x358>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800131c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800131e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800132a:	2320      	movs	r3, #32
 800132c:	e004      	b.n	8001338 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800132e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001338:	429a      	cmp	r2, r3
 800133a:	d106      	bne.n	800134a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	2102      	movs	r1, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fb4f 	bl	80009e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2103      	movs	r1, #3
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fb33 	bl	80009bc <LL_ADC_GetOffsetChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10a      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x396>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2103      	movs	r1, #3
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fb28 	bl	80009bc <LL_ADC_GetOffsetChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	0e9b      	lsrs	r3, r3, #26
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	e017      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x3c6>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2103      	movs	r1, #3
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb1d 	bl	80009bc <LL_ADC_GetOffsetChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800138e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001390:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001398:	2320      	movs	r3, #32
 800139a:	e003      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800139c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800139e:	fab3 f383 	clz	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <HAL_ADC_ConfigChannel+0x3de>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0e9b      	lsrs	r3, r3, #26
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	e011      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x402>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013c6:	fa93 f3a3 	rbit	r3, r3
 80013ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80013cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80013d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80013d6:	2320      	movs	r3, #32
 80013d8:	e003      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80013da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d106      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	2103      	movs	r1, #3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fafa 	bl	80009e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fbed 	bl	8000bd8 <LL_ADC_IsEnabled>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	f040 813f 	bne.w	8001684 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6819      	ldr	r1, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	461a      	mov	r2, r3
 8001414:	f7ff fb5a 	bl	8000acc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4a8e      	ldr	r2, [pc, #568]	; (8001658 <HAL_ADC_ConfigChannel+0x678>)
 800141e:	4293      	cmp	r3, r2
 8001420:	f040 8130 	bne.w	8001684 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10b      	bne.n	800144c <HAL_ADC_ConfigChannel+0x46c>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0e9b      	lsrs	r3, r3, #26
 800143a:	3301      	adds	r3, #1
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	2b09      	cmp	r3, #9
 8001442:	bf94      	ite	ls
 8001444:	2301      	movls	r3, #1
 8001446:	2300      	movhi	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	e019      	b.n	8001480 <HAL_ADC_ConfigChannel+0x4a0>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001454:	fa93 f3a3 	rbit	r3, r3
 8001458:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800145a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800145c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800145e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001464:	2320      	movs	r3, #32
 8001466:	e003      	b.n	8001470 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	3301      	adds	r3, #1
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	2b09      	cmp	r3, #9
 8001478:	bf94      	ite	ls
 800147a:	2301      	movls	r3, #1
 800147c:	2300      	movhi	r3, #0
 800147e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001480:	2b00      	cmp	r3, #0
 8001482:	d079      	beq.n	8001578 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x4c0>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0e9b      	lsrs	r3, r3, #26
 8001496:	3301      	adds	r3, #1
 8001498:	069b      	lsls	r3, r3, #26
 800149a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800149e:	e015      	b.n	80014cc <HAL_ADC_ConfigChannel+0x4ec>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80014ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80014b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80014b8:	2320      	movs	r3, #32
 80014ba:	e003      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80014bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	069b      	lsls	r3, r3, #26
 80014c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d109      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x50c>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0e9b      	lsrs	r3, r3, #26
 80014de:	3301      	adds	r3, #1
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	e017      	b.n	800151c <HAL_ADC_ConfigChannel+0x53c>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014f4:	fa93 f3a3 	rbit	r3, r3
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80014fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80014fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001504:	2320      	movs	r3, #32
 8001506:	e003      	b.n	8001510 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800150a:	fab3 f383 	clz	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3301      	adds	r3, #1
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	2101      	movs	r1, #1
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	ea42 0103 	orr.w	r1, r2, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10a      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x562>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0e9b      	lsrs	r3, r3, #26
 8001532:	3301      	adds	r3, #1
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	051b      	lsls	r3, r3, #20
 8001540:	e018      	b.n	8001574 <HAL_ADC_ConfigChannel+0x594>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800155a:	2320      	movs	r3, #32
 800155c:	e003      	b.n	8001566 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800155e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001560:	fab3 f383 	clz	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	3301      	adds	r3, #1
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001574:	430b      	orrs	r3, r1
 8001576:	e080      	b.n	800167a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001580:	2b00      	cmp	r3, #0
 8001582:	d107      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x5b4>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0e9b      	lsrs	r3, r3, #26
 800158a:	3301      	adds	r3, #1
 800158c:	069b      	lsls	r3, r3, #26
 800158e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001592:	e015      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x5e0>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80015a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80015a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80015ac:	2320      	movs	r3, #32
 80015ae:	e003      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80015b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	069b      	lsls	r3, r3, #26
 80015bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x600>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0e9b      	lsrs	r3, r3, #26
 80015d2:	3301      	adds	r3, #1
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	e017      	b.n	8001610 <HAL_ADC_ConfigChannel+0x630>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	61fb      	str	r3, [r7, #28]
  return result;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80015f8:	2320      	movs	r3, #32
 80015fa:	e003      	b.n	8001604 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	fab3 f383 	clz	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	3301      	adds	r3, #1
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	ea42 0103 	orr.w	r1, r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10d      	bne.n	800163c <HAL_ADC_ConfigChannel+0x65c>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0e9b      	lsrs	r3, r3, #26
 8001626:	3301      	adds	r3, #1
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	3b1e      	subs	r3, #30
 8001634:	051b      	lsls	r3, r3, #20
 8001636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800163a:	e01d      	b.n	8001678 <HAL_ADC_ConfigChannel+0x698>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa93 f3a3 	rbit	r3, r3
 8001648:	613b      	str	r3, [r7, #16]
  return result;
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d103      	bne.n	800165c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001654:	2320      	movs	r3, #32
 8001656:	e005      	b.n	8001664 <HAL_ADC_ConfigChannel+0x684>
 8001658:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	3301      	adds	r3, #1
 8001666:	f003 021f 	and.w	r2, r3, #31
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	3b1e      	subs	r3, #30
 8001672:	051b      	lsls	r3, r3, #20
 8001674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001678:	430b      	orrs	r3, r1
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	6892      	ldr	r2, [r2, #8]
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff f9f9 	bl	8000a76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <HAL_ADC_ConfigChannel+0x79c>)
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d06b      	beq.n	8001768 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001690:	483b      	ldr	r0, [pc, #236]	; (8001780 <HAL_ADC_ConfigChannel+0x7a0>)
 8001692:	f7ff f961 	bl	8000958 <LL_ADC_GetCommonPathInternalCh>
 8001696:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a39      	ldr	r2, [pc, #228]	; (8001784 <HAL_ADC_ConfigChannel+0x7a4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d126      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d120      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a34      	ldr	r2, [pc, #208]	; (8001788 <HAL_ADC_ConfigChannel+0x7a8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d156      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016c2:	4619      	mov	r1, r3
 80016c4:	482e      	ldr	r0, [pc, #184]	; (8001780 <HAL_ADC_ConfigChannel+0x7a0>)
 80016c6:	f7ff f934 	bl	8000932 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80016ca:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_ADC_ConfigChannel+0x7ac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	099b      	lsrs	r3, r3, #6
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_ADC_ConfigChannel+0x7b0>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	099a      	lsrs	r2, r3, #6
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016e2:	e002      	b.n	80016ea <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f9      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016f0:	e03a      	b.n	8001768 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a27      	ldr	r2, [pc, #156]	; (8001794 <HAL_ADC_ConfigChannel+0x7b4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d113      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x744>
 80016fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10d      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_ADC_ConfigChannel+0x7a8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12a      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171a:	4619      	mov	r1, r3
 800171c:	4818      	ldr	r0, [pc, #96]	; (8001780 <HAL_ADC_ConfigChannel+0x7a0>)
 800171e:	f7ff f908 	bl	8000932 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001722:	e021      	b.n	8001768 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_ADC_ConfigChannel+0x7b8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d11c      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800172e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_ADC_ConfigChannel+0x7a8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d111      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800174c:	4619      	mov	r1, r3
 800174e:	480c      	ldr	r0, [pc, #48]	; (8001780 <HAL_ADC_ConfigChannel+0x7a0>)
 8001750:	f7ff f8ef 	bl	8000932 <LL_ADC_SetCommonPathInternalCh>
 8001754:	e008      	b.n	8001768 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175a:	f043 0220 	orr.w	r2, r3, #32
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001770:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001774:	4618      	mov	r0, r3
 8001776:	37d8      	adds	r7, #216	; 0xd8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	80080000 	.word	0x80080000
 8001780:	50040300 	.word	0x50040300
 8001784:	c7520000 	.word	0xc7520000
 8001788:	50040000 	.word	0x50040000
 800178c:	20000000 	.word	0x20000000
 8001790:	053e2d63 	.word	0x053e2d63
 8001794:	cb840000 	.word	0xcb840000
 8001798:	80000001 	.word	0x80000001

0800179c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fa15 	bl	8000bd8 <LL_ADC_IsEnabled>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d146      	bne.n	8001842 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <ADC_Enable+0xb0>)
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00d      	beq.n	80017de <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c6:	f043 0210 	orr.w	r2, r3, #16
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e032      	b.n	8001844 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f9e4 	bl	8000bb0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80017e8:	f7ff f862 	bl	80008b0 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017ee:	e021      	b.n	8001834 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff f9ef 	bl	8000bd8 <LL_ADC_IsEnabled>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d104      	bne.n	800180a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff f9d3 	bl	8000bb0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800180a:	f7ff f851 	bl	80008b0 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d90d      	bls.n	8001834 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181c:	f043 0210 	orr.w	r2, r3, #16
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e007      	b.n	8001844 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	d1d6      	bne.n	80017f0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	8000003f 	.word	0x8000003f

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff3e 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff8e 	bl	8001944 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5d 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff31 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa2 	bl	80019ac <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e098      	b.n	8001bb8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <HAL_DMA_Init+0x150>)
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d80f      	bhi.n	8001ab2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <HAL_DMA_Init+0x154>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a4b      	ldr	r2, [pc, #300]	; (8001bcc <HAL_DMA_Init+0x158>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	009a      	lsls	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a48      	ldr	r2, [pc, #288]	; (8001bd0 <HAL_DMA_Init+0x15c>)
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
 8001ab0:	e00e      	b.n	8001ad0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <HAL_DMA_Init+0x160>)
 8001aba:	4413      	add	r3, r2
 8001abc:	4a43      	ldr	r2, [pc, #268]	; (8001bcc <HAL_DMA_Init+0x158>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	009a      	lsls	r2, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a42      	ldr	r2, [pc, #264]	; (8001bd8 <HAL_DMA_Init+0x164>)
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b2a:	d039      	beq.n	8001ba0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <HAL_DMA_Init+0x15c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d11a      	bne.n	8001b6c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b36:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <HAL_DMA_Init+0x168>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f003 031c 	and.w	r3, r3, #28
 8001b42:	210f      	movs	r1, #15
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	4924      	ldr	r1, [pc, #144]	; (8001bdc <HAL_DMA_Init+0x168>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_DMA_Init+0x168>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f003 031c 	and.w	r3, r3, #28
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	491d      	ldr	r1, [pc, #116]	; (8001bdc <HAL_DMA_Init+0x168>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
 8001b6a:	e019      	b.n	8001ba0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_DMA_Init+0x16c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f003 031c 	and.w	r3, r3, #28
 8001b78:	210f      	movs	r1, #15
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	4917      	ldr	r1, [pc, #92]	; (8001be0 <HAL_DMA_Init+0x16c>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_DMA_Init+0x16c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6859      	ldr	r1, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f003 031c 	and.w	r3, r3, #28
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	4911      	ldr	r1, [pc, #68]	; (8001be0 <HAL_DMA_Init+0x16c>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40020407 	.word	0x40020407
 8001bc8:	bffdfff8 	.word	0xbffdfff8
 8001bcc:	cccccccd 	.word	0xcccccccd
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	bffdfbf8 	.word	0xbffdfbf8
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	400200a8 	.word	0x400200a8
 8001be0:	400204a8 	.word	0x400204a8

08001be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f003 031c 	and.w	r3, r3, #28
 8001c04:	2204      	movs	r2, #4
 8001c06:	409a      	lsls	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d026      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x7a>
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d021      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0204 	bic.w	r2, r2, #4
 8001c36:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f003 021c 	and.w	r2, r3, #28
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	2104      	movs	r1, #4
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d071      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001c5c:	e06c      	b.n	8001d38 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 031c 	and.w	r3, r3, #28
 8001c66:	2202      	movs	r2, #2
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d02e      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xec>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d029      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10b      	bne.n	8001ca2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 020a 	bic.w	r2, r2, #10
 8001c98:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f003 021c 	and.w	r2, r3, #28
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	2102      	movs	r1, #2
 8001cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d038      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cce:	e033      	b.n	8001d38 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	f003 031c 	and.w	r3, r3, #28
 8001cd8:	2208      	movs	r2, #8
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d02a      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x156>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d025      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 020e 	bic.w	r2, r2, #14
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f003 021c 	and.w	r2, r3, #28
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d10:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
}
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d52:	e148      	b.n	8001fe6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 813a 	beq.w	8001fe0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d00b      	beq.n	8001d8c <HAL_GPIO_Init+0x48>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d007      	beq.n	8001d8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d80:	2b11      	cmp	r3, #17
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b12      	cmp	r3, #18
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0xea>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d123      	bne.n	8001e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	08da      	lsrs	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3208      	adds	r2, #8
 8001e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	6939      	ldr	r1, [r7, #16]
 8001e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0203 	and.w	r2, r3, #3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8094 	beq.w	8001fe0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb8:	4b52      	ldr	r3, [pc, #328]	; (8002004 <HAL_GPIO_Init+0x2c0>)
 8001eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebc:	4a51      	ldr	r2, [pc, #324]	; (8002004 <HAL_GPIO_Init+0x2c0>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <HAL_GPIO_Init+0x2c0>)
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ed0:	4a4d      	ldr	r2, [pc, #308]	; (8002008 <HAL_GPIO_Init+0x2c4>)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001efa:	d00d      	beq.n	8001f18 <HAL_GPIO_Init+0x1d4>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a43      	ldr	r2, [pc, #268]	; (800200c <HAL_GPIO_Init+0x2c8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d007      	beq.n	8001f14 <HAL_GPIO_Init+0x1d0>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a42      	ldr	r2, [pc, #264]	; (8002010 <HAL_GPIO_Init+0x2cc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_GPIO_Init+0x1cc>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e004      	b.n	8001f1a <HAL_GPIO_Init+0x1d6>
 8001f10:	2307      	movs	r3, #7
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x1d6>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_GPIO_Init+0x1d6>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	4093      	lsls	r3, r2
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f2a:	4937      	ldr	r1, [pc, #220]	; (8002008 <HAL_GPIO_Init+0x2c4>)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f5c:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f62:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f86:	4a23      	ldr	r2, [pc, #140]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fb0:	4a18      	ldr	r2, [pc, #96]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f47f aeaf 	bne.w	8001d54 <HAL_GPIO_Init+0x10>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	40010000 	.word	0x40010000
 800200c:	48000400 	.word	0x48000400
 8002010:	48000800 	.word	0x48000800
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002034:	e002      	b.n	800203c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <HAL_PWREx_GetVoltageRange+0x18>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40007000 	.word	0x40007000

08002064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002072:	d130      	bne.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800207c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002080:	d038      	beq.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2232      	movs	r2, #50	; 0x32
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0c9b      	lsrs	r3, r3, #18
 80020a4:	3301      	adds	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a8:	e002      	b.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020bc:	d102      	bne.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f2      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d0:	d110      	bne.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e00f      	b.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e2:	d007      	beq.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ec:	4a05      	ldr	r2, [pc, #20]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000
 8002108:	20000000 	.word	0x20000000
 800210c:	431bde83 	.word	0x431bde83

08002110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	f000 bc11 	b.w	8002946 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002124:	4ba0      	ldr	r3, [pc, #640]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800212e:	4b9e      	ldr	r3, [pc, #632]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80e4 	beq.w	800230e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_RCC_OscConfig+0x4c>
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2b0c      	cmp	r3, #12
 8002150:	f040 808b 	bne.w	800226a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b01      	cmp	r3, #1
 8002158:	f040 8087 	bne.w	800226a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800215c:	4b92      	ldr	r3, [pc, #584]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_OscConfig+0x64>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e3e8      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	4b8b      	ldr	r3, [pc, #556]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <HAL_RCC_OscConfig+0x7e>
 8002184:	4b88      	ldr	r3, [pc, #544]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218c:	e005      	b.n	800219a <HAL_RCC_OscConfig+0x8a>
 800218e:	4b86      	ldr	r3, [pc, #536]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219a:	4293      	cmp	r3, r2
 800219c:	d223      	bcs.n	80021e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fd40 	bl	8002c28 <RCC_SetFlashLatencyFromMSIRange>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e3c9      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b2:	4b7d      	ldr	r3, [pc, #500]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7c      	ldr	r2, [pc, #496]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021b8:	f043 0308 	orr.w	r3, r3, #8
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4977      	ldr	r1, [pc, #476]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d0:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	4972      	ldr	r1, [pc, #456]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
 80021e4:	e025      	b.n	8002232 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e6:	4b70      	ldr	r3, [pc, #448]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a6f      	ldr	r2, [pc, #444]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b6d      	ldr	r3, [pc, #436]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	496a      	ldr	r1, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002204:	4b68      	ldr	r3, [pc, #416]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	4965      	ldr	r1, [pc, #404]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fd00 	bl	8002c28 <RCC_SetFlashLatencyFromMSIRange>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e389      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002232:	f000 fc6f 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002236:	4601      	mov	r1, r0
 8002238:	4b5b      	ldr	r3, [pc, #364]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	4a5a      	ldr	r2, [pc, #360]	; (80023ac <HAL_RCC_OscConfig+0x29c>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	fa21 f303 	lsr.w	r3, r1, r3
 800224e:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_OscConfig+0x2a0>)
 8002250:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002252:	4b58      	ldr	r3, [pc, #352]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fada 	bl	8000810 <HAL_InitTick>
 800225c:	4603      	mov	r3, r0
 800225e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d052      	beq.n	800230c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	e36d      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d032      	beq.n	80022d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002272:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a4c      	ldr	r2, [pc, #304]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800227e:	f7fe fb17 	bl	80008b0 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002286:	f7fe fb13 	bl	80008b0 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e356      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002298:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a4:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3f      	ldr	r2, [pc, #252]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022aa:	f043 0308 	orr.w	r3, r3, #8
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	493a      	ldr	r1, [pc, #232]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	4935      	ldr	r1, [pc, #212]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
 80022d6:	e01a      	b.n	800230e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022d8:	4b33      	ldr	r3, [pc, #204]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a32      	ldr	r2, [pc, #200]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fae4 	bl	80008b0 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ec:	f7fe fae0 	bl	80008b0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e323      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x1dc>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d073      	beq.n	8002402 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d005      	beq.n	800232c <HAL_RCC_OscConfig+0x21c>
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d10e      	bne.n	8002344 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d063      	beq.n	8002400 <HAL_RCC_OscConfig+0x2f0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d15f      	bne.n	8002400 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e300      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x24c>
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0x288>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x270>
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0x288>
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fa86 	bl	80008b0 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a6:	e010      	b.n	80023ca <HAL_RCC_OscConfig+0x2ba>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	0800331c 	.word	0x0800331c
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7fe fa7a 	bl	80008b0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e2bd      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ca:	4baf      	ldr	r3, [pc, #700]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2a8>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fa6a 	bl	80008b0 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7fe fa66 	bl	80008b0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e2a9      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023f2:	4ba5      	ldr	r3, [pc, #660]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2d0>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d060      	beq.n	80024d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d005      	beq.n	8002420 <HAL_RCC_OscConfig+0x310>
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d119      	bne.n	800244e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d116      	bne.n	800244e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002420:	4b99      	ldr	r3, [pc, #612]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_OscConfig+0x328>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e286      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b93      	ldr	r3, [pc, #588]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	061b      	lsls	r3, r3, #24
 8002446:	4990      	ldr	r1, [pc, #576]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800244c:	e040      	b.n	80024d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d023      	beq.n	800249e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002456:	4b8c      	ldr	r3, [pc, #560]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a8b      	ldr	r2, [pc, #556]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800245c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fa25 	bl	80008b0 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe fa21 	bl	80008b0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e264      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800247c:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b7f      	ldr	r3, [pc, #508]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	061b      	lsls	r3, r3, #24
 8002496:	497c      	ldr	r1, [pc, #496]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
 800249c:	e018      	b.n	80024d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a79      	ldr	r2, [pc, #484]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80024a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe fa01 	bl	80008b0 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe f9fd 	bl	80008b0 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e240      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c4:	4b70      	ldr	r3, [pc, #448]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d03c      	beq.n	8002556 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01c      	beq.n	800251e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80024e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ea:	4a67      	ldr	r2, [pc, #412]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe f9dc 	bl	80008b0 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fc:	f7fe f9d8 	bl	80008b0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e21b      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800250e:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ef      	beq.n	80024fc <HAL_RCC_OscConfig+0x3ec>
 800251c:	e01b      	b.n	8002556 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251e:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002524:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252e:	f7fe f9bf 	bl	80008b0 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002536:	f7fe f9bb 	bl	80008b0 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e1fe      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002548:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ef      	bne.n	8002536 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80a6 	beq.w	80026b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002568:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10d      	bne.n	8002590 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b44      	ldr	r3, [pc, #272]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	4a43      	ldr	r2, [pc, #268]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	6593      	str	r3, [r2, #88]	; 0x58
 8002580:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258c:	2301      	movs	r3, #1
 800258e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002590:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCC_OscConfig+0x57c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d118      	bne.n	80025ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800259c:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_OscConfig+0x57c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3a      	ldr	r2, [pc, #232]	; (800268c <HAL_RCC_OscConfig+0x57c>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a8:	f7fe f982 	bl	80008b0 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b0:	f7fe f97e 	bl	80008b0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1c1      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c2:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_RCC_OscConfig+0x57c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d108      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4d8>
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	4a2a      	ldr	r2, [pc, #168]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e6:	e024      	b.n	8002632 <HAL_RCC_OscConfig+0x522>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d110      	bne.n	8002612 <HAL_RCC_OscConfig+0x502>
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	4a24      	ldr	r2, [pc, #144]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	4a20      	ldr	r2, [pc, #128]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002610:	e00f      	b.n	8002632 <HAL_RCC_OscConfig+0x522>
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002622:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002628:	4a17      	ldr	r2, [pc, #92]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800262a:	f023 0304 	bic.w	r3, r3, #4
 800262e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe f939 	bl	80008b0 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe f935 	bl	80008b0 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e176      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ed      	beq.n	8002642 <HAL_RCC_OscConfig+0x532>
 8002666:	e01a      	b.n	800269e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe f922 	bl	80008b0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800266e:	e00f      	b.n	8002690 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe f91e 	bl	80008b0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d906      	bls.n	8002690 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e15f      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002690:	4baa      	ldr	r3, [pc, #680]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e8      	bne.n	8002670 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269e:	7ffb      	ldrb	r3, [r7, #31]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a4:	4ba5      	ldr	r3, [pc, #660]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	4aa4      	ldr	r2, [pc, #656]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80026aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d03c      	beq.n	8002736 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026c4:	4b9d      	ldr	r3, [pc, #628]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80026c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ca:	4a9c      	ldr	r2, [pc, #624]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe f8ec 	bl	80008b0 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026dc:	f7fe f8e8 	bl	80008b0 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e12b      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ee:	4b93      	ldr	r3, [pc, #588]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80026f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <HAL_RCC_OscConfig+0x5cc>
 80026fc:	e01b      	b.n	8002736 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026fe:	4b8f      	ldr	r3, [pc, #572]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002704:	4a8d      	ldr	r2, [pc, #564]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe f8cf 	bl	80008b0 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002716:	f7fe f8cb 	bl	80008b0 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e10e      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002728:	4b84      	ldr	r3, [pc, #528]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 800272a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1ef      	bne.n	8002716 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8102 	beq.w	8002944 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	2b02      	cmp	r3, #2
 8002746:	f040 80c5 	bne.w	80028d4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800274a:	4b7c      	ldr	r3, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f003 0203 	and.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	429a      	cmp	r2, r3
 800275c:	d12c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	3b01      	subs	r3, #1
 800276a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d123      	bne.n	80027b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d11b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d113      	bne.n	80027b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	3b01      	subs	r3, #1
 800279e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d109      	bne.n	80027b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	3b01      	subs	r3, #1
 80027b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d067      	beq.n	8002888 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d062      	beq.n	8002884 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027be:	4b5f      	ldr	r3, [pc, #380]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0bb      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a5a      	ldr	r2, [pc, #360]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80027d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027da:	f7fe f869 	bl	80008b0 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e2:	f7fe f865 	bl	80008b0 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0a8      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f4:	4b51      	ldr	r3, [pc, #324]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002800:	4b4e      	ldr	r3, [pc, #312]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <HAL_RCC_OscConfig+0x830>)
 8002806:	4013      	ands	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002810:	3a01      	subs	r2, #1
 8002812:	0112      	lsls	r2, r2, #4
 8002814:	4311      	orrs	r1, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800281a:	0212      	lsls	r2, r2, #8
 800281c:	4311      	orrs	r1, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002822:	0852      	lsrs	r2, r2, #1
 8002824:	3a01      	subs	r2, #1
 8002826:	0552      	lsls	r2, r2, #21
 8002828:	4311      	orrs	r1, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800282e:	0852      	lsrs	r2, r2, #1
 8002830:	3a01      	subs	r2, #1
 8002832:	0652      	lsls	r2, r2, #25
 8002834:	4311      	orrs	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800283a:	06d2      	lsls	r2, r2, #27
 800283c:	430a      	orrs	r2, r1
 800283e:	493f      	ldr	r1, [pc, #252]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002840:	4313      	orrs	r3, r2
 8002842:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002844:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a3c      	ldr	r2, [pc, #240]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 800284a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002850:	4b3a      	ldr	r3, [pc, #232]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a39      	ldr	r2, [pc, #228]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800285c:	f7fe f828 	bl	80008b0 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe f824 	bl	80008b0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e067      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002882:	e05f      	b.n	8002944 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e05e      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002888:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d157      	bne.n	8002944 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a28      	ldr	r2, [pc, #160]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 800289a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028a0:	4b26      	ldr	r3, [pc, #152]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a25      	ldr	r2, [pc, #148]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028ac:	f7fe f800 	bl	80008b0 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fd fffc 	bl	80008b0 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e03f      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x7a4>
 80028d2:	e037      	b.n	8002944 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2b0c      	cmp	r3, #12
 80028d8:	d02d      	beq.n	8002936 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b18      	ldr	r3, [pc, #96]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a17      	ldr	r2, [pc, #92]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80028e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 80028f8:	f023 0303 	bic.w	r3, r3, #3
 80028fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	4a0e      	ldr	r2, [pc, #56]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 8002904:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fd ffcf 	bl	80008b0 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7fd ffcb 	bl	80008b0 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e00e      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <HAL_RCC_OscConfig+0x82c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x806>
 8002934:	e006      	b.n	8002944 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e005      	b.n	8002946 <HAL_RCC_OscConfig+0x836>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop

08002950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0c8      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b66      	ldr	r3, [pc, #408]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d910      	bls.n	8002994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b63      	ldr	r3, [pc, #396]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4961      	ldr	r1, [pc, #388]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b0      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d04c      	beq.n	8002a3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a8:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d121      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e09e      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d115      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e092      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029d8:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e086      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e8:	4b46      	ldr	r3, [pc, #280]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e07e      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029f8:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 0203 	bic.w	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	493f      	ldr	r1, [pc, #252]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0a:	f7fd ff51 	bl	80008b0 <HAL_GetTick>
 8002a0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a12:	f7fd ff4d 	bl	80008b0 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e066      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 020c 	and.w	r2, r3, #12
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d1eb      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a46:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	492c      	ldr	r1, [pc, #176]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d210      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0207 	bic.w	r2, r3, #7
 8002a6e:	4924      	ldr	r1, [pc, #144]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e036      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4918      	ldr	r1, [pc, #96]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4910      	ldr	r1, [pc, #64]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac6:	f000 f825 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002aca:	4601      	mov	r1, r0
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	5cd3      	ldrb	r3, [r2, r3]
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	fa21 f303 	lsr.w	r3, r1, r3
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fe90 	bl	8000810 <HAL_InitTick>
 8002af0:	4603      	mov	r3, r0
 8002af2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002af4:	7afb      	ldrb	r3, [r7, #11]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40022000 	.word	0x40022000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	0800331c 	.word	0x0800331c
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	20000004 	.word	0x20000004

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b22:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b2c:	4b3a      	ldr	r3, [pc, #232]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d121      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d11e      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b48:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b54:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e005      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b64:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b70:	4a2a      	ldr	r2, [pc, #168]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b8c:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	e004      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b98:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d133      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0xa4>
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0xaa>
 8002bb6:	e005      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bba:	617b      	str	r3, [r7, #20]
      break;
 8002bbc:	e005      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bc0:	617b      	str	r3, [r7, #20]
      break;
 8002bc2:	e002      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	617b      	str	r3, [r7, #20]
      break;
 8002bc8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	fb02 f203 	mul.w	r2, r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	0e5b      	lsrs	r3, r3, #25
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3724      	adds	r7, #36	; 0x24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	0800332c 	.word	0x0800332c
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	007a1200 	.word	0x007a1200

08002c28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c40:	f7ff fa02 	bl	8002048 <HAL_PWREx_GetVoltageRange>
 8002c44:	6178      	str	r0, [r7, #20]
 8002c46:	e014      	b.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c52:	6593      	str	r3, [r2, #88]	; 0x58
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c60:	f7ff f9f2 	bl	8002048 <HAL_PWREx_GetVoltageRange>
 8002c64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c78:	d10b      	bne.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d919      	bls.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2ba0      	cmp	r3, #160	; 0xa0
 8002c84:	d902      	bls.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c86:	2302      	movs	r3, #2
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	e013      	b.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e010      	b.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b80      	cmp	r3, #128	; 0x80
 8002c96:	d902      	bls.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c98:	2303      	movs	r3, #3
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e00a      	b.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b80      	cmp	r3, #128	; 0x80
 8002ca2:	d102      	bne.n	8002caa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	e004      	b.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b70      	cmp	r3, #112	; 0x70
 8002cae:	d101      	bne.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 0207 	bic.w	r2, r3, #7
 8002cbc:	4909      	ldr	r1, [pc, #36]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d001      	beq.n	8002cd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40022000 	.word	0x40022000

08002ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d02f      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002d0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d12:	d015      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002d18:	e00f      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d1a:	4bac      	ldr	r3, [pc, #688]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	4aab      	ldr	r2, [pc, #684]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d26:	e00c      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f9cc 	bl	80030cc <RCCEx_PLLSAI1_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d38:	e003      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d3e:	e000      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d48:	4ba0      	ldr	r3, [pc, #640]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	499d      	ldr	r1, [pc, #628]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d5e:	e001      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8099 	beq.w	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d76:	4b95      	ldr	r3, [pc, #596]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8c:	4b8f      	ldr	r3, [pc, #572]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	4a8e      	ldr	r2, [pc, #568]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6593      	str	r3, [r2, #88]	; 0x58
 8002d98:	4b8c      	ldr	r3, [pc, #560]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da4:	2301      	movs	r3, #1
 8002da6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da8:	4b89      	ldr	r3, [pc, #548]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a88      	ldr	r2, [pc, #544]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db4:	f7fd fd7c 	bl	80008b0 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dba:	e009      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbc:	f7fd fd78 	bl	80008b0 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d902      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	74fb      	strb	r3, [r7, #19]
        break;
 8002dce:	e005      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dd0:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ef      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d155      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002de2:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01e      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d019      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dfe:	4b73      	ldr	r3, [pc, #460]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e0a:	4b70      	ldr	r3, [pc, #448]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	4a6e      	ldr	r2, [pc, #440]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1a:	4b6c      	ldr	r3, [pc, #432]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	4a6a      	ldr	r2, [pc, #424]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e2a:	4a68      	ldr	r2, [pc, #416]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d016      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fd fd38 	bl	80008b0 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e42:	e00b      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fd fd34 	bl	80008b0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d902      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	74fb      	strb	r3, [r7, #19]
            break;
 8002e5a:	e006      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5c:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0ec      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10b      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e70:	4b56      	ldr	r3, [pc, #344]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	4953      	ldr	r1, [pc, #332]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e86:	e004      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	74bb      	strb	r3, [r7, #18]
 8002e8c:	e001      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e92:	7c7b      	ldrb	r3, [r7, #17]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e98:	4b4c      	ldr	r3, [pc, #304]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	4a4b      	ldr	r2, [pc, #300]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb0:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4943      	ldr	r1, [pc, #268]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f023 020c 	bic.w	r2, r3, #12
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	493a      	ldr	r1, [pc, #232]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ef4:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	4932      	ldr	r1, [pc, #200]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f16:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	4929      	ldr	r1, [pc, #164]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	4921      	ldr	r1, [pc, #132]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	4918      	ldr	r1, [pc, #96]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4910      	ldr	r1, [pc, #64]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d02c      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	4907      	ldr	r1, [pc, #28]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fbe:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4a02      	ldr	r2, [pc, #8]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc8:	60d3      	str	r3, [r2, #12]
 8002fca:	e015      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f871 	bl	80030cc <RCCEx_PLLSAI1_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fee:	7cfb      	ldrb	r3, [r7, #19]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d028      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003004:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	492d      	ldr	r1, [pc, #180]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003022:	d106      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003024:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a27      	ldr	r2, [pc, #156]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800302e:	60d3      	str	r3, [r2, #12]
 8003030:	e011      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800303a:	d10c      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f842 	bl	80030cc <RCCEx_PLLSAI1_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01c      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003062:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003070:	4915      	ldr	r1, [pc, #84]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003080:	d10c      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	2102      	movs	r1, #2
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f81f 	bl	80030cc <RCCEx_PLLSAI1_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	4904      	ldr	r1, [pc, #16]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030be:	7cbb      	ldrb	r3, [r7, #18]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000

080030cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030da:	4b73      	ldr	r3, [pc, #460]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d018      	beq.n	8003118 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030e6:	4b70      	ldr	r3, [pc, #448]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0203 	and.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d10d      	bne.n	8003112 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
       ||
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030fe:	4b6a      	ldr	r3, [pc, #424]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
       ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d044      	beq.n	800319c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	e041      	b.n	800319c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d00c      	beq.n	800313a <RCCEx_PLLSAI1_Config+0x6e>
 8003120:	2b03      	cmp	r3, #3
 8003122:	d013      	beq.n	800314c <RCCEx_PLLSAI1_Config+0x80>
 8003124:	2b01      	cmp	r3, #1
 8003126:	d120      	bne.n	800316a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003128:	4b5f      	ldr	r3, [pc, #380]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11d      	bne.n	8003170 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003138:	e01a      	b.n	8003170 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800313a:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314a:	e013      	b.n	8003174 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800314c:	4b56      	ldr	r3, [pc, #344]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10f      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003168:	e006      	b.n	8003178 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
      break;
 800316e:	e004      	b.n	800317a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003170:	bf00      	nop
 8003172:	e002      	b.n	800317a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003174:	bf00      	nop
 8003176:	e000      	b.n	800317a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003178:	bf00      	nop
    }

    if(status == HAL_OK)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10d      	bne.n	800319c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003180:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	3b01      	subs	r3, #1
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	430b      	orrs	r3, r1
 8003196:	4944      	ldr	r1, [pc, #272]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d17c      	bne.n	800329c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ae:	f7fd fb7f 	bl	80008b0 <HAL_GetTick>
 80031b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031b4:	e009      	b.n	80031ca <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031b6:	f7fd fb7b 	bl	80008b0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d902      	bls.n	80031ca <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	73fb      	strb	r3, [r7, #15]
        break;
 80031c8:	e005      	b.n	80031d6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031ca:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ef      	bne.n	80031b6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d15f      	bne.n	800329c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d110      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6892      	ldr	r2, [r2, #8]
 80031f2:	0211      	lsls	r1, r2, #8
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68d2      	ldr	r2, [r2, #12]
 80031f8:	06d2      	lsls	r2, r2, #27
 80031fa:	430a      	orrs	r2, r1
 80031fc:	492a      	ldr	r1, [pc, #168]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	610b      	str	r3, [r1, #16]
 8003202:	e027      	b.n	8003254 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d112      	bne.n	8003230 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003212:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6892      	ldr	r2, [r2, #8]
 800321a:	0211      	lsls	r1, r2, #8
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6912      	ldr	r2, [r2, #16]
 8003220:	0852      	lsrs	r2, r2, #1
 8003222:	3a01      	subs	r2, #1
 8003224:	0552      	lsls	r2, r2, #21
 8003226:	430a      	orrs	r2, r1
 8003228:	491f      	ldr	r1, [pc, #124]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	610b      	str	r3, [r1, #16]
 800322e:	e011      	b.n	8003254 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003238:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6892      	ldr	r2, [r2, #8]
 8003240:	0211      	lsls	r1, r2, #8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6952      	ldr	r2, [r2, #20]
 8003246:	0852      	lsrs	r2, r2, #1
 8003248:	3a01      	subs	r2, #1
 800324a:	0652      	lsls	r2, r2, #25
 800324c:	430a      	orrs	r2, r1
 800324e:	4916      	ldr	r1, [pc, #88]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800325a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800325e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fd fb26 	bl	80008b0 <HAL_GetTick>
 8003264:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003266:	e009      	b.n	800327c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003268:	f7fd fb22 	bl	80008b0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d902      	bls.n	800327c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	73fb      	strb	r3, [r7, #15]
          break;
 800327a:	e005      	b.n	8003288 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ef      	beq.n	8003268 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	4904      	ldr	r1, [pc, #16]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000

080032ac <__libc_init_array>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	4e0d      	ldr	r6, [pc, #52]	; (80032e4 <__libc_init_array+0x38>)
 80032b0:	4c0d      	ldr	r4, [pc, #52]	; (80032e8 <__libc_init_array+0x3c>)
 80032b2:	1ba4      	subs	r4, r4, r6
 80032b4:	10a4      	asrs	r4, r4, #2
 80032b6:	2500      	movs	r5, #0
 80032b8:	42a5      	cmp	r5, r4
 80032ba:	d109      	bne.n	80032d0 <__libc_init_array+0x24>
 80032bc:	4e0b      	ldr	r6, [pc, #44]	; (80032ec <__libc_init_array+0x40>)
 80032be:	4c0c      	ldr	r4, [pc, #48]	; (80032f0 <__libc_init_array+0x44>)
 80032c0:	f000 f820 	bl	8003304 <_init>
 80032c4:	1ba4      	subs	r4, r4, r6
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	2500      	movs	r5, #0
 80032ca:	42a5      	cmp	r5, r4
 80032cc:	d105      	bne.n	80032da <__libc_init_array+0x2e>
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032d4:	4798      	blx	r3
 80032d6:	3501      	adds	r5, #1
 80032d8:	e7ee      	b.n	80032b8 <__libc_init_array+0xc>
 80032da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032de:	4798      	blx	r3
 80032e0:	3501      	adds	r5, #1
 80032e2:	e7f2      	b.n	80032ca <__libc_init_array+0x1e>
 80032e4:	0800335c 	.word	0x0800335c
 80032e8:	0800335c 	.word	0x0800335c
 80032ec:	0800335c 	.word	0x0800335c
 80032f0:	08003360 	.word	0x08003360

080032f4 <memset>:
 80032f4:	4402      	add	r2, r0
 80032f6:	4603      	mov	r3, r0
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d100      	bne.n	80032fe <memset+0xa>
 80032fc:	4770      	bx	lr
 80032fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003302:	e7f9      	b.n	80032f8 <memset+0x4>

08003304 <_init>:
 8003304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003306:	bf00      	nop
 8003308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330a:	bc08      	pop	{r3}
 800330c:	469e      	mov	lr, r3
 800330e:	4770      	bx	lr

08003310 <_fini>:
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	bf00      	nop
 8003314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003316:	bc08      	pop	{r3}
 8003318:	469e      	mov	lr, r3
 800331a:	4770      	bx	lr
