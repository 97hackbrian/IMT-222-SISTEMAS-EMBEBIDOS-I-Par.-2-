
EXAMEN1V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080070d0  080070d0  000170d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c0  080074c0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080074c0  080074c0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074c0  080074c0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074c0  080074c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080074c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000080  08007548  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08007548  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7a9  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002307  00000000  00000000  0002f859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00031b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00032bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218a3  00000000  00000000  00033b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e16  00000000  00000000  0005540b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9414  00000000  00000000  00067221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130635  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000552c  00000000  00000000  00130688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070b8 	.word	0x080070b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080070b8 	.word	0x080070b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000b76:	4a38      	ldr	r2, [pc, #224]	; (8000c58 <HD44780_Init+0xec>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000b7c:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <HD44780_Init+0xf0>)
 8000b7e:	2208      	movs	r2, #8
 8000b80:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000b82:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <HD44780_Init+0xf4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000b88:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <HD44780_Init+0xec>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d907      	bls.n	8000ba0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000b90:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <HD44780_Init+0xf4>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b31      	ldr	r3, [pc, #196]	; (8000c60 <HD44780_Init+0xf4>)
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e006      	b.n	8000bae <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <HD44780_Init+0xf4>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <HD44780_Init+0xf4>)
 8000bac:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000bae:	f000 f985 	bl	8000ebc <DelayInit>
  HAL_Delay(50);
 8000bb2:	2032      	movs	r0, #50	; 0x32
 8000bb4:	f001 f87a 	bl	8001cac <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <HD44780_Init+0xf0>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 f943 	bl	8000e48 <ExpanderWrite>
  HAL_Delay(1000);
 8000bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc6:	f001 f871 	bl	8001cac <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000bca:	2030      	movs	r0, #48	; 0x30
 8000bcc:	f000 f92b 	bl	8000e26 <Write4Bits>
  DelayUS(4500);
 8000bd0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000bd4:	f000 f99c 	bl	8000f10 <DelayUS>

  Write4Bits(0x03 << 4);
 8000bd8:	2030      	movs	r0, #48	; 0x30
 8000bda:	f000 f924 	bl	8000e26 <Write4Bits>
  DelayUS(4500);
 8000bde:	f241 1094 	movw	r0, #4500	; 0x1194
 8000be2:	f000 f995 	bl	8000f10 <DelayUS>

  Write4Bits(0x03 << 4);
 8000be6:	2030      	movs	r0, #48	; 0x30
 8000be8:	f000 f91d 	bl	8000e26 <Write4Bits>
  DelayUS(4500);
 8000bec:	f241 1094 	movw	r0, #4500	; 0x1194
 8000bf0:	f000 f98e 	bl	8000f10 <DelayUS>

  Write4Bits(0x02 << 4);
 8000bf4:	2020      	movs	r0, #32
 8000bf6:	f000 f916 	bl	8000e26 <Write4Bits>
  DelayUS(100);
 8000bfa:	2064      	movs	r0, #100	; 0x64
 8000bfc:	f000 f988 	bl	8000f10 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HD44780_Init+0xf4>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f8ce 	bl	8000dac <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HD44780_Init+0xf8>)
 8000c12:	2204      	movs	r2, #4
 8000c14:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000c16:	f000 f875 	bl	8000d04 <HD44780_Display>
  HD44780_Clear();
 8000c1a:	f000 f82b 	bl	8000c74 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HD44780_Init+0xfc>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HD44780_Init+0xfc>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f8bc 	bl	8000dac <SendCommand>
  DelayUS(4500);
 8000c34:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c38:	f000 f96a 	bl	8000f10 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000c3c:	490b      	ldr	r1, [pc, #44]	; (8000c6c <HD44780_Init+0x100>)
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f876 	bl	8000d30 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000c44:	490a      	ldr	r1, [pc, #40]	; (8000c70 <HD44780_Init+0x104>)
 8000c46:	2001      	movs	r0, #1
 8000c48:	f000 f872 	bl	8000d30 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000c4c:	f000 f81d 	bl	8000c8a <HD44780_Home>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000009f 	.word	0x2000009f
 8000c5c:	200000a0 	.word	0x200000a0
 8000c60:	2000009c 	.word	0x2000009c
 8000c64:	2000009d 	.word	0x2000009d
 8000c68:	2000009e 	.word	0x2000009e
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008

08000c74 <HD44780_Clear>:

void HD44780_Clear()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 f897 	bl	8000dac <SendCommand>
  DelayUS(2000);
 8000c7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c82:	f000 f945 	bl	8000f10 <DelayUS>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HD44780_Home>:

void HD44780_Home()
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f000 f88c 	bl	8000dac <SendCommand>
  DelayUS(2000);
 8000c94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c98:	f000 f93a 	bl	8000f10 <DelayUS>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460a      	mov	r2, r1
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	4613      	mov	r3, r2
 8000cae:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HD44780_SetCursor+0x5c>)
 8000cb2:	f107 0408 	add.w	r4, r7, #8
 8000cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HD44780_SetCursor+0x60>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	79ba      	ldrb	r2, [r7, #6]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d303      	bcc.n	8000cce <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HD44780_SetCursor+0x60>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	3318      	adds	r3, #24
 8000cd4:	443b      	add	r3, r7
 8000cd6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4413      	add	r3, r2
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f85d 	bl	8000dac <SendCommand>
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	080070d0 	.word	0x080070d0
 8000d00:	2000009f 	.word	0x2000009f

08000d04 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HD44780_Display+0x28>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HD44780_Display+0x28>)
 8000d14:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HD44780_Display+0x28>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f843 	bl	8000dac <SendCommand>
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000009d 	.word	0x2000009d

08000d30 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f82a 	bl	8000dac <SendCommand>
  for (int i=0; i<8; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e009      	b.n	8000d72 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f82e 	bl	8000dc8 <SendChar>
  for (int i=0; i<8; i++)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b07      	cmp	r3, #7
 8000d76:	ddf2      	ble.n	8000d5e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000d8a:	e006      	b.n	8000d9a <HD44780_PrintStr+0x18>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f817 	bl	8000dc8 <SendChar>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f4      	bne.n	8000d8c <HD44780_PrintStr+0xa>
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f812 	bl	8000de4 <Send>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f804 	bl	8000de4 <Send>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f023 030f 	bic.w	r3, r3, #15
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f80b 	bl	8000e26 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000e10:	7bba      	ldrb	r2, [r7, #14]
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f804 	bl	8000e26 <Write4Bits>
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f808 	bl	8000e48 <ExpanderWrite>
  PulseEnable(value);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f820 	bl	8000e80 <PulseEnable>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <ExpanderWrite+0x30>)
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e5e:	f107 020f 	add.w	r2, r7, #15
 8000e62:	230a      	movs	r3, #10
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2301      	movs	r3, #1
 8000e68:	214e      	movs	r1, #78	; 0x4e
 8000e6a:	4804      	ldr	r0, [pc, #16]	; (8000e7c <ExpanderWrite+0x34>)
 8000e6c:	f001 fa52 	bl	8002314 <HAL_I2C_Master_Transmit>
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000a0 	.word	0x200000a0
 8000e7c:	200000a4 	.word	0x200000a4

08000e80 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffd8 	bl	8000e48 <ExpanderWrite>
  DelayUS(20);
 8000e98:	2014      	movs	r0, #20
 8000e9a:	f000 f839 	bl	8000f10 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f023 0304 	bic.w	r3, r3, #4
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ffce 	bl	8000e48 <ExpanderWrite>
  DelayUS(20);
 8000eac:	2014      	movs	r0, #20
 8000eae:	f000 f82f 	bl	8000f10 <DelayUS>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <DelayInit>:

static void DelayInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <DelayInit+0x4c>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <DelayInit+0x4c>)
 8000ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000eca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <DelayInit+0x4c>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <DelayInit+0x4c>)
 8000ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <DelayInit+0x50>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <DelayInit+0x50>)
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <DelayInit+0x50>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <DelayInit+0x50>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <DelayInit+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000ef6:	bf00      	nop
  __ASM volatile ("NOP");
 8000ef8:	bf00      	nop
  __ASM volatile ("NOP");
 8000efa:	bf00      	nop
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000edf0 	.word	0xe000edf0
 8000f0c:	e0001000 	.word	0xe0001000

08000f10 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <DelayUS+0x44>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <DelayUS+0x48>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9a      	lsrs	r2, r3, #18
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <DelayUS+0x4c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <DelayUS+0x4c>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f6      	bhi.n	8000f32 <DelayUS+0x22>
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	371c      	adds	r7, #28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000010 	.word	0x20000010
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	e0001000 	.word	0xe0001000

08000f60 <read_keypad>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
char read_keypad (void)
	{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3,0);  //Pull the R1 low
 8000f64:	2200      	movs	r2, #0
 8000f66:	2108      	movs	r1, #8
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6c:	f001 f92a 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1, 1);  // Pull the R2 High
 8000f70:	2201      	movs	r2, #1
 8000f72:	2102      	movs	r1, #2
 8000f74:	487e      	ldr	r0, [pc, #504]	; (8001170 <read_keypad+0x210>)
 8000f76:	f001 f925 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_11, 1);  // Pull the R3 High
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f84:	f001 f91e 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, 1);  // Pull the R4 High
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f001 f917 	bl	80021c4 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)))   // if the Col 1 is low
 8000f96:	2110      	movs	r1, #16
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f001 f8fa 	bl	8002194 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <read_keypad+0x4a>
		{
	return '1';
 8000fa6:	2331      	movs	r3, #49	; 0x31
 8000fa8:	e0e0      	b.n	800116c <read_keypad+0x20c>
		}
	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_5)))   // if the Col 1 is low
 8000faa:	2120      	movs	r1, #32
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb0:	f001 f8f0 	bl	8002194 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <read_keypad+0x5e>
		{
	return '2';
 8000fba:	2332      	movs	r3, #50	; 0x32
 8000fbc:	e0d6      	b.n	800116c <read_keypad+0x20c>
		}

	if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_0)))   // if the Col 1 is low
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	486b      	ldr	r0, [pc, #428]	; (8001170 <read_keypad+0x210>)
 8000fc2:	f001 f8e7 	bl	8002194 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <read_keypad+0x70>
		{
	return '3';
 8000fcc:	2333      	movs	r3, #51	; 0x33
 8000fce:	e0cd      	b.n	800116c <read_keypad+0x20c>
		}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_12)))   // if the Col 1 is low
 8000fd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f001 f8dc 	bl	8002194 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <read_keypad+0x86>
		{
	return 'A';
 8000fe2:	2341      	movs	r3, #65	; 0x41
 8000fe4:	e0c2      	b.n	800116c <read_keypad+0x20c>
		}


		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3,1);  //Pull the R1 high
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2108      	movs	r1, #8
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f001 f8e9 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1, 0);  // Pull the R2 LOW
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	485e      	ldr	r0, [pc, #376]	; (8001170 <read_keypad+0x210>)
 8000ff8:	f001 f8e4 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_11, 1);  // Pull the R3 High
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f001 f8dd 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, 1);  // Pull the R4 High
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001014:	f001 f8d6 	bl	80021c4 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)))   // if the Col 1 is low
 8001018:	2110      	movs	r1, #16
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f001 f8b9 	bl	8002194 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <read_keypad+0xcc>
		{
	return '4';
 8001028:	2334      	movs	r3, #52	; 0x34
 800102a:	e09f      	b.n	800116c <read_keypad+0x20c>
		}
	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_5)))   // if the Col 1 is low
 800102c:	2120      	movs	r1, #32
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f001 f8af 	bl	8002194 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <read_keypad+0xe0>
		{
	return '5';
 800103c:	2335      	movs	r3, #53	; 0x35
 800103e:	e095      	b.n	800116c <read_keypad+0x20c>
		}

	if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_0)))   // if the Col 1 is low
 8001040:	2101      	movs	r1, #1
 8001042:	484b      	ldr	r0, [pc, #300]	; (8001170 <read_keypad+0x210>)
 8001044:	f001 f8a6 	bl	8002194 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <read_keypad+0xf2>
		{
	return '6';
 800104e:	2336      	movs	r3, #54	; 0x36
 8001050:	e08c      	b.n	800116c <read_keypad+0x20c>
		}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_12)))   // if the Col 1 is low
 8001052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f001 f89b 	bl	8002194 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <read_keypad+0x108>
		{
	return 'B';
 8001064:	2342      	movs	r3, #66	; 0x42
 8001066:	e081      	b.n	800116c <read_keypad+0x20c>
		}


		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3,1);  //Pull the R1 HIGH
 8001068:	2201      	movs	r2, #1
 800106a:	2108      	movs	r1, #8
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f001 f8a8 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1, 1);  // Pull the R2 High
 8001074:	2201      	movs	r2, #1
 8001076:	2102      	movs	r1, #2
 8001078:	483d      	ldr	r0, [pc, #244]	; (8001170 <read_keypad+0x210>)
 800107a:	f001 f8a3 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_11, 0);  // Pull the R3 LOW
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f001 f89c 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, 1);  // Pull the R4 High
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f001 f895 	bl	80021c4 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)))   // if the Col 1 is low
 800109a:	2110      	movs	r1, #16
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f001 f878 	bl	8002194 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <read_keypad+0x14e>
		{
	return '7';
 80010aa:	2337      	movs	r3, #55	; 0x37
 80010ac:	e05e      	b.n	800116c <read_keypad+0x20c>
		}
	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_5)))   // if the Col 1 is low
 80010ae:	2120      	movs	r1, #32
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f001 f86e 	bl	8002194 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <read_keypad+0x162>
		{
	return '8';
 80010be:	2338      	movs	r3, #56	; 0x38
 80010c0:	e054      	b.n	800116c <read_keypad+0x20c>
		}

	if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_0)))   // if the Col 1 is low
 80010c2:	2101      	movs	r1, #1
 80010c4:	482a      	ldr	r0, [pc, #168]	; (8001170 <read_keypad+0x210>)
 80010c6:	f001 f865 	bl	8002194 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <read_keypad+0x174>
		{
	return '9';
 80010d0:	2339      	movs	r3, #57	; 0x39
 80010d2:	e04b      	b.n	800116c <read_keypad+0x20c>
		}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_12)))   // if the Col 1 is low
 80010d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f001 f85a 	bl	8002194 <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <read_keypad+0x18a>
		{
	return 'C';
 80010e6:	2343      	movs	r3, #67	; 0x43
 80010e8:	e040      	b.n	800116c <read_keypad+0x20c>
		}


		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3,1);  //Pull the R1 HIGH
 80010ea:	2201      	movs	r2, #1
 80010ec:	2108      	movs	r1, #8
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f2:	f001 f867 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1, 1);  // Pull the R2 High
 80010f6:	2201      	movs	r2, #1
 80010f8:	2102      	movs	r1, #2
 80010fa:	481d      	ldr	r0, [pc, #116]	; (8001170 <read_keypad+0x210>)
 80010fc:	f001 f862 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_11, 1);  // Pull the R3 High
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f001 f85b 	bl	80021c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, 0);  // Pull the R4 LOW
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001118:	f001 f854 	bl	80021c4 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)))   // if the Col 1 is low
 800111c:	2110      	movs	r1, #16
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f001 f837 	bl	8002194 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <read_keypad+0x1d0>
		{
	return '*';
 800112c:	232a      	movs	r3, #42	; 0x2a
 800112e:	e01d      	b.n	800116c <read_keypad+0x20c>
		}
	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_5)))   // if the Col 1 is low
 8001130:	2120      	movs	r1, #32
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f001 f82d 	bl	8002194 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <read_keypad+0x1e4>
		{
	return '0';
 8001140:	2330      	movs	r3, #48	; 0x30
 8001142:	e013      	b.n	800116c <read_keypad+0x20c>
		}

	if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_0)))   // if the Col 1 is low
 8001144:	2101      	movs	r1, #1
 8001146:	480a      	ldr	r0, [pc, #40]	; (8001170 <read_keypad+0x210>)
 8001148:	f001 f824 	bl	8002194 <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <read_keypad+0x1f6>
		{
	return '#';
 8001152:	2323      	movs	r3, #35	; 0x23
 8001154:	e00a      	b.n	800116c <read_keypad+0x20c>
		}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_12)))   // if the Col 1 is low
 8001156:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f001 f819 	bl	8002194 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <read_keypad+0x20c>
		{
	return 'D';
 8001168:	2344      	movs	r3, #68	; 0x44
 800116a:	e7ff      	b.n	800116c <read_keypad+0x20c>
		}
	}
 800116c:	4618      	mov	r0, r3
 800116e:	bd80      	pop	{r7, pc}
 8001170:	48000400 	.word	0x48000400

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b5b0      	push	{r4, r5, r7, lr}
 8001176:	b09e      	sub	sp, #120	; 0x78
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117a:	f000 fd22 	bl	8001bc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117e:	f000 f9b1 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f000 faab 	bl	80016dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001186:	f000 f9f3 	bl	8001570 <MX_I2C1_Init>
  MX_TIM16_Init();
 800118a:	f000 fa2f 	bl	80015ec <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800118e:	2002      	movs	r0, #2
 8001190:	f7ff fcec 	bl	8000b6c <HD44780_Init>
  HD44780_Clear();
 8001194:	f7ff fd6e 	bl	8000c74 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8001198:	2100      	movs	r1, #0
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fd80 	bl	8000ca0 <HD44780_SetCursor>
  HD44780_PrintStr("INICIANDO...");
 80011a0:	48bf      	ldr	r0, [pc, #764]	; (80014a0 <main+0x32c>)
 80011a2:	f7ff fdee 	bl	8000d82 <HD44780_PrintStr>
  HAL_Delay(5000);
 80011a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80011aa:	f000 fd7f 	bl	8001cac <HAL_Delay>
  HD44780_SetCursor(10,1);
 80011ae:	2101      	movs	r1, #1
 80011b0:	200a      	movs	r0, #10
 80011b2:	f7ff fd75 	bl	8000ca0 <HD44780_SetCursor>
  HD44780_PrintStr("MAQUINA DISPENSADORA");
 80011b6:	48bb      	ldr	r0, [pc, #748]	; (80014a4 <main+0x330>)
 80011b8:	f7ff fde3 	bl	8000d82 <HD44780_PrintStr>
  HAL_Delay(2000);
 80011bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011c0:	f000 fd74 	bl	8001cac <HAL_Delay>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80011c4:	2100      	movs	r1, #0
 80011c6:	48b8      	ldr	r0, [pc, #736]	; (80014a8 <main+0x334>)
 80011c8:	f002 fe32 	bl	8003e30 <HAL_TIM_PWM_Start>

  HD44780_Clear();
 80011cc:	f7ff fd52 	bl	8000c74 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 80011d0:	2100      	movs	r1, #0
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff fd64 	bl	8000ca0 <HD44780_SetCursor>
  HD44780_PrintStr("Ingrese las monedas");
 80011d8:	48b4      	ldr	r0, [pc, #720]	; (80014ac <main+0x338>)
 80011da:	f7ff fdd2 	bl	8000d82 <HD44780_PrintStr>
  HAL_Delay(1000);
 80011de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e2:	f000 fd63 	bl	8001cac <HAL_Delay>
  int aux=0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	677b      	str	r3, [r7, #116]	; 0x74
  float monedasT=0;
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	673b      	str	r3, [r7, #112]	; 0x70
  while(aux==0){
 80011f0:	e08d      	b.n	800130e <main+0x19a>
	  if(read_keypad()=='A'){
 80011f2:	f7ff feb5 	bl	8000f60 <read_keypad>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b41      	cmp	r3, #65	; 0x41
 80011fa:	d112      	bne.n	8001222 <main+0xae>
		  HD44780_SetCursor(10,1);
 80011fc:	2101      	movs	r1, #1
 80011fe:	200a      	movs	r0, #10
 8001200:	f7ff fd4e 	bl	8000ca0 <HD44780_SetCursor>
		  HD44780_PrintStr("0.5Bs");
 8001204:	48aa      	ldr	r0, [pc, #680]	; (80014b0 <main+0x33c>)
 8001206:	f7ff fdbc 	bl	8000d82 <HD44780_PrintStr>
		  monedasT=monedasT+0.5;
 800120a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800120e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001216:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		  HAL_Delay(500);
 800121a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121e:	f000 fd45 	bl	8001cac <HAL_Delay>
	  }
	  if(read_keypad ()=='B'){
 8001222:	f7ff fe9d 	bl	8000f60 <read_keypad>
 8001226:	4603      	mov	r3, r0
 8001228:	2b42      	cmp	r3, #66	; 0x42
 800122a:	d112      	bne.n	8001252 <main+0xde>
		  HD44780_SetCursor(10,1);
 800122c:	2101      	movs	r1, #1
 800122e:	200a      	movs	r0, #10
 8001230:	f7ff fd36 	bl	8000ca0 <HD44780_SetCursor>
		  HD44780_PrintStr("1Bs");
 8001234:	489f      	ldr	r0, [pc, #636]	; (80014b4 <main+0x340>)
 8001236:	f7ff fda4 	bl	8000d82 <HD44780_PrintStr>
		  monedasT=monedasT+1;
 800123a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800123e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001242:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001246:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		  HAL_Delay(500);
 800124a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800124e:	f000 fd2d 	bl	8001cac <HAL_Delay>
	  }
	  if(read_keypad ()=='C'){
 8001252:	f7ff fe85 	bl	8000f60 <read_keypad>
 8001256:	4603      	mov	r3, r0
 8001258:	2b43      	cmp	r3, #67	; 0x43
 800125a:	d112      	bne.n	8001282 <main+0x10e>
		  HD44780_SetCursor(10,1);
 800125c:	2101      	movs	r1, #1
 800125e:	200a      	movs	r0, #10
 8001260:	f7ff fd1e 	bl	8000ca0 <HD44780_SetCursor>
		  HD44780_PrintStr("2Bs");
 8001264:	4894      	ldr	r0, [pc, #592]	; (80014b8 <main+0x344>)
 8001266:	f7ff fd8c 	bl	8000d82 <HD44780_PrintStr>
		  monedasT=monedasT+2;
 800126a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800126e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001276:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		  HAL_Delay(500);
 800127a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800127e:	f000 fd15 	bl	8001cac <HAL_Delay>
	  }
	  if(read_keypad ()=='D'){
 8001282:	f7ff fe6d 	bl	8000f60 <read_keypad>
 8001286:	4603      	mov	r3, r0
 8001288:	2b44      	cmp	r3, #68	; 0x44
 800128a:	d112      	bne.n	80012b2 <main+0x13e>
		  HD44780_SetCursor(10,1);
 800128c:	2101      	movs	r1, #1
 800128e:	200a      	movs	r0, #10
 8001290:	f7ff fd06 	bl	8000ca0 <HD44780_SetCursor>
		  HD44780_PrintStr("5Bs");
 8001294:	4889      	ldr	r0, [pc, #548]	; (80014bc <main+0x348>)
 8001296:	f7ff fd74 	bl	8000d82 <HD44780_PrintStr>
		  monedasT=monedasT+5;
 800129a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800129e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80012a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012a6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		  HAL_Delay(500);
 80012aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ae:	f000 fcfd 	bl	8001cac <HAL_Delay>
	  }
	  if(read_keypad ()=='*'){
 80012b2:	f7ff fe55 	bl	8000f60 <read_keypad>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b2a      	cmp	r3, #42	; 0x2a
 80012ba:	d128      	bne.n	800130e <main+0x19a>
		  HD44780_Clear();
 80012bc:	f7ff fcda 	bl	8000c74 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 80012c0:	2100      	movs	r1, #0
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fcec 	bl	8000ca0 <HD44780_SetCursor>
		  char buf[100];
		  gcvt(monedasT, 6, buf);
 80012c8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80012ca:	f7ff f935 	bl	8000538 <__aeabi_f2d>
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	463b      	mov	r3, r7
 80012d4:	4619      	mov	r1, r3
 80012d6:	2006      	movs	r0, #6
 80012d8:	ec45 4b10 	vmov	d0, r4, r5
 80012dc:	f003 fb1a 	bl	8004914 <gcvt>
		  HD44780_PrintStr(buf);
 80012e0:	463b      	mov	r3, r7
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd4d 	bl	8000d82 <HD44780_PrintStr>
		  HAL_Delay(6000);
 80012e8:	f241 7070 	movw	r0, #6000	; 0x1770
 80012ec:	f000 fcde 	bl	8001cac <HAL_Delay>

		  HD44780_Clear();
 80012f0:	f7ff fcc0 	bl	8000c74 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 80012f4:	2100      	movs	r1, #0
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fcd2 	bl	8000ca0 <HD44780_SetCursor>
		  HD44780_PrintStr("seleccione el producto");
 80012fc:	4870      	ldr	r0, [pc, #448]	; (80014c0 <main+0x34c>)
 80012fe:	f7ff fd40 	bl	8000d82 <HD44780_PrintStr>
		  HAL_Delay(500);
 8001302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001306:	f000 fcd1 	bl	8001cac <HAL_Delay>
		  aux=1;
 800130a:	2301      	movs	r3, #1
 800130c:	677b      	str	r3, [r7, #116]	; 0x74
  while(aux==0){
 800130e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001310:	2b00      	cmp	r3, #0
 8001312:	f43f af6e 	beq.w	80011f2 <main+0x7e>
	  }
  }
  int aux2=0;
 8001316:	2300      	movs	r3, #0
 8001318:	66fb      	str	r3, [r7, #108]	; 0x6c
  while(aux2==0){
 800131a:	e073      	b.n	8001404 <main+0x290>
	  if(read_keypad ()=='1'){
 800131c:	f7ff fe20 	bl	8000f60 <read_keypad>
 8001320:	4603      	mov	r3, r0
 8001322:	2b31      	cmp	r3, #49	; 0x31
 8001324:	d10a      	bne.n	800133c <main+0x1c8>
	  		  HD44780_SetCursor(10,1);
 8001326:	2101      	movs	r1, #1
 8001328:	200a      	movs	r0, #10
 800132a:	f7ff fcb9 	bl	8000ca0 <HD44780_SetCursor>
	  		  HD44780_PrintStr("Producto 1");
 800132e:	4865      	ldr	r0, [pc, #404]	; (80014c4 <main+0x350>)
 8001330:	f7ff fd27 	bl	8000d82 <HD44780_PrintStr>
	  		  HAL_Delay(500);
 8001334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001338:	f000 fcb8 	bl	8001cac <HAL_Delay>
	  }
	  if(read_keypad ()=='2'){
 800133c:	f7ff fe10 	bl	8000f60 <read_keypad>
 8001340:	4603      	mov	r3, r0
 8001342:	2b32      	cmp	r3, #50	; 0x32
 8001344:	d10a      	bne.n	800135c <main+0x1e8>
	  		  HD44780_SetCursor(10,1);
 8001346:	2101      	movs	r1, #1
 8001348:	200a      	movs	r0, #10
 800134a:	f7ff fca9 	bl	8000ca0 <HD44780_SetCursor>
	  		  HD44780_PrintStr("Producto 2");
 800134e:	485e      	ldr	r0, [pc, #376]	; (80014c8 <main+0x354>)
 8001350:	f7ff fd17 	bl	8000d82 <HD44780_PrintStr>
	  		  HAL_Delay(500);
 8001354:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001358:	f000 fca8 	bl	8001cac <HAL_Delay>
	  }
	  if(read_keypad ()=='3'){
 800135c:	f7ff fe00 	bl	8000f60 <read_keypad>
 8001360:	4603      	mov	r3, r0
 8001362:	2b33      	cmp	r3, #51	; 0x33
 8001364:	d10a      	bne.n	800137c <main+0x208>
		  	  HD44780_SetCursor(10,1);
 8001366:	2101      	movs	r1, #1
 8001368:	200a      	movs	r0, #10
 800136a:	f7ff fc99 	bl	8000ca0 <HD44780_SetCursor>
		  	  HD44780_PrintStr("Producto 3");
 800136e:	4857      	ldr	r0, [pc, #348]	; (80014cc <main+0x358>)
 8001370:	f7ff fd07 	bl	8000d82 <HD44780_PrintStr>
		  	  HAL_Delay(500);
 8001374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001378:	f000 fc98 	bl	8001cac <HAL_Delay>
	  }
	  if(read_keypad ()=='4'){
 800137c:	f7ff fdf0 	bl	8000f60 <read_keypad>
 8001380:	4603      	mov	r3, r0
 8001382:	2b34      	cmp	r3, #52	; 0x34
 8001384:	d10a      	bne.n	800139c <main+0x228>
	  	  	  HD44780_SetCursor(10,1);
 8001386:	2101      	movs	r1, #1
 8001388:	200a      	movs	r0, #10
 800138a:	f7ff fc89 	bl	8000ca0 <HD44780_SetCursor>
	  	  	  HD44780_PrintStr("Producto 4");
 800138e:	4850      	ldr	r0, [pc, #320]	; (80014d0 <main+0x35c>)
 8001390:	f7ff fcf7 	bl	8000d82 <HD44780_PrintStr>
	  	  	  HAL_Delay(500);
 8001394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001398:	f000 fc88 	bl	8001cac <HAL_Delay>
	  }
	  if(read_keypad ()=='5'){
 800139c:	f7ff fde0 	bl	8000f60 <read_keypad>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b35      	cmp	r3, #53	; 0x35
 80013a4:	d10a      	bne.n	80013bc <main+0x248>
		  	  HD44780_SetCursor(10,1);
 80013a6:	2101      	movs	r1, #1
 80013a8:	200a      	movs	r0, #10
 80013aa:	f7ff fc79 	bl	8000ca0 <HD44780_SetCursor>
	  		  HD44780_PrintStr("Producto 5");
 80013ae:	4849      	ldr	r0, [pc, #292]	; (80014d4 <main+0x360>)
 80013b0:	f7ff fce7 	bl	8000d82 <HD44780_PrintStr>
	  		  HAL_Delay(500);
 80013b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013b8:	f000 fc78 	bl	8001cac <HAL_Delay>
	  }
	  if(read_keypad ()=='6'){
 80013bc:	f7ff fdd0 	bl	8000f60 <read_keypad>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b36      	cmp	r3, #54	; 0x36
 80013c4:	d10a      	bne.n	80013dc <main+0x268>
	  		  HD44780_SetCursor(10,1);
 80013c6:	2101      	movs	r1, #1
 80013c8:	200a      	movs	r0, #10
 80013ca:	f7ff fc69 	bl	8000ca0 <HD44780_SetCursor>
	  		  HD44780_PrintStr("Producto 6");
 80013ce:	4842      	ldr	r0, [pc, #264]	; (80014d8 <main+0x364>)
 80013d0:	f7ff fcd7 	bl	8000d82 <HD44780_PrintStr>
	  		  HAL_Delay(500);
 80013d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d8:	f000 fc68 	bl	8001cac <HAL_Delay>
	  }
	  if(read_keypad ()=='*'){
 80013dc:	f7ff fdc0 	bl	8000f60 <read_keypad>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b2a      	cmp	r3, #42	; 0x2a
 80013e4:	d10e      	bne.n	8001404 <main+0x290>
		  	  HD44780_Clear();
 80013e6:	f7ff fc45 	bl	8000c74 <HD44780_Clear>
		  	  HD44780_SetCursor(0,0);
 80013ea:	2100      	movs	r1, #0
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff fc57 	bl	8000ca0 <HD44780_SetCursor>
		  	  HD44780_PrintStr("dropeando el producto....");
 80013f2:	483a      	ldr	r0, [pc, #232]	; (80014dc <main+0x368>)
 80013f4:	f7ff fcc5 	bl	8000d82 <HD44780_PrintStr>
		  	  HAL_Delay(500);
 80013f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013fc:	f000 fc56 	bl	8001cac <HAL_Delay>
		  	  aux2=1;
 8001400:	2301      	movs	r3, #1
 8001402:	66fb      	str	r3, [r7, #108]	; 0x6c
  while(aux2==0){
 8001404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001406:	2b00      	cmp	r3, #0
 8001408:	d088      	beq.n	800131c <main+0x1a8>
	  }
  }
  int x;
  for(x=50;x<600;x++){
 800140a:	2332      	movs	r3, #50	; 0x32
 800140c:	66bb      	str	r3, [r7, #104]	; 0x68
 800140e:	e009      	b.n	8001424 <main+0x2b0>
  		  __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,x);
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <main+0x334>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
  		  HAL_Delay(2);
 8001418:	2002      	movs	r0, #2
 800141a:	f000 fc47 	bl	8001cac <HAL_Delay>
  for(x=50;x<600;x++){
 800141e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001420:	3301      	adds	r3, #1
 8001422:	66bb      	str	r3, [r7, #104]	; 0x68
 8001424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001426:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800142a:	dbf1      	blt.n	8001410 <main+0x29c>
  }
  HD44780_Clear();
 800142c:	f7ff fc22 	bl	8000c74 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8001430:	2100      	movs	r1, #0
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fc34 	bl	8000ca0 <HD44780_SetCursor>
  HD44780_PrintStr("RECOJA SU PRODUCTO");
 8001438:	4829      	ldr	r0, [pc, #164]	; (80014e0 <main+0x36c>)
 800143a:	f7ff fca2 	bl	8000d82 <HD44780_PrintStr>
  HAL_Delay(8000);
 800143e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001442:	f000 fc33 	bl	8001cac <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

	  int x;
	  for(x=50;x<600;x++){
 8001446:	2332      	movs	r3, #50	; 0x32
 8001448:	667b      	str	r3, [r7, #100]	; 0x64
 800144a:	e009      	b.n	8001460 <main+0x2ec>
		  __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,x);
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <main+0x334>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001452:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f000 fc29 	bl	8001cac <HAL_Delay>
	  for(x=50;x<600;x++){
 800145a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800145c:	3301      	adds	r3, #1
 800145e:	667b      	str	r3, [r7, #100]	; 0x64
 8001460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001462:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001466:	dbf1      	blt.n	800144c <main+0x2d8>
	  }

	  for(x=600;x>50;x=x-1){
 8001468:	f44f 7316 	mov.w	r3, #600	; 0x258
 800146c:	667b      	str	r3, [r7, #100]	; 0x64
 800146e:	e009      	b.n	8001484 <main+0x310>
		  __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,x);
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <main+0x334>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001476:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1);
 8001478:	2001      	movs	r0, #1
 800147a:	f000 fc17 	bl	8001cac <HAL_Delay>
	  for(x=600;x>50;x=x-1){
 800147e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001480:	3b01      	subs	r3, #1
 8001482:	667b      	str	r3, [r7, #100]	; 0x64
 8001484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001486:	2b32      	cmp	r3, #50	; 0x32
 8001488:	dcf2      	bgt.n	8001470 <main+0x2fc>
	  }

	  HD44780_Init(2);
 800148a:	2002      	movs	r0, #2
 800148c:	f7ff fb6e 	bl	8000b6c <HD44780_Init>
	  HD44780_Clear();
 8001490:	f7ff fbf0 	bl	8000c74 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8001494:	2100      	movs	r1, #0
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff fc02 	bl	8000ca0 <HD44780_SetCursor>
  {
 800149c:	e7d3      	b.n	8001446 <main+0x2d2>
 800149e:	bf00      	nop
 80014a0:	080070e0 	.word	0x080070e0
 80014a4:	080070f0 	.word	0x080070f0
 80014a8:	200000f8 	.word	0x200000f8
 80014ac:	08007108 	.word	0x08007108
 80014b0:	0800711c 	.word	0x0800711c
 80014b4:	08007124 	.word	0x08007124
 80014b8:	08007128 	.word	0x08007128
 80014bc:	0800712c 	.word	0x0800712c
 80014c0:	08007130 	.word	0x08007130
 80014c4:	08007148 	.word	0x08007148
 80014c8:	08007154 	.word	0x08007154
 80014cc:	08007160 	.word	0x08007160
 80014d0:	0800716c 	.word	0x0800716c
 80014d4:	08007178 	.word	0x08007178
 80014d8:	08007184 	.word	0x08007184
 80014dc:	08007190 	.word	0x08007190
 80014e0:	080071ac 	.word	0x080071ac

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b096      	sub	sp, #88	; 0x58
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2244      	movs	r2, #68	; 0x44
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fa5c 	bl	80049b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	463b      	mov	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001506:	f44f 7000 	mov.w	r0, #512	; 0x200
 800150a:	f001 fa9b 	bl	8002a44 <HAL_PWREx_ControlVoltageScaling>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001514:	f000 f952 	bl	80017bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001518:	2310      	movs	r3, #16
 800151a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800151c:	2301      	movs	r3, #1
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 16;
 8001520:	2310      	movs	r3, #16
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001524:	2360      	movs	r3, #96	; 0x60
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001528:	2300      	movs	r3, #0
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4618      	mov	r0, r3
 8001532:	f001 fadd 	bl	8002af0 <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800153c:	f000 f93e 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001554:	463b      	mov	r3, r7
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fedd 	bl	8003318 <HAL_RCC_ClockConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001564:	f000 f92a 	bl	80017bc <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3758      	adds	r7, #88	; 0x58
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <MX_I2C1_Init+0x78>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_I2C1_Init+0x74>)
 800157c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001580:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_I2C1_Init+0x74>)
 800158a:	2201      	movs	r2, #1
 800158c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_I2C1_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015ae:	f000 fe21 	bl	80021f4 <HAL_I2C_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b8:	f000 f900 	bl	80017bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015c0:	f001 f99a 	bl	80028f8 <HAL_I2CEx_ConfigAnalogFilter>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80015ca:	f000 f8f7 	bl	80017bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015d2:	f001 f9dc 	bl	800298e <HAL_I2CEx_ConfigDigitalFilter>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80015dc:	f000 f8ee 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200000a4 	.word	0x200000a4
 80015e8:	40005400 	.word	0x40005400

080015ec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b092      	sub	sp, #72	; 0x48
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001606:	463b      	mov	r3, r7
 8001608:	222c      	movs	r2, #44	; 0x2c
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f003 f9cf 	bl	80049b0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <MX_TIM16_Init+0xe8>)
 8001614:	4a30      	ldr	r2, [pc, #192]	; (80016d8 <MX_TIM16_Init+0xec>)
 8001616:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19;
 8001618:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <MX_TIM16_Init+0xe8>)
 800161a:	2213      	movs	r2, #19
 800161c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <MX_TIM16_Init+0xe8>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <MX_TIM16_Init+0xe8>)
 8001626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800162a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <MX_TIM16_Init+0xe8>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <MX_TIM16_Init+0xe8>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <MX_TIM16_Init+0xe8>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800163e:	4825      	ldr	r0, [pc, #148]	; (80016d4 <MX_TIM16_Init+0xe8>)
 8001640:	f002 fb3e 	bl	8003cc0 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800164a:	f000 f8b7 	bl	80017bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800164e:	4821      	ldr	r0, [pc, #132]	; (80016d4 <MX_TIM16_Init+0xe8>)
 8001650:	f002 fb8d 	bl	8003d6e <HAL_TIM_PWM_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800165a:	f000 f8af 	bl	80017bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165e:	2360      	movs	r3, #96	; 0x60
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 500;
 8001662:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001668:	2300      	movs	r3, #0
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001674:	2300      	movs	r3, #0
 8001676:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <MX_TIM16_Init+0xe8>)
 8001686:	f002 fcb1 	bl	8003fec <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001690:	f000 f894 	bl	80017bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80016b2:	463b      	mov	r3, r7
 80016b4:	4619      	mov	r1, r3
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <MX_TIM16_Init+0xe8>)
 80016b8:	f003 f8b4 	bl	8004824 <HAL_TIMEx_ConfigBreakDeadTime>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80016c2:	f000 f87b 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <MX_TIM16_Init+0xe8>)
 80016c8:	f000 f91a 	bl	8001900 <HAL_TIM_MspPostInit>

}
 80016cc:	bf00      	nop
 80016ce:	3748      	adds	r7, #72	; 0x48
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200000f8 	.word	0x200000f8
 80016d8:	40014400 	.word	0x40014400

080016dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <MX_GPIO_Init+0xd8>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a2f      	ldr	r2, [pc, #188]	; (80017b4 <MX_GPIO_Init+0xd8>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <MX_GPIO_Init+0xd8>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <MX_GPIO_Init+0xd8>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <MX_GPIO_Init+0xd8>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <MX_GPIO_Init+0xd8>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f640 1108 	movw	r1, #2312	; 0x908
 8001728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172c:	f000 fd4a 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2102      	movs	r1, #2
 8001734:	4820      	ldr	r0, [pc, #128]	; (80017b8 <MX_GPIO_Init+0xdc>)
 8001736:	f000 fd45 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_11;
 800173a:	f640 1308 	movw	r3, #2312	; 0x908
 800173e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4619      	mov	r1, r3
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f000 fbb3 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 800175a:	f241 0330 	movw	r3, #4144	; 0x1030
 800175e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f000 fba5 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001776:	2301      	movs	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4619      	mov	r1, r3
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <MX_GPIO_Init+0xdc>)
 800178a:	f000 fb99 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800178e:	2302      	movs	r3, #2
 8001790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_GPIO_Init+0xdc>)
 80017a6:	f000 fb8b 	bl	8001ec0 <HAL_GPIO_Init>

}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48000400 	.word	0x48000400

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>
	...

080017c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_MspInit+0x44>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_MspInit+0x44>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6613      	str	r3, [r2, #96]	; 0x60
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_MspInit+0x44>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_MspInit+0x44>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_MspInit+0x44>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6593      	str	r3, [r2, #88]	; 0x58
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_MspInit+0x44>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b09e      	sub	sp, #120	; 0x78
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	2254      	movs	r2, #84	; 0x54
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f003 f8bd 	bl	80049b0 <memset>
  if(hi2c->Instance==I2C1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1f      	ldr	r2, [pc, #124]	; (80018b8 <HAL_I2C_MspInit+0xa8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d137      	bne.n	80018b0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001840:	2340      	movs	r3, #64	; 0x40
 8001842:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001844:	2300      	movs	r3, #0
 8001846:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4618      	mov	r0, r3
 800184e:	f001 ff4f 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001858:	f7ff ffb0 	bl	80017bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_I2C_MspInit+0xac>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	4a16      	ldr	r2, [pc, #88]	; (80018bc <HAL_I2C_MspInit+0xac>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_I2C_MspInit+0xac>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001874:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001878:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187a:	2312      	movs	r3, #18
 800187c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001886:	2304      	movs	r3, #4
 8001888:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f000 fb14 	bl	8001ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_I2C_MspInit+0xac>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_I2C_MspInit+0xac>)
 800189e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a2:	6593      	str	r3, [r2, #88]	; 0x58
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_I2C_MspInit+0xac>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	3778      	adds	r7, #120	; 0x78
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40005400 	.word	0x40005400
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_TIM_Base_MspInit+0x38>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10b      	bne.n	80018ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_TIM_Base_MspInit+0x3c>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_TIM_Base_MspInit+0x3c>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	6613      	str	r3, [r2, #96]	; 0x60
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_TIM_Base_MspInit+0x3c>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40014400 	.word	0x40014400
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_TIM_MspPostInit+0x64>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d11c      	bne.n	800195c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_TIM_MspPostInit+0x68>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_TIM_MspPostInit+0x68>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_TIM_MspPostInit+0x68>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800193a:	2340      	movs	r3, #64	; 0x40
 800193c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800194a:	230e      	movs	r3, #14
 800194c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f000 fab2 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40014400 	.word	0x40014400
 8001968:	40021000 	.word	0x40021000

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b8:	f000 f958 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
	return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_kill>:

int _kill(int pid, int sig)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019da:	f002 ffbf 	bl	800495c <__errno>
 80019de:	4603      	mov	r3, r0
 80019e0:	2216      	movs	r2, #22
 80019e2:	601a      	str	r2, [r3, #0]
	return -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_exit>:

void _exit (int status)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffe7 	bl	80019d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a02:	e7fe      	b.n	8001a02 <_exit+0x12>

08001a04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e00a      	b.n	8001a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a16:	f3af 8000 	nop.w
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	b2ca      	uxtb	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbf0      	blt.n	8001a16 <_read+0x12>
	}

return len;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e009      	b.n	8001a64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	60ba      	str	r2, [r7, #8]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbf1      	blt.n	8001a50 <_write+0x12>
	}
	return len;
 8001a6c:	687b      	ldr	r3, [r7, #4]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_close>:

int _close(int file)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_isatty>:

int _isatty(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
	return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f002 ff24 	bl	800495c <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20010000 	.word	0x20010000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	20000144 	.word	0x20000144
 8001b48:	20000160 	.word	0x20000160

08001b4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <SystemInit+0x20>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <SystemInit+0x20>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b74:	f7ff ffea 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <LoopForever+0x6>)
  ldr r1, =_edata
 8001b7a:	490d      	ldr	r1, [pc, #52]	; (8001bb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <LoopForever+0xe>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b90:	4c0a      	ldr	r4, [pc, #40]	; (8001bbc <LoopForever+0x16>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f002 fee3 	bl	8004968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ba2:	f7ff fae7 	bl	8001174 <main>

08001ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ba6:	e7fe      	b.n	8001ba6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001bb4:	080074c8 	.word	0x080074c8
  ldr r2, =_sbss
 8001bb8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001bbc:	2000015c 	.word	0x2000015c

08001bc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC1_IRQHandler>

08001bc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f000 f943 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd2:	200f      	movs	r0, #15
 8001bd4:	f000 f80e 	bl	8001bf4 <HAL_InitTick>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	e001      	b.n	8001be8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be4:	f7ff fdf0 	bl	80017c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_InitTick+0x6c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d023      	beq.n	8001c50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_InitTick+0x70>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_InitTick+0x6c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f941 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d809      	bhi.n	8001c44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f919 	bl	8001e6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_InitTick+0x74>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e007      	b.n	8001c54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e004      	b.n	8001c54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e001      	b.n	8001c54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000018 	.word	0x20000018
 8001c64:	20000010 	.word	0x20000010
 8001c68:	20000014 	.word	0x20000014

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000018 	.word	0x20000018
 8001c90:	20000148 	.word	0x20000148

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000148 	.word	0x20000148

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff ffee 	bl	8001c94 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000018 	.word	0x20000018

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e24:	d301      	bcc.n	8001e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <SysTick_Config+0x40>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e32:	210f      	movs	r1, #15
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f7ff ff8e 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <SysTick_Config+0x40>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <SysTick_Config+0x40>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff47 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff5c 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff8e 	bl	8001dac <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff5d 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffb0 	bl	8001e14 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ece:	e148      	b.n	8002162 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 813a 	beq.w	800215c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d005      	beq.n	8001f00 <HAL_GPIO_Init+0x40>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d130      	bne.n	8001f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f36:	2201      	movs	r2, #1
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	f003 0201 	and.w	r2, r3, #1
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d017      	beq.n	8001f9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d123      	bne.n	8001ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	08da      	lsrs	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	6939      	ldr	r1, [r7, #16]
 8001fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0203 	and.w	r2, r3, #3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8094 	beq.w	800215c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002034:	4b52      	ldr	r3, [pc, #328]	; (8002180 <HAL_GPIO_Init+0x2c0>)
 8002036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002038:	4a51      	ldr	r2, [pc, #324]	; (8002180 <HAL_GPIO_Init+0x2c0>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6613      	str	r3, [r2, #96]	; 0x60
 8002040:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_GPIO_Init+0x2c0>)
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800204c:	4a4d      	ldr	r2, [pc, #308]	; (8002184 <HAL_GPIO_Init+0x2c4>)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002076:	d00d      	beq.n	8002094 <HAL_GPIO_Init+0x1d4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a43      	ldr	r2, [pc, #268]	; (8002188 <HAL_GPIO_Init+0x2c8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_Init+0x1d0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a42      	ldr	r2, [pc, #264]	; (800218c <HAL_GPIO_Init+0x2cc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_GPIO_Init+0x1cc>
 8002088:	2302      	movs	r3, #2
 800208a:	e004      	b.n	8002096 <HAL_GPIO_Init+0x1d6>
 800208c:	2307      	movs	r3, #7
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x1d6>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_GPIO_Init+0x1d6>
 8002094:	2300      	movs	r3, #0
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	f002 0203 	and.w	r2, r2, #3
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	4093      	lsls	r3, r2
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020a6:	4937      	ldr	r1, [pc, #220]	; (8002184 <HAL_GPIO_Init+0x2c4>)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020d8:	4a2d      	ldr	r2, [pc, #180]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002102:	4a23      	ldr	r2, [pc, #140]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002108:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800212c:	4a18      	ldr	r2, [pc, #96]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002132:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3301      	adds	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	f47f aeaf 	bne.w	8001ed0 <HAL_GPIO_Init+0x10>
  }
}
 8002172:	bf00      	nop
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000
 8002188:	48000400 	.word	0x48000400
 800218c:	48000800 	.word	0x48000800
 8002190:	40010400 	.word	0x40010400

08002194 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e001      	b.n	80021b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
 80021d0:	4613      	mov	r3, r2
 80021d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e081      	b.n	800230a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff faf8 	bl	8001810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	; 0x24
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002244:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002254:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d107      	bne.n	800226e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	e006      	b.n	800227c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800227a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d104      	bne.n	800228e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800228c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800229c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69d9      	ldr	r1, [r3, #28]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	461a      	mov	r2, r3
 8002320:	460b      	mov	r3, r1
 8002322:	817b      	strh	r3, [r7, #10]
 8002324:	4613      	mov	r3, r2
 8002326:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b20      	cmp	r3, #32
 8002332:	f040 80da 	bne.w	80024ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x30>
 8002340:	2302      	movs	r3, #2
 8002342:	e0d3      	b.n	80024ec <HAL_I2C_Master_Transmit+0x1d8>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800234c:	f7ff fca2 	bl	8001c94 <HAL_GetTick>
 8002350:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2319      	movs	r3, #25
 8002358:	2201      	movs	r2, #1
 800235a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f8f0 	bl	8002544 <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0be      	b.n	80024ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2221      	movs	r2, #33	; 0x21
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2210      	movs	r2, #16
 800237a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	893a      	ldrh	r2, [r7, #8]
 800238e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	2bff      	cmp	r3, #255	; 0xff
 800239e:	d90e      	bls.n	80023be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	22ff      	movs	r2, #255	; 0xff
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	4b51      	ldr	r3, [pc, #324]	; (80024f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fa6c 	bl	8002894 <I2C_TransferConfig>
 80023bc:	e06c      	b.n	8002498 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	8979      	ldrh	r1, [r7, #10]
 80023d0:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fa5b 	bl	8002894 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023de:	e05b      	b.n	8002498 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	6a39      	ldr	r1, [r7, #32]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f8ed 	bl	80025c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e07b      	b.n	80024ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d034      	beq.n	8002498 <HAL_I2C_Master_Transmit+0x184>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	2b00      	cmp	r3, #0
 8002434:	d130      	bne.n	8002498 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	2200      	movs	r2, #0
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f87f 	bl	8002544 <I2C_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e04d      	b.n	80024ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	2bff      	cmp	r3, #255	; 0xff
 8002458:	d90e      	bls.n	8002478 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	22ff      	movs	r2, #255	; 0xff
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	b2da      	uxtb	r2, r3
 8002466:	8979      	ldrh	r1, [r7, #10]
 8002468:	2300      	movs	r3, #0
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa0f 	bl	8002894 <I2C_TransferConfig>
 8002476:	e00f      	b.n	8002498 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	b2da      	uxtb	r2, r3
 8002488:	8979      	ldrh	r1, [r7, #10]
 800248a:	2300      	movs	r3, #0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f9fe 	bl	8002894 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d19e      	bne.n	80023e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	6a39      	ldr	r1, [r7, #32]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f8cc 	bl	8002644 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e01a      	b.n	80024ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2220      	movs	r2, #32
 80024bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80024ca:	400b      	ands	r3, r1
 80024cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	80002000 	.word	0x80002000
 80024f8:	fe00e800 	.word	0xfe00e800

080024fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d103      	bne.n	800251a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d007      	beq.n	8002538 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	619a      	str	r2, [r3, #24]
  }
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002554:	e022      	b.n	800259c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d01e      	beq.n	800259c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255e:	f7ff fb99 	bl	8001c94 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <I2C_WaitOnFlagUntilTimeout+0x30>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d113      	bne.n	800259c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e00f      	b.n	80025bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	4013      	ands	r3, r2
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d0cd      	beq.n	8002556 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025d0:	e02c      	b.n	800262c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f870 	bl	80026bc <I2C_IsErrorOccurred>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e02a      	b.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d01e      	beq.n	800262c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7ff fb51 	bl	8001c94 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d113      	bne.n	800262c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e007      	b.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b02      	cmp	r3, #2
 8002638:	d1cb      	bne.n	80025d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002650:	e028      	b.n	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f830 	bl	80026bc <I2C_IsErrorOccurred>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e026      	b.n	80026b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002666:	f7ff fb15 	bl	8001c94 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d302      	bcc.n	800267c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d113      	bne.n	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e007      	b.n	80026b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d1cf      	bne.n	8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d075      	beq.n	80027d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2210      	movs	r2, #16
 80026ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026f0:	e056      	b.n	80027a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d052      	beq.n	80027a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7ff facb 	bl	8001c94 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_IsErrorOccurred+0x54>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d147      	bne.n	80027a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002722:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800272e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002732:	d12e      	bne.n	8002792 <I2C_IsErrorOccurred+0xd6>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800273a:	d02a      	beq.n	8002792 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	2b20      	cmp	r3, #32
 8002740:	d027      	beq.n	8002792 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002750:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002752:	f7ff fa9f 	bl	8001c94 <HAL_GetTick>
 8002756:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002758:	e01b      	b.n	8002792 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800275a:	f7ff fa9b 	bl	8001c94 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b19      	cmp	r3, #25
 8002766:	d914      	bls.n	8002792 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b20      	cmp	r3, #32
 800279e:	d1dc      	bne.n	800275a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d003      	beq.n	80027b6 <I2C_IsErrorOccurred+0xfa>
 80027ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d09d      	beq.n	80026f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2220      	movs	r2, #32
 80027c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00b      	beq.n	8002820 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	f043 0308 	orr.w	r3, r3, #8
 800280e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002818:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800283a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01c      	beq.n	8002884 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff fe56 	bl	80024fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <I2C_IsErrorOccurred+0x1d4>)
 800285c:	400b      	ands	r3, r1
 800285e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002888:	4618      	mov	r0, r3
 800288a:	3728      	adds	r7, #40	; 0x28
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	fe00e800 	.word	0xfe00e800

08002894 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	817b      	strh	r3, [r7, #10]
 80028a2:	4613      	mov	r3, r2
 80028a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028a6:	897b      	ldrh	r3, [r7, #10]
 80028a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028ac:	7a7b      	ldrb	r3, [r7, #9]
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	4313      	orrs	r3, r2
 80028be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	0d5b      	lsrs	r3, r3, #21
 80028ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <I2C_TransferConfig+0x60>)
 80028d4:	430b      	orrs	r3, r1
 80028d6:	43db      	mvns	r3, r3
 80028d8:	ea02 0103 	and.w	r1, r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028e6:	bf00      	nop
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	03ff63ff 	.word	0x03ff63ff

080028f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b20      	cmp	r3, #32
 800290c:	d138      	bne.n	8002980 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002918:	2302      	movs	r3, #2
 800291a:	e032      	b.n	8002982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800294a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d139      	bne.n	8002a18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e033      	b.n	8002a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2224      	movs	r2, #36	; 0x24
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
  }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40007000 	.word	0x40007000

08002a44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a52:	d130      	bne.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a54:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a60:	d038      	beq.n	8002ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2232      	movs	r2, #50	; 0x32
 8002a78:	fb02 f303 	mul.w	r3, r2, r3
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0c9b      	lsrs	r3, r3, #18
 8002a84:	3301      	adds	r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a88:	e002      	b.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a90:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9c:	d102      	bne.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f2      	bne.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d110      	bne.n	8002ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e00f      	b.n	8002ad6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac2:	d007      	beq.n	8002ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002acc:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40007000 	.word	0x40007000
 8002ae8:	20000010 	.word	0x20000010
 8002aec:	431bde83 	.word	0x431bde83

08002af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f000 bc02 	b.w	8003308 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b04:	4b96      	ldr	r3, [pc, #600]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b0e:	4b94      	ldr	r3, [pc, #592]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80e4 	beq.w	8002cee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4c>
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	f040 808b 	bne.w	8002c4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	f040 8087 	bne.w	8002c4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b3c:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_OscConfig+0x64>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e3d9      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1a      	ldr	r2, [r3, #32]
 8002b58:	4b81      	ldr	r3, [pc, #516]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_RCC_OscConfig+0x7e>
 8002b64:	4b7e      	ldr	r3, [pc, #504]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6c:	e005      	b.n	8002b7a <HAL_RCC_OscConfig+0x8a>
 8002b6e:	4b7c      	ldr	r3, [pc, #496]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d223      	bcs.n	8002bc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fd54 	bl	8003630 <RCC_SetFlashLatencyFromMSIRange>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e3ba      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b92:	4b73      	ldr	r3, [pc, #460]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a72      	ldr	r2, [pc, #456]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002b98:	f043 0308 	orr.w	r3, r3, #8
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4b70      	ldr	r3, [pc, #448]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	496d      	ldr	r1, [pc, #436]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb0:	4b6b      	ldr	r3, [pc, #428]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	4968      	ldr	r1, [pc, #416]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
 8002bc4:	e025      	b.n	8002c12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc6:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002bcc:	f043 0308 	orr.w	r3, r3, #8
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4960      	ldr	r1, [pc, #384]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be4:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	495b      	ldr	r1, [pc, #364]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fd14 	bl	8003630 <RCC_SetFlashLatencyFromMSIRange>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e37a      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c12:	f000 fc81 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b51      	ldr	r3, [pc, #324]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	4950      	ldr	r1, [pc, #320]	; (8002d64 <HAL_RCC_OscConfig+0x274>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	4a4e      	ldr	r2, [pc, #312]	; (8002d68 <HAL_RCC_OscConfig+0x278>)
 8002c30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c32:	4b4e      	ldr	r3, [pc, #312]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe ffdc 	bl	8001bf4 <HAL_InitTick>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d052      	beq.n	8002cec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	e35e      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d032      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c52:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a42      	ldr	r2, [pc, #264]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c5e:	f7ff f819 	bl	8001c94 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c66:	f7ff f815 	bl	8001c94 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e347      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c78:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c84:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a35      	ldr	r2, [pc, #212]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	f043 0308 	orr.w	r3, r3, #8
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4930      	ldr	r1, [pc, #192]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca2:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	492b      	ldr	r1, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
 8002cb6:	e01a      	b.n	8002cee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe ffe6 	bl	8001c94 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ccc:	f7fe ffe2 	bl	8001c94 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e314      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1dc>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d073      	beq.n	8002de2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_OscConfig+0x21c>
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d10e      	bne.n	8002d24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d10b      	bne.n	8002d24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d063      	beq.n	8002de0 <HAL_RCC_OscConfig+0x2f0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d15f      	bne.n	8002de0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e2f1      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCC_OscConfig+0x24c>
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0b      	ldr	r2, [pc, #44]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e025      	b.n	8002d88 <HAL_RCC_OscConfig+0x298>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d44:	d114      	bne.n	8002d70 <HAL_RCC_OscConfig+0x280>
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a02      	ldr	r2, [pc, #8]	; (8002d60 <HAL_RCC_OscConfig+0x270>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e013      	b.n	8002d88 <HAL_RCC_OscConfig+0x298>
 8002d60:	40021000 	.word	0x40021000
 8002d64:	080071c0 	.word	0x080071c0
 8002d68:	20000010 	.word	0x20000010
 8002d6c:	20000014 	.word	0x20000014
 8002d70:	4ba0      	ldr	r3, [pc, #640]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a9f      	ldr	r2, [pc, #636]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b9d      	ldr	r3, [pc, #628]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a9c      	ldr	r2, [pc, #624]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe ff80 	bl	8001c94 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d98:	f7fe ff7c 	bl	8001c94 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e2ae      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002daa:	4b92      	ldr	r3, [pc, #584]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x2a8>
 8002db6:	e014      	b.n	8002de2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe ff6c 	bl	8001c94 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fe ff68 	bl	8001c94 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e29a      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dd2:	4b88      	ldr	r3, [pc, #544]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x2d0>
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d060      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x310>
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d119      	bne.n	8002e2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d116      	bne.n	8002e2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e00:	4b7c      	ldr	r3, [pc, #496]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_OscConfig+0x328>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e277      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e18:	4b76      	ldr	r3, [pc, #472]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	061b      	lsls	r3, r3, #24
 8002e26:	4973      	ldr	r1, [pc, #460]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e2c:	e040      	b.n	8002eb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d023      	beq.n	8002e7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e36:	4b6f      	ldr	r3, [pc, #444]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6e      	ldr	r2, [pc, #440]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7fe ff27 	bl	8001c94 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7fe ff23 	bl	8001c94 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e255      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e5c:	4b65      	ldr	r3, [pc, #404]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	4b62      	ldr	r3, [pc, #392]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	495f      	ldr	r1, [pc, #380]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
 8002e7c:	e018      	b.n	8002eb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a5c      	ldr	r2, [pc, #368]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe ff03 	bl	8001c94 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e92:	f7fe feff 	bl	8001c94 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e231      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d03c      	beq.n	8002f36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01c      	beq.n	8002efe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec4:	4b4b      	ldr	r3, [pc, #300]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eca:	4a4a      	ldr	r2, [pc, #296]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe fede 	bl	8001c94 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002edc:	f7fe feda 	bl	8001c94 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e20c      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eee:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ef      	beq.n	8002edc <HAL_RCC_OscConfig+0x3ec>
 8002efc:	e01b      	b.n	8002f36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f04:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fec1 	bl	8001c94 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f16:	f7fe febd 	bl	8001c94 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e1ef      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f28:	4b32      	ldr	r3, [pc, #200]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ef      	bne.n	8002f16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80a6 	beq.w	8003090 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f44:	2300      	movs	r3, #0
 8002f46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f48:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10d      	bne.n	8002f70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f54:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	4a26      	ldr	r2, [pc, #152]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f60:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f70:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_RCC_OscConfig+0x508>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d118      	bne.n	8002fae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_RCC_OscConfig+0x508>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <HAL_RCC_OscConfig+0x508>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f88:	f7fe fe84 	bl	8001c94 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f90:	f7fe fe80 	bl	8001c94 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e1b2      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <HAL_RCC_OscConfig+0x508>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d108      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4d8>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc6:	e029      	b.n	800301c <HAL_RCC_OscConfig+0x52c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b05      	cmp	r3, #5
 8002fce:	d115      	bne.n	8002ffc <HAL_RCC_OscConfig+0x50c>
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd6:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	4a03      	ldr	r2, [pc, #12]	; (8002ff4 <HAL_RCC_OscConfig+0x504>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff0:	e014      	b.n	800301c <HAL_RCC_OscConfig+0x52c>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	4b9a      	ldr	r3, [pc, #616]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	4a99      	ldr	r2, [pc, #612]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800300c:	4b96      	ldr	r3, [pc, #600]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	4a95      	ldr	r2, [pc, #596]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d016      	beq.n	8003052 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fe fe36 	bl	8001c94 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302a:	e00a      	b.n	8003042 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7fe fe32 	bl	8001c94 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e162      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003042:	4b89      	ldr	r3, [pc, #548]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ed      	beq.n	800302c <HAL_RCC_OscConfig+0x53c>
 8003050:	e015      	b.n	800307e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003052:	f7fe fe1f 	bl	8001c94 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe fe1b 	bl	8001c94 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e14b      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003070:	4b7d      	ldr	r3, [pc, #500]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1ed      	bne.n	800305a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307e:	7ffb      	ldrb	r3, [r7, #31]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003084:	4b78      	ldr	r3, [pc, #480]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	4a77      	ldr	r2, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 800308a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d03c      	beq.n	8003116 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01c      	beq.n	80030de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030a4:	4b70      	ldr	r3, [pc, #448]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 80030a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030aa:	4a6f      	ldr	r2, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fe fdee 	bl	8001c94 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030bc:	f7fe fdea 	bl	8001c94 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e11c      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ce:	4b66      	ldr	r3, [pc, #408]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 80030d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ef      	beq.n	80030bc <HAL_RCC_OscConfig+0x5cc>
 80030dc:	e01b      	b.n	8003116 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030de:	4b62      	ldr	r3, [pc, #392]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 80030e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030e4:	4a60      	ldr	r2, [pc, #384]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe fdd1 	bl	8001c94 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f6:	f7fe fdcd 	bl	8001c94 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e0ff      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003108:	4b57      	ldr	r3, [pc, #348]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 800310a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ef      	bne.n	80030f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80f3 	beq.w	8003306 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	2b02      	cmp	r3, #2
 8003126:	f040 80c9 	bne.w	80032bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800312a:	4b4f      	ldr	r3, [pc, #316]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0203 	and.w	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	429a      	cmp	r2, r3
 800313c:	d12c      	bne.n	8003198 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	3b01      	subs	r3, #1
 800314a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d123      	bne.n	8003198 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d11b      	bne.n	8003198 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d113      	bne.n	8003198 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d109      	bne.n	8003198 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	3b01      	subs	r3, #1
 8003192:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d06b      	beq.n	8003270 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d062      	beq.n	8003264 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800319e:	4b32      	ldr	r3, [pc, #200]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e0ac      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 80031b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031ba:	f7fe fd6b 	bl	8001c94 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe fd67 	bl	8001c94 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e099      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d4:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <HAL_RCC_OscConfig+0x77c>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031f0:	3a01      	subs	r2, #1
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	4311      	orrs	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031fa:	0212      	lsls	r2, r2, #8
 80031fc:	4311      	orrs	r1, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003202:	0852      	lsrs	r2, r2, #1
 8003204:	3a01      	subs	r2, #1
 8003206:	0552      	lsls	r2, r2, #21
 8003208:	4311      	orrs	r1, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800320e:	0852      	lsrs	r2, r2, #1
 8003210:	3a01      	subs	r2, #1
 8003212:	0652      	lsls	r2, r2, #25
 8003214:	4311      	orrs	r1, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800321a:	06d2      	lsls	r2, r2, #27
 800321c:	430a      	orrs	r2, r1
 800321e:	4912      	ldr	r1, [pc, #72]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8003220:	4313      	orrs	r3, r2
 8003222:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 800322a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a0c      	ldr	r2, [pc, #48]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8003236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800323c:	f7fe fd2a 	bl	8001c94 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003244:	f7fe fd26 	bl	8001c94 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e058      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <HAL_RCC_OscConfig+0x778>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003262:	e050      	b.n	8003306 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e04f      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
 8003268:	40021000 	.word	0x40021000
 800326c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d144      	bne.n	8003306 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800327c:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a23      	ldr	r2, [pc, #140]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 8003282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003286:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4a20      	ldr	r2, [pc, #128]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 800328e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003292:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003294:	f7fe fcfe 	bl	8001c94 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe fcfa 	bl	8001c94 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e02c      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x7ac>
 80032ba:	e024      	b.n	8003306 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b0c      	cmp	r3, #12
 80032c0:	d01f      	beq.n	8003302 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a12      	ldr	r2, [pc, #72]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 80032c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fe fce1 	bl	8001c94 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fe fcdd 	bl	8001c94 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e00f      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	4905      	ldr	r1, [pc, #20]	; (8003310 <HAL_RCC_OscConfig+0x820>)
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_OscConfig+0x824>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	60cb      	str	r3, [r1, #12]
 8003300:	e001      	b.n	8003306 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	feeefffc 	.word	0xfeeefffc

08003318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0e7      	b.n	80034fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800332c:	4b75      	ldr	r3, [pc, #468]	; (8003504 <HAL_RCC_ClockConfig+0x1ec>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d910      	bls.n	800335c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b72      	ldr	r3, [pc, #456]	; (8003504 <HAL_RCC_ClockConfig+0x1ec>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 0207 	bic.w	r2, r3, #7
 8003342:	4970      	ldr	r1, [pc, #448]	; (8003504 <HAL_RCC_ClockConfig+0x1ec>)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b6e      	ldr	r3, [pc, #440]	; (8003504 <HAL_RCC_ClockConfig+0x1ec>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0cf      	b.n	80034fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d010      	beq.n	800338a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	4b66      	ldr	r3, [pc, #408]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003374:	429a      	cmp	r2, r3
 8003376:	d908      	bls.n	800338a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003378:	4b63      	ldr	r3, [pc, #396]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4960      	ldr	r1, [pc, #384]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d04c      	beq.n	8003430 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b03      	cmp	r3, #3
 800339c:	d107      	bne.n	80033ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339e:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d121      	bne.n	80033ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0a6      	b.n	80034fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b6:	4b54      	ldr	r3, [pc, #336]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d115      	bne.n	80033ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e09a      	b.n	80034fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ce:	4b4e      	ldr	r3, [pc, #312]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e08e      	b.n	80034fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033de:	4b4a      	ldr	r3, [pc, #296]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e086      	b.n	80034fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033ee:	4b46      	ldr	r3, [pc, #280]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f023 0203 	bic.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4943      	ldr	r1, [pc, #268]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003400:	f7fe fc48 	bl	8001c94 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	e00a      	b.n	800341e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7fe fc44 	bl	8001c94 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e06e      	b.n	80034fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 020c 	and.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	429a      	cmp	r2, r3
 800342e:	d1eb      	bne.n	8003408 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003448:	429a      	cmp	r2, r3
 800344a:	d208      	bcs.n	800345e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344c:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	492b      	ldr	r1, [pc, #172]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800345e:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_RCC_ClockConfig+0x1ec>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d210      	bcs.n	800348e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_RCC_ClockConfig+0x1ec>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 0207 	bic.w	r2, r3, #7
 8003474:	4923      	ldr	r1, [pc, #140]	; (8003504 <HAL_RCC_ClockConfig+0x1ec>)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_RCC_ClockConfig+0x1ec>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d001      	beq.n	800348e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e036      	b.n	80034fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800349a:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	4918      	ldr	r1, [pc, #96]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4910      	ldr	r1, [pc, #64]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034cc:	f000 f824 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_RCC_ClockConfig+0x1f0>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	490b      	ldr	r1, [pc, #44]	; (800350c <HAL_RCC_ClockConfig+0x1f4>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
 80034e8:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x1f8>)
 80034ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_ClockConfig+0x1fc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe fb7f 	bl	8001bf4 <HAL_InitTick>
 80034f6:	4603      	mov	r3, r0
 80034f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80034fa:	7afb      	ldrb	r3, [r7, #11]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40022000 	.word	0x40022000
 8003508:	40021000 	.word	0x40021000
 800350c:	080071c0 	.word	0x080071c0
 8003510:	20000010 	.word	0x20000010
 8003514:	20000014 	.word	0x20000014

08003518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003526:	4b3e      	ldr	r3, [pc, #248]	; (8003620 <HAL_RCC_GetSysClockFreq+0x108>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003530:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <HAL_RCC_GetSysClockFreq+0x108>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x34>
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d121      	bne.n	800358a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d11e      	bne.n	800358a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800354c:	4b34      	ldr	r3, [pc, #208]	; (8003620 <HAL_RCC_GetSysClockFreq+0x108>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_RCC_GetSysClockFreq+0x108>)
 800355a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	e005      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003568:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <HAL_RCC_GetSysClockFreq+0x108>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003574:	4a2b      	ldr	r2, [pc, #172]	; (8003624 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10d      	bne.n	80035a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b04      	cmp	r3, #4
 800358e:	d102      	bne.n	8003596 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_RCC_GetSysClockFreq+0x110>)
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	e004      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800359c:	4b23      	ldr	r3, [pc, #140]	; (800362c <HAL_RCC_GetSysClockFreq+0x114>)
 800359e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	d134      	bne.n	8003610 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d003      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0xa6>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d003      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0xac>
 80035bc:	e005      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035be:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <HAL_RCC_GetSysClockFreq+0x110>)
 80035c0:	617b      	str	r3, [r7, #20]
      break;
 80035c2:	e005      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_RCC_GetSysClockFreq+0x114>)
 80035c6:	617b      	str	r3, [r7, #20]
      break;
 80035c8:	e002      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	617b      	str	r3, [r7, #20]
      break;
 80035ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	3301      	adds	r3, #1
 80035dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	0a1b      	lsrs	r3, r3, #8
 80035e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	fb03 f202 	mul.w	r2, r3, r2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	0e5b      	lsrs	r3, r3, #25
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	3301      	adds	r3, #1
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	fbb2 f3f3 	udiv	r3, r2, r3
 800360e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003610:	69bb      	ldr	r3, [r7, #24]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3724      	adds	r7, #36	; 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	080071d0 	.word	0x080071d0
 8003628:	00f42400 	.word	0x00f42400
 800362c:	007a1200 	.word	0x007a1200

08003630 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003648:	f7ff f9ee 	bl	8002a28 <HAL_PWREx_GetVoltageRange>
 800364c:	6178      	str	r0, [r7, #20]
 800364e:	e014      	b.n	800367a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365a:	6593      	str	r3, [r2, #88]	; 0x58
 800365c:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003668:	f7ff f9de 	bl	8002a28 <HAL_PWREx_GetVoltageRange>
 800366c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800366e:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003678:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	d10b      	bne.n	800369a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d919      	bls.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2ba0      	cmp	r3, #160	; 0xa0
 800368c:	d902      	bls.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800368e:	2302      	movs	r3, #2
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	e013      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003694:	2301      	movs	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e010      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d902      	bls.n	80036a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036a0:	2303      	movs	r3, #3
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	e00a      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d102      	bne.n	80036b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ac:	2302      	movs	r3, #2
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	e004      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b70      	cmp	r3, #112	; 0x70
 80036b6:	d101      	bne.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036b8:	2301      	movs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 0207 	bic.w	r2, r3, #7
 80036c4:	4909      	ldr	r1, [pc, #36]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40022000 	.word	0x40022000

080036f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036f8:	2300      	movs	r3, #0
 80036fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036fc:	2300      	movs	r3, #0
 80036fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003708:	2b00      	cmp	r3, #0
 800370a:	d031      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003714:	d01a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003716:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800371a:	d814      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d009      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003720:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003724:	d10f      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003726:	4b5d      	ldr	r3, [pc, #372]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4a5c      	ldr	r2, [pc, #368]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003732:	e00c      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f9ce 	bl	8003adc <RCCEx_PLLSAI1_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003744:	e003      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	74fb      	strb	r3, [r7, #19]
      break;
 800374a:	e000      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800374c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10b      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003754:	4b51      	ldr	r3, [pc, #324]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	494e      	ldr	r1, [pc, #312]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800376a:	e001      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 809e 	beq.w	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003782:	4b46      	ldr	r3, [pc, #280]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003798:	4b40      	ldr	r3, [pc, #256]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	4a3f      	ldr	r2, [pc, #252]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800379e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a2:	6593      	str	r3, [r2, #88]	; 0x58
 80037a4:	4b3d      	ldr	r3, [pc, #244]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b0:	2301      	movs	r3, #1
 80037b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b4:	4b3a      	ldr	r3, [pc, #232]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a39      	ldr	r2, [pc, #228]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037c0:	f7fe fa68 	bl	8001c94 <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037c6:	e009      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c8:	f7fe fa64 	bl	8001c94 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	74fb      	strb	r3, [r7, #19]
        break;
 80037da:	e005      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037dc:	4b30      	ldr	r3, [pc, #192]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ef      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d15a      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037ee:	4b2b      	ldr	r3, [pc, #172]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01e      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	429a      	cmp	r2, r3
 8003808:	d019      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003814:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	4a1f      	ldr	r2, [pc, #124]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800381e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003826:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	4a1b      	ldr	r2, [pc, #108]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800382e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003836:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe fa24 	bl	8001c94 <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384e:	e00b      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fe fa20 	bl	8001c94 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d902      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	74fb      	strb	r3, [r7, #19]
            break;
 8003866:	e006      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0ec      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10b      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387c:	4b07      	ldr	r3, [pc, #28]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	4904      	ldr	r1, [pc, #16]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003892:	e009      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
 8003898:	e006      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	7cfb      	ldrb	r3, [r7, #19]
 80038a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a8:	7c7b      	ldrb	r3, [r7, #17]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d105      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ae:	4b8a      	ldr	r3, [pc, #552]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	4a89      	ldr	r2, [pc, #548]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038c6:	4b84      	ldr	r3, [pc, #528]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f023 0203 	bic.w	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4980      	ldr	r1, [pc, #512]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038e8:	4b7b      	ldr	r3, [pc, #492]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	f023 020c 	bic.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	4978      	ldr	r1, [pc, #480]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800390a:	4b73      	ldr	r3, [pc, #460]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	496f      	ldr	r1, [pc, #444]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800392c:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	4967      	ldr	r1, [pc, #412]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800394e:	4b62      	ldr	r3, [pc, #392]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	495e      	ldr	r1, [pc, #376]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	4956      	ldr	r1, [pc, #344]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003992:	4b51      	ldr	r3, [pc, #324]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	494d      	ldr	r1, [pc, #308]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d028      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039b4:	4b48      	ldr	r3, [pc, #288]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	4945      	ldr	r1, [pc, #276]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d2:	d106      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d4:	4b40      	ldr	r3, [pc, #256]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a3f      	ldr	r2, [pc, #252]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039de:	60d3      	str	r3, [r2, #12]
 80039e0:	e011      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f872 	bl	8003adc <RCCEx_PLLSAI1_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d028      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a12:	4b31      	ldr	r3, [pc, #196]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	492d      	ldr	r1, [pc, #180]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a30:	d106      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a32:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4a28      	ldr	r2, [pc, #160]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3c:	60d3      	str	r3, [r2, #12]
 8003a3e:	e011      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2101      	movs	r1, #1
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 f843 	bl	8003adc <RCCEx_PLLSAI1_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01c      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7e:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a8e:	d10c      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f820 	bl	8003adc <RCCEx_PLLSAI1_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac4:	4904      	ldr	r1, [pc, #16]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003acc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000

08003adc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aea:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003af6:	4b71      	ldr	r3, [pc, #452]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0203 	and.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d10d      	bne.n	8003b22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
       ||
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b0e:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d047      	beq.n	8003bb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	e044      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d018      	beq.n	8003b62 <RCCEx_PLLSAI1_Config+0x86>
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d825      	bhi.n	8003b80 <RCCEx_PLLSAI1_Config+0xa4>
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d002      	beq.n	8003b3e <RCCEx_PLLSAI1_Config+0x62>
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d009      	beq.n	8003b50 <RCCEx_PLLSAI1_Config+0x74>
 8003b3c:	e020      	b.n	8003b80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b3e:	4b5f      	ldr	r3, [pc, #380]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d11d      	bne.n	8003b86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b4e:	e01a      	b.n	8003b86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b50:	4b5a      	ldr	r3, [pc, #360]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d116      	bne.n	8003b8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b60:	e013      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b62:	4b56      	ldr	r3, [pc, #344]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10f      	bne.n	8003b8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b6e:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b7e:	e006      	b.n	8003b8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      break;
 8003b84:	e004      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b86:	bf00      	nop
 8003b88:	e002      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10d      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b96:	4b49      	ldr	r3, [pc, #292]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	430b      	orrs	r3, r1
 8003bac:	4943      	ldr	r1, [pc, #268]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d17c      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bb8:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a3f      	ldr	r2, [pc, #252]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc4:	f7fe f866 	bl	8001c94 <HAL_GetTick>
 8003bc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bca:	e009      	b.n	8003be0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bcc:	f7fe f862 	bl	8001c94 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d902      	bls.n	8003be0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bde:	e005      	b.n	8003bec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003be0:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ef      	bne.n	8003bcc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d15f      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d110      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bf8:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6892      	ldr	r2, [r2, #8]
 8003c08:	0211      	lsls	r1, r2, #8
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68d2      	ldr	r2, [r2, #12]
 8003c0e:	06d2      	lsls	r2, r2, #27
 8003c10:	430a      	orrs	r2, r1
 8003c12:	492a      	ldr	r1, [pc, #168]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	610b      	str	r3, [r1, #16]
 8003c18:	e027      	b.n	8003c6a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d112      	bne.n	8003c46 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c20:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6892      	ldr	r2, [r2, #8]
 8003c30:	0211      	lsls	r1, r2, #8
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6912      	ldr	r2, [r2, #16]
 8003c36:	0852      	lsrs	r2, r2, #1
 8003c38:	3a01      	subs	r2, #1
 8003c3a:	0552      	lsls	r2, r2, #21
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	491f      	ldr	r1, [pc, #124]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	610b      	str	r3, [r1, #16]
 8003c44:	e011      	b.n	8003c6a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6892      	ldr	r2, [r2, #8]
 8003c56:	0211      	lsls	r1, r2, #8
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6952      	ldr	r2, [r2, #20]
 8003c5c:	0852      	lsrs	r2, r2, #1
 8003c5e:	3a01      	subs	r2, #1
 8003c60:	0652      	lsls	r2, r2, #25
 8003c62:	430a      	orrs	r2, r1
 8003c64:	4915      	ldr	r1, [pc, #84]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c76:	f7fe f80d 	bl	8001c94 <HAL_GetTick>
 8003c7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c7c:	e009      	b.n	8003c92 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c7e:	f7fe f809 	bl	8001c94 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d902      	bls.n	8003c92 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	73fb      	strb	r3, [r7, #15]
          break;
 8003c90:	e005      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0ef      	beq.n	8003c7e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	4903      	ldr	r1, [pc, #12]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40021000 	.word	0x40021000

08003cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e049      	b.n	8003d66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fdea 	bl	80018c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f000 fa88 	bl	8004214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e049      	b.n	8003e14 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f841 	bl	8003e1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f000 fa31 	bl	8004214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <HAL_TIM_PWM_Start+0x24>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e03c      	b.n	8003ece <HAL_TIM_PWM_Start+0x9e>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d109      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x3e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	e02f      	b.n	8003ece <HAL_TIM_PWM_Start+0x9e>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d109      	bne.n	8003e88 <HAL_TIM_PWM_Start+0x58>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e022      	b.n	8003ece <HAL_TIM_PWM_Start+0x9e>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b0c      	cmp	r3, #12
 8003e8c:	d109      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0x72>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	e015      	b.n	8003ece <HAL_TIM_PWM_Start+0x9e>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d109      	bne.n	8003ebc <HAL_TIM_PWM_Start+0x8c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e008      	b.n	8003ece <HAL_TIM_PWM_Start+0x9e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e07e      	b.n	8003fd4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xb6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee4:	e023      	b.n	8003f2e <HAL_TIM_PWM_Start+0xfe>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_PWM_Start+0xc6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef4:	e01b      	b.n	8003f2e <HAL_TIM_PWM_Start+0xfe>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_PWM_Start+0xd6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f04:	e013      	b.n	8003f2e <HAL_TIM_PWM_Start+0xfe>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b0c      	cmp	r3, #12
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_PWM_Start+0xe6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f14:	e00b      	b.n	8003f2e <HAL_TIM_PWM_Start+0xfe>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d104      	bne.n	8003f26 <HAL_TIM_PWM_Start+0xf6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f24:	e003      	b.n	8003f2e <HAL_TIM_PWM_Start+0xfe>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2201      	movs	r2, #1
 8003f34:	6839      	ldr	r1, [r7, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fc4e 	bl	80047d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <HAL_TIM_PWM_Start+0x1ac>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_TIM_PWM_Start+0x12a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <HAL_TIM_PWM_Start+0x1b0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_TIM_PWM_Start+0x12a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a23      	ldr	r2, [pc, #140]	; (8003fe4 <HAL_TIM_PWM_Start+0x1b4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_PWM_Start+0x12e>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_TIM_PWM_Start+0x130>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a18      	ldr	r2, [pc, #96]	; (8003fdc <HAL_TIM_PWM_Start+0x1ac>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d009      	beq.n	8003f92 <HAL_TIM_PWM_Start+0x162>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d004      	beq.n	8003f92 <HAL_TIM_PWM_Start+0x162>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a14      	ldr	r2, [pc, #80]	; (8003fe0 <HAL_TIM_PWM_Start+0x1b0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d115      	bne.n	8003fbe <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <HAL_TIM_PWM_Start+0x1b8>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b06      	cmp	r3, #6
 8003fa2:	d015      	beq.n	8003fd0 <HAL_TIM_PWM_Start+0x1a0>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003faa:	d011      	beq.n	8003fd0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbc:	e008      	b.n	8003fd0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0201 	orr.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e000      	b.n	8003fd2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40014000 	.word	0x40014000
 8003fe4:	40014400 	.word	0x40014400
 8003fe8:	00010007 	.word	0x00010007

08003fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004006:	2302      	movs	r3, #2
 8004008:	e0ff      	b.n	800420a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b14      	cmp	r3, #20
 8004016:	f200 80f0 	bhi.w	80041fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004075 	.word	0x08004075
 8004024:	080041fb 	.word	0x080041fb
 8004028:	080041fb 	.word	0x080041fb
 800402c:	080041fb 	.word	0x080041fb
 8004030:	080040b5 	.word	0x080040b5
 8004034:	080041fb 	.word	0x080041fb
 8004038:	080041fb 	.word	0x080041fb
 800403c:	080041fb 	.word	0x080041fb
 8004040:	080040f7 	.word	0x080040f7
 8004044:	080041fb 	.word	0x080041fb
 8004048:	080041fb 	.word	0x080041fb
 800404c:	080041fb 	.word	0x080041fb
 8004050:	08004137 	.word	0x08004137
 8004054:	080041fb 	.word	0x080041fb
 8004058:	080041fb 	.word	0x080041fb
 800405c:	080041fb 	.word	0x080041fb
 8004060:	08004179 	.word	0x08004179
 8004064:	080041fb 	.word	0x080041fb
 8004068:	080041fb 	.word	0x080041fb
 800406c:	080041fb 	.word	0x080041fb
 8004070:	080041b9 	.word	0x080041b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f92e 	bl	80042dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0208 	orr.w	r2, r2, #8
 800408e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0204 	bic.w	r2, r2, #4
 800409e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6999      	ldr	r1, [r3, #24]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	619a      	str	r2, [r3, #24]
      break;
 80040b2:	e0a5      	b.n	8004200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f98a 	bl	80043d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	021a      	lsls	r2, r3, #8
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	619a      	str	r2, [r3, #24]
      break;
 80040f4:	e084      	b.n	8004200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f9e3 	bl	80044c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0208 	orr.w	r2, r2, #8
 8004110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0204 	bic.w	r2, r2, #4
 8004120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69d9      	ldr	r1, [r3, #28]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	61da      	str	r2, [r3, #28]
      break;
 8004134:	e064      	b.n	8004200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fa3b 	bl	80045b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	021a      	lsls	r2, r3, #8
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	61da      	str	r2, [r3, #28]
      break;
 8004176:	e043      	b.n	8004200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fa78 	bl	8004674 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0208 	orr.w	r2, r2, #8
 8004192:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0204 	bic.w	r2, r2, #4
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041b6:	e023      	b.n	8004200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fab0 	bl	8004724 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041f8:	e002      	b.n	8004200 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
      break;
 80041fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004208:	7dfb      	ldrb	r3, [r7, #23]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop

08004214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a2a      	ldr	r2, [pc, #168]	; (80042d0 <TIM_Base_SetConfig+0xbc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_Base_SetConfig+0x20>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004232:	d108      	bne.n	8004246 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <TIM_Base_SetConfig+0xbc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00b      	beq.n	8004266 <TIM_Base_SetConfig+0x52>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004254:	d007      	beq.n	8004266 <TIM_Base_SetConfig+0x52>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <TIM_Base_SetConfig+0xc0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_Base_SetConfig+0x52>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <TIM_Base_SetConfig+0xc4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <TIM_Base_SetConfig+0xbc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_Base_SetConfig+0xa0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <TIM_Base_SetConfig+0xc0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_Base_SetConfig+0xa0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <TIM_Base_SetConfig+0xc4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d103      	bne.n	80042bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	615a      	str	r2, [r3, #20]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40014400 	.word	0x40014400

080042dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f023 0201 	bic.w	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 0302 	bic.w	r3, r3, #2
 8004328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a24      	ldr	r2, [pc, #144]	; (80043c8 <TIM_OC1_SetConfig+0xec>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d007      	beq.n	800434c <TIM_OC1_SetConfig+0x70>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a23      	ldr	r2, [pc, #140]	; (80043cc <TIM_OC1_SetConfig+0xf0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_OC1_SetConfig+0x70>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <TIM_OC1_SetConfig+0xf4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d10c      	bne.n	8004366 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0308 	bic.w	r3, r3, #8
 8004352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <TIM_OC1_SetConfig+0xec>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_OC1_SetConfig+0xa2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a16      	ldr	r2, [pc, #88]	; (80043cc <TIM_OC1_SetConfig+0xf0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_OC1_SetConfig+0xa2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <TIM_OC1_SetConfig+0xf4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d111      	bne.n	80043a2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40014400 	.word	0x40014400

080043d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f023 0210 	bic.w	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0320 	bic.w	r3, r3, #32
 8004422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a22      	ldr	r2, [pc, #136]	; (80044bc <TIM_OC2_SetConfig+0xe8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d10d      	bne.n	8004454 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800443e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004452:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a19      	ldr	r2, [pc, #100]	; (80044bc <TIM_OC2_SetConfig+0xe8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <TIM_OC2_SetConfig+0x98>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <TIM_OC2_SetConfig+0xec>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_OC2_SetConfig+0x98>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <TIM_OC2_SetConfig+0xf0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d113      	bne.n	8004494 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800447a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40014400 	.word	0x40014400

080044c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a21      	ldr	r2, [pc, #132]	; (80045ac <TIM_OC3_SetConfig+0xe4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10d      	bne.n	8004546 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a18      	ldr	r2, [pc, #96]	; (80045ac <TIM_OC3_SetConfig+0xe4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_OC3_SetConfig+0x96>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <TIM_OC3_SetConfig+0xe8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_OC3_SetConfig+0x96>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a16      	ldr	r2, [pc, #88]	; (80045b4 <TIM_OC3_SetConfig+0xec>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d113      	bne.n	8004586 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400

080045b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	031b      	lsls	r3, r3, #12
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a14      	ldr	r2, [pc, #80]	; (8004668 <TIM_OC4_SetConfig+0xb0>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <TIM_OC4_SetConfig+0x74>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a13      	ldr	r2, [pc, #76]	; (800466c <TIM_OC4_SetConfig+0xb4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_OC4_SetConfig+0x74>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a12      	ldr	r2, [pc, #72]	; (8004670 <TIM_OC4_SetConfig+0xb8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d109      	bne.n	8004640 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	019b      	lsls	r3, r3, #6
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40014000 	.word	0x40014000
 8004670:	40014400 	.word	0x40014400

08004674 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80046b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <TIM_OC5_SetConfig+0xa4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC5_SetConfig+0x6a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a12      	ldr	r2, [pc, #72]	; (800471c <TIM_OC5_SetConfig+0xa8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC5_SetConfig+0x6a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a11      	ldr	r2, [pc, #68]	; (8004720 <TIM_OC5_SetConfig+0xac>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d109      	bne.n	80046f2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400

08004724 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800476a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	051b      	lsls	r3, r3, #20
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a14      	ldr	r2, [pc, #80]	; (80047cc <TIM_OC6_SetConfig+0xa8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d007      	beq.n	8004790 <TIM_OC6_SetConfig+0x6c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <TIM_OC6_SetConfig+0xac>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_OC6_SetConfig+0x6c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <TIM_OC6_SetConfig+0xb0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d109      	bne.n	80047a4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004796:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	029b      	lsls	r3, r3, #10
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40014400 	.word	0x40014400

080047d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	2201      	movs	r2, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1a      	ldr	r2, [r3, #32]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	401a      	ands	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	431a      	orrs	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800483c:	2302      	movs	r3, #2
 800483e:	e060      	b.n	8004902 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	041b      	lsls	r3, r3, #16
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a14      	ldr	r2, [pc, #80]	; (8004910 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d115      	bne.n	80048f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	051b      	lsls	r3, r3, #20
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40012c00 	.word	0x40012c00

08004914 <gcvt>:
 8004914:	b530      	push	{r4, r5, lr}
 8004916:	2200      	movs	r2, #0
 8004918:	b085      	sub	sp, #20
 800491a:	460c      	mov	r4, r1
 800491c:	4605      	mov	r5, r0
 800491e:	2300      	movs	r3, #0
 8004920:	ec51 0b10 	vmov	r0, r1, d0
 8004924:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004928:	f7fc f8d0 	bl	8000acc <__aeabi_dcmplt>
 800492c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004930:	4622      	mov	r2, r4
 8004932:	b118      	cbz	r0, 800493c <gcvt+0x28>
 8004934:	232d      	movs	r3, #45	; 0x2d
 8004936:	f802 3b01 	strb.w	r3, [r2], #1
 800493a:	3d01      	subs	r5, #1
 800493c:	2300      	movs	r3, #0
 800493e:	4806      	ldr	r0, [pc, #24]	; (8004958 <gcvt+0x44>)
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	4629      	mov	r1, r5
 8004944:	2367      	movs	r3, #103	; 0x67
 8004946:	6800      	ldr	r0, [r0, #0]
 8004948:	f000 f8b2 	bl	8004ab0 <_gcvt>
 800494c:	2800      	cmp	r0, #0
 800494e:	bf14      	ite	ne
 8004950:	4620      	movne	r0, r4
 8004952:	2000      	moveq	r0, #0
 8004954:	b005      	add	sp, #20
 8004956:	bd30      	pop	{r4, r5, pc}
 8004958:	2000001c 	.word	0x2000001c

0800495c <__errno>:
 800495c:	4b01      	ldr	r3, [pc, #4]	; (8004964 <__errno+0x8>)
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	2000001c 	.word	0x2000001c

08004968 <__libc_init_array>:
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	4d0d      	ldr	r5, [pc, #52]	; (80049a0 <__libc_init_array+0x38>)
 800496c:	4c0d      	ldr	r4, [pc, #52]	; (80049a4 <__libc_init_array+0x3c>)
 800496e:	1b64      	subs	r4, r4, r5
 8004970:	10a4      	asrs	r4, r4, #2
 8004972:	2600      	movs	r6, #0
 8004974:	42a6      	cmp	r6, r4
 8004976:	d109      	bne.n	800498c <__libc_init_array+0x24>
 8004978:	4d0b      	ldr	r5, [pc, #44]	; (80049a8 <__libc_init_array+0x40>)
 800497a:	4c0c      	ldr	r4, [pc, #48]	; (80049ac <__libc_init_array+0x44>)
 800497c:	f002 fb9c 	bl	80070b8 <_init>
 8004980:	1b64      	subs	r4, r4, r5
 8004982:	10a4      	asrs	r4, r4, #2
 8004984:	2600      	movs	r6, #0
 8004986:	42a6      	cmp	r6, r4
 8004988:	d105      	bne.n	8004996 <__libc_init_array+0x2e>
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004990:	4798      	blx	r3
 8004992:	3601      	adds	r6, #1
 8004994:	e7ee      	b.n	8004974 <__libc_init_array+0xc>
 8004996:	f855 3b04 	ldr.w	r3, [r5], #4
 800499a:	4798      	blx	r3
 800499c:	3601      	adds	r6, #1
 800499e:	e7f2      	b.n	8004986 <__libc_init_array+0x1e>
 80049a0:	080074c0 	.word	0x080074c0
 80049a4:	080074c0 	.word	0x080074c0
 80049a8:	080074c0 	.word	0x080074c0
 80049ac:	080074c4 	.word	0x080074c4

080049b0 <memset>:
 80049b0:	4402      	add	r2, r0
 80049b2:	4603      	mov	r3, r0
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d100      	bne.n	80049ba <memset+0xa>
 80049b8:	4770      	bx	lr
 80049ba:	f803 1b01 	strb.w	r1, [r3], #1
 80049be:	e7f9      	b.n	80049b4 <memset+0x4>

080049c0 <print_e>:
 80049c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c2:	b087      	sub	sp, #28
 80049c4:	ec43 2b10 	vmov	d0, r2, r3
 80049c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80049ca:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80049ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80049d0:	ab04      	add	r3, sp, #16
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	ab03      	add	r3, sp, #12
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	1c62      	adds	r2, r4, #1
 80049da:	ab05      	add	r3, sp, #20
 80049dc:	460f      	mov	r7, r1
 80049de:	2102      	movs	r1, #2
 80049e0:	f000 fe36 	bl	8005650 <_dtoa_r>
 80049e4:	9a05      	ldr	r2, [sp, #20]
 80049e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d105      	bne.n	80049fa <print_e+0x3a>
 80049ee:	4601      	mov	r1, r0
 80049f0:	4638      	mov	r0, r7
 80049f2:	f000 fd79 	bl	80054e8 <strcpy>
 80049f6:	b007      	add	sp, #28
 80049f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fa:	463b      	mov	r3, r7
 80049fc:	7801      	ldrb	r1, [r0, #0]
 80049fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004a02:	2c00      	cmp	r4, #0
 8004a04:	bfc8      	it	gt
 8004a06:	2501      	movgt	r5, #1
 8004a08:	212e      	movs	r1, #46	; 0x2e
 8004a0a:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8004a0e:	b10f      	cbz	r7, 8004a14 <print_e+0x54>
 8004a10:	2c00      	cmp	r4, #0
 8004a12:	dc37      	bgt.n	8004a84 <print_e+0xc4>
 8004a14:	2e67      	cmp	r6, #103	; 0x67
 8004a16:	d046      	beq.n	8004aa6 <print_e+0xe6>
 8004a18:	2e47      	cmp	r6, #71	; 0x47
 8004a1a:	d046      	beq.n	8004aaa <print_e+0xea>
 8004a1c:	212e      	movs	r1, #46	; 0x2e
 8004a1e:	2030      	movs	r0, #48	; 0x30
 8004a20:	2c00      	cmp	r4, #0
 8004a22:	dc38      	bgt.n	8004a96 <print_e+0xd6>
 8004a24:	1e51      	subs	r1, r2, #1
 8004a26:	2900      	cmp	r1, #0
 8004a28:	bfb8      	it	lt
 8004a2a:	f1c2 0201 	rsblt	r2, r2, #1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	9105      	str	r1, [sp, #20]
 8004a32:	bfac      	ite	ge
 8004a34:	222b      	movge	r2, #43	; 0x2b
 8004a36:	9205      	strlt	r2, [sp, #20]
 8004a38:	f800 6b02 	strb.w	r6, [r0], #2
 8004a3c:	bfa8      	it	ge
 8004a3e:	705a      	strbge	r2, [r3, #1]
 8004a40:	9a05      	ldr	r2, [sp, #20]
 8004a42:	bfbc      	itt	lt
 8004a44:	212d      	movlt	r1, #45	; 0x2d
 8004a46:	7059      	strblt	r1, [r3, #1]
 8004a48:	2a63      	cmp	r2, #99	; 0x63
 8004a4a:	dd0b      	ble.n	8004a64 <print_e+0xa4>
 8004a4c:	2164      	movs	r1, #100	; 0x64
 8004a4e:	fb92 f1f1 	sdiv	r1, r2, r1
 8004a52:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8004a56:	1cd8      	adds	r0, r3, #3
 8004a58:	709c      	strb	r4, [r3, #2]
 8004a5a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004a5e:	fb03 2201 	mla	r2, r3, r1, r2
 8004a62:	9205      	str	r2, [sp, #20]
 8004a64:	9b05      	ldr	r3, [sp, #20]
 8004a66:	220a      	movs	r2, #10
 8004a68:	fb93 f2f2 	sdiv	r2, r3, r2
 8004a6c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8004a70:	7001      	strb	r1, [r0, #0]
 8004a72:	f06f 0109 	mvn.w	r1, #9
 8004a76:	fb01 3302 	mla	r3, r1, r2, r3
 8004a7a:	3330      	adds	r3, #48	; 0x30
 8004a7c:	7043      	strb	r3, [r0, #1]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	7083      	strb	r3, [r0, #2]
 8004a82:	e7b8      	b.n	80049f6 <print_e+0x36>
 8004a84:	b10d      	cbz	r5, 8004a8a <print_e+0xca>
 8004a86:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8a:	7805      	ldrb	r5, [r0, #0]
 8004a8c:	f803 5b01 	strb.w	r5, [r3], #1
 8004a90:	3c01      	subs	r4, #1
 8004a92:	2500      	movs	r5, #0
 8004a94:	e7b9      	b.n	8004a0a <print_e+0x4a>
 8004a96:	b10d      	cbz	r5, 8004a9c <print_e+0xdc>
 8004a98:	f803 1b01 	strb.w	r1, [r3], #1
 8004a9c:	f803 0b01 	strb.w	r0, [r3], #1
 8004aa0:	3c01      	subs	r4, #1
 8004aa2:	2500      	movs	r5, #0
 8004aa4:	e7bc      	b.n	8004a20 <print_e+0x60>
 8004aa6:	2665      	movs	r6, #101	; 0x65
 8004aa8:	e7bc      	b.n	8004a24 <print_e+0x64>
 8004aaa:	2645      	movs	r6, #69	; 0x45
 8004aac:	e7ba      	b.n	8004a24 <print_e+0x64>
	...

08004ab0 <_gcvt>:
 8004ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab4:	ec55 4b10 	vmov	r4, r5, d0
 8004ab8:	b088      	sub	sp, #32
 8004aba:	4681      	mov	r9, r0
 8004abc:	4688      	mov	r8, r1
 8004abe:	4616      	mov	r6, r2
 8004ac0:	469a      	mov	sl, r3
 8004ac2:	ee10 0a10 	vmov	r0, s0
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2300      	movs	r3, #0
 8004aca:	4629      	mov	r1, r5
 8004acc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004ace:	f7fb fffd 	bl	8000acc <__aeabi_dcmplt>
 8004ad2:	b110      	cbz	r0, 8004ada <_gcvt+0x2a>
 8004ad4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004ad8:	461d      	mov	r5, r3
 8004ada:	2200      	movs	r2, #0
 8004adc:	2300      	movs	r3, #0
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f7fb ffe9 	bl	8000ab8 <__aeabi_dcmpeq>
 8004ae6:	b138      	cbz	r0, 8004af8 <_gcvt+0x48>
 8004ae8:	2330      	movs	r3, #48	; 0x30
 8004aea:	7033      	strb	r3, [r6, #0]
 8004aec:	2300      	movs	r3, #0
 8004aee:	7073      	strb	r3, [r6, #1]
 8004af0:	4630      	mov	r0, r6
 8004af2:	b008      	add	sp, #32
 8004af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af8:	a34b      	add	r3, pc, #300	; (adr r3, 8004c28 <_gcvt+0x178>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	4620      	mov	r0, r4
 8004b00:	4629      	mov	r1, r5
 8004b02:	f7fb ffed 	bl	8000ae0 <__aeabi_dcmple>
 8004b06:	b158      	cbz	r0, 8004b20 <_gcvt+0x70>
 8004b08:	f108 31ff 	add.w	r1, r8, #4294967295
 8004b0c:	9100      	str	r1, [sp, #0]
 8004b0e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8004b12:	4622      	mov	r2, r4
 8004b14:	462b      	mov	r3, r5
 8004b16:	4631      	mov	r1, r6
 8004b18:	4648      	mov	r0, r9
 8004b1a:	f7ff ff51 	bl	80049c0 <print_e>
 8004b1e:	e7e7      	b.n	8004af0 <_gcvt+0x40>
 8004b20:	4640      	mov	r0, r8
 8004b22:	f000 fc09 	bl	8005338 <_mprec_log10>
 8004b26:	4622      	mov	r2, r4
 8004b28:	ec51 0b10 	vmov	r0, r1, d0
 8004b2c:	462b      	mov	r3, r5
 8004b2e:	f7fb ffd7 	bl	8000ae0 <__aeabi_dcmple>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d1e8      	bne.n	8004b08 <_gcvt+0x58>
 8004b36:	ab07      	add	r3, sp, #28
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	ab06      	add	r3, sp, #24
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	4642      	mov	r2, r8
 8004b40:	ab05      	add	r3, sp, #20
 8004b42:	ec45 4b10 	vmov	d0, r4, r5
 8004b46:	2102      	movs	r1, #2
 8004b48:	4648      	mov	r0, r9
 8004b4a:	f000 fd81 	bl	8005650 <_dtoa_r>
 8004b4e:	9a05      	ldr	r2, [sp, #20]
 8004b50:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d00e      	beq.n	8004b76 <_gcvt+0xc6>
 8004b58:	4633      	mov	r3, r6
 8004b5a:	44b0      	add	r8, r6
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004b62:	9c05      	ldr	r4, [sp, #20]
 8004b64:	eba8 0203 	sub.w	r2, r8, r3
 8004b68:	b109      	cbz	r1, 8004b6e <_gcvt+0xbe>
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	dc08      	bgt.n	8004b80 <_gcvt+0xd0>
 8004b6e:	2100      	movs	r1, #0
 8004b70:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8004b74:	e00d      	b.n	8004b92 <_gcvt+0xe2>
 8004b76:	4601      	mov	r1, r0
 8004b78:	4630      	mov	r0, r6
 8004b7a:	f000 fcb5 	bl	80054e8 <strcpy>
 8004b7e:	e7b7      	b.n	8004af0 <_gcvt+0x40>
 8004b80:	3c01      	subs	r4, #1
 8004b82:	f803 1b01 	strb.w	r1, [r3], #1
 8004b86:	9405      	str	r4, [sp, #20]
 8004b88:	e7e8      	b.n	8004b5c <_gcvt+0xac>
 8004b8a:	f803 cb01 	strb.w	ip, [r3], #1
 8004b8e:	3a01      	subs	r2, #1
 8004b90:	2101      	movs	r1, #1
 8004b92:	2c00      	cmp	r4, #0
 8004b94:	4620      	mov	r0, r4
 8004b96:	dc2a      	bgt.n	8004bee <_gcvt+0x13e>
 8004b98:	b101      	cbz	r1, 8004b9c <_gcvt+0xec>
 8004b9a:	9405      	str	r4, [sp, #20]
 8004b9c:	b90f      	cbnz	r7, 8004ba2 <_gcvt+0xf2>
 8004b9e:	7829      	ldrb	r1, [r5, #0]
 8004ba0:	b311      	cbz	r1, 8004be8 <_gcvt+0x138>
 8004ba2:	42b3      	cmp	r3, r6
 8004ba4:	bf04      	itt	eq
 8004ba6:	2130      	moveq	r1, #48	; 0x30
 8004ba8:	f803 1b01 	strbeq.w	r1, [r3], #1
 8004bac:	212e      	movs	r1, #46	; 0x2e
 8004bae:	7019      	strb	r1, [r3, #0]
 8004bb0:	9905      	ldr	r1, [sp, #20]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	2400      	movs	r4, #0
 8004bb6:	eba1 0c03 	sub.w	ip, r1, r3
 8004bba:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8004bbe:	eb1c 0f00 	cmn.w	ip, r0
 8004bc2:	d41c      	bmi.n	8004bfe <_gcvt+0x14e>
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	f1c1 0000 	rsb	r0, r1, #0
 8004bca:	bfc8      	it	gt
 8004bcc:	2000      	movgt	r0, #0
 8004bce:	f100 0c01 	add.w	ip, r0, #1
 8004bd2:	4463      	add	r3, ip
 8004bd4:	4401      	add	r1, r0
 8004bd6:	b104      	cbz	r4, 8004bda <_gcvt+0x12a>
 8004bd8:	9105      	str	r1, [sp, #20]
 8004bda:	1e69      	subs	r1, r5, #1
 8004bdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004be0:	b108      	cbz	r0, 8004be6 <_gcvt+0x136>
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	dc0f      	bgt.n	8004c06 <_gcvt+0x156>
 8004be6:	b9df      	cbnz	r7, 8004c20 <_gcvt+0x170>
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	e780      	b.n	8004af0 <_gcvt+0x40>
 8004bee:	2a00      	cmp	r2, #0
 8004bf0:	f104 34ff 	add.w	r4, r4, #4294967295
 8004bf4:	dcc9      	bgt.n	8004b8a <_gcvt+0xda>
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	d0d0      	beq.n	8004b9c <_gcvt+0xec>
 8004bfa:	9005      	str	r0, [sp, #20]
 8004bfc:	e7ce      	b.n	8004b9c <_gcvt+0xec>
 8004bfe:	f800 ef01 	strb.w	lr, [r0, #1]!
 8004c02:	2401      	movs	r4, #1
 8004c04:	e7db      	b.n	8004bbe <_gcvt+0x10e>
 8004c06:	f803 0b01 	strb.w	r0, [r3], #1
 8004c0a:	3a01      	subs	r2, #1
 8004c0c:	e7e6      	b.n	8004bdc <_gcvt+0x12c>
 8004c0e:	f801 5b01 	strb.w	r5, [r1], #1
 8004c12:	1a60      	subs	r0, r4, r1
 8004c14:	2800      	cmp	r0, #0
 8004c16:	dcfa      	bgt.n	8004c0e <_gcvt+0x15e>
 8004c18:	2a00      	cmp	r2, #0
 8004c1a:	bfa8      	it	ge
 8004c1c:	189b      	addge	r3, r3, r2
 8004c1e:	e7e3      	b.n	8004be8 <_gcvt+0x138>
 8004c20:	4619      	mov	r1, r3
 8004c22:	189c      	adds	r4, r3, r2
 8004c24:	2530      	movs	r5, #48	; 0x30
 8004c26:	e7f4      	b.n	8004c12 <_gcvt+0x162>
 8004c28:	eb1c432d 	.word	0xeb1c432d
 8004c2c:	3f1a36e2 	.word	0x3f1a36e2

08004c30 <_Balloc>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c34:	4604      	mov	r4, r0
 8004c36:	460d      	mov	r5, r1
 8004c38:	b976      	cbnz	r6, 8004c58 <_Balloc+0x28>
 8004c3a:	2010      	movs	r0, #16
 8004c3c:	f001 fb08 	bl	8006250 <malloc>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6260      	str	r0, [r4, #36]	; 0x24
 8004c44:	b920      	cbnz	r0, 8004c50 <_Balloc+0x20>
 8004c46:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <_Balloc+0x78>)
 8004c48:	4818      	ldr	r0, [pc, #96]	; (8004cac <_Balloc+0x7c>)
 8004c4a:	2166      	movs	r1, #102	; 0x66
 8004c4c:	f000 fc54 	bl	80054f8 <__assert_func>
 8004c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c54:	6006      	str	r6, [r0, #0]
 8004c56:	60c6      	str	r6, [r0, #12]
 8004c58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c5a:	68f3      	ldr	r3, [r6, #12]
 8004c5c:	b183      	cbz	r3, 8004c80 <_Balloc+0x50>
 8004c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c66:	b9b8      	cbnz	r0, 8004c98 <_Balloc+0x68>
 8004c68:	2101      	movs	r1, #1
 8004c6a:	fa01 f605 	lsl.w	r6, r1, r5
 8004c6e:	1d72      	adds	r2, r6, #5
 8004c70:	0092      	lsls	r2, r2, #2
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 fb7e 	bl	8005374 <_calloc_r>
 8004c78:	b160      	cbz	r0, 8004c94 <_Balloc+0x64>
 8004c7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004c7e:	e00e      	b.n	8004c9e <_Balloc+0x6e>
 8004c80:	2221      	movs	r2, #33	; 0x21
 8004c82:	2104      	movs	r1, #4
 8004c84:	4620      	mov	r0, r4
 8004c86:	f000 fb75 	bl	8005374 <_calloc_r>
 8004c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c8c:	60f0      	str	r0, [r6, #12]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e4      	bne.n	8004c5e <_Balloc+0x2e>
 8004c94:	2000      	movs	r0, #0
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	6802      	ldr	r2, [r0, #0]
 8004c9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ca4:	e7f7      	b.n	8004c96 <_Balloc+0x66>
 8004ca6:	bf00      	nop
 8004ca8:	08007204 	.word	0x08007204
 8004cac:	0800721b 	.word	0x0800721b

08004cb0 <_Bfree>:
 8004cb0:	b570      	push	{r4, r5, r6, lr}
 8004cb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	b976      	cbnz	r6, 8004cd8 <_Bfree+0x28>
 8004cba:	2010      	movs	r0, #16
 8004cbc:	f001 fac8 	bl	8006250 <malloc>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6268      	str	r0, [r5, #36]	; 0x24
 8004cc4:	b920      	cbnz	r0, 8004cd0 <_Bfree+0x20>
 8004cc6:	4b09      	ldr	r3, [pc, #36]	; (8004cec <_Bfree+0x3c>)
 8004cc8:	4809      	ldr	r0, [pc, #36]	; (8004cf0 <_Bfree+0x40>)
 8004cca:	218a      	movs	r1, #138	; 0x8a
 8004ccc:	f000 fc14 	bl	80054f8 <__assert_func>
 8004cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004cd4:	6006      	str	r6, [r0, #0]
 8004cd6:	60c6      	str	r6, [r0, #12]
 8004cd8:	b13c      	cbz	r4, 8004cea <_Bfree+0x3a>
 8004cda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cdc:	6862      	ldr	r2, [r4, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ce4:	6021      	str	r1, [r4, #0]
 8004ce6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	08007204 	.word	0x08007204
 8004cf0:	0800721b 	.word	0x0800721b

08004cf4 <__multadd>:
 8004cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf8:	690d      	ldr	r5, [r1, #16]
 8004cfa:	4607      	mov	r7, r0
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	461e      	mov	r6, r3
 8004d00:	f101 0c14 	add.w	ip, r1, #20
 8004d04:	2000      	movs	r0, #0
 8004d06:	f8dc 3000 	ldr.w	r3, [ip]
 8004d0a:	b299      	uxth	r1, r3
 8004d0c:	fb02 6101 	mla	r1, r2, r1, r6
 8004d10:	0c1e      	lsrs	r6, r3, #16
 8004d12:	0c0b      	lsrs	r3, r1, #16
 8004d14:	fb02 3306 	mla	r3, r2, r6, r3
 8004d18:	b289      	uxth	r1, r1
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004d20:	4285      	cmp	r5, r0
 8004d22:	f84c 1b04 	str.w	r1, [ip], #4
 8004d26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004d2a:	dcec      	bgt.n	8004d06 <__multadd+0x12>
 8004d2c:	b30e      	cbz	r6, 8004d72 <__multadd+0x7e>
 8004d2e:	68a3      	ldr	r3, [r4, #8]
 8004d30:	42ab      	cmp	r3, r5
 8004d32:	dc19      	bgt.n	8004d68 <__multadd+0x74>
 8004d34:	6861      	ldr	r1, [r4, #4]
 8004d36:	4638      	mov	r0, r7
 8004d38:	3101      	adds	r1, #1
 8004d3a:	f7ff ff79 	bl	8004c30 <_Balloc>
 8004d3e:	4680      	mov	r8, r0
 8004d40:	b928      	cbnz	r0, 8004d4e <__multadd+0x5a>
 8004d42:	4602      	mov	r2, r0
 8004d44:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <__multadd+0x84>)
 8004d46:	480d      	ldr	r0, [pc, #52]	; (8004d7c <__multadd+0x88>)
 8004d48:	21b5      	movs	r1, #181	; 0xb5
 8004d4a:	f000 fbd5 	bl	80054f8 <__assert_func>
 8004d4e:	6922      	ldr	r2, [r4, #16]
 8004d50:	3202      	adds	r2, #2
 8004d52:	f104 010c 	add.w	r1, r4, #12
 8004d56:	0092      	lsls	r2, r2, #2
 8004d58:	300c      	adds	r0, #12
 8004d5a:	f001 fa81 	bl	8006260 <memcpy>
 8004d5e:	4621      	mov	r1, r4
 8004d60:	4638      	mov	r0, r7
 8004d62:	f7ff ffa5 	bl	8004cb0 <_Bfree>
 8004d66:	4644      	mov	r4, r8
 8004d68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	615e      	str	r6, [r3, #20]
 8004d70:	6125      	str	r5, [r4, #16]
 8004d72:	4620      	mov	r0, r4
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d78:	08007277 	.word	0x08007277
 8004d7c:	0800721b 	.word	0x0800721b

08004d80 <__hi0bits>:
 8004d80:	0c03      	lsrs	r3, r0, #16
 8004d82:	041b      	lsls	r3, r3, #16
 8004d84:	b9d3      	cbnz	r3, 8004dbc <__hi0bits+0x3c>
 8004d86:	0400      	lsls	r0, r0, #16
 8004d88:	2310      	movs	r3, #16
 8004d8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004d8e:	bf04      	itt	eq
 8004d90:	0200      	lsleq	r0, r0, #8
 8004d92:	3308      	addeq	r3, #8
 8004d94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004d98:	bf04      	itt	eq
 8004d9a:	0100      	lsleq	r0, r0, #4
 8004d9c:	3304      	addeq	r3, #4
 8004d9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004da2:	bf04      	itt	eq
 8004da4:	0080      	lsleq	r0, r0, #2
 8004da6:	3302      	addeq	r3, #2
 8004da8:	2800      	cmp	r0, #0
 8004daa:	db05      	blt.n	8004db8 <__hi0bits+0x38>
 8004dac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004db0:	f103 0301 	add.w	r3, r3, #1
 8004db4:	bf08      	it	eq
 8004db6:	2320      	moveq	r3, #32
 8004db8:	4618      	mov	r0, r3
 8004dba:	4770      	bx	lr
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e7e4      	b.n	8004d8a <__hi0bits+0xa>

08004dc0 <__lo0bits>:
 8004dc0:	6803      	ldr	r3, [r0, #0]
 8004dc2:	f013 0207 	ands.w	r2, r3, #7
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	d00b      	beq.n	8004de2 <__lo0bits+0x22>
 8004dca:	07da      	lsls	r2, r3, #31
 8004dcc:	d423      	bmi.n	8004e16 <__lo0bits+0x56>
 8004dce:	0798      	lsls	r0, r3, #30
 8004dd0:	bf49      	itett	mi
 8004dd2:	085b      	lsrmi	r3, r3, #1
 8004dd4:	089b      	lsrpl	r3, r3, #2
 8004dd6:	2001      	movmi	r0, #1
 8004dd8:	600b      	strmi	r3, [r1, #0]
 8004dda:	bf5c      	itt	pl
 8004ddc:	600b      	strpl	r3, [r1, #0]
 8004dde:	2002      	movpl	r0, #2
 8004de0:	4770      	bx	lr
 8004de2:	b298      	uxth	r0, r3
 8004de4:	b9a8      	cbnz	r0, 8004e12 <__lo0bits+0x52>
 8004de6:	0c1b      	lsrs	r3, r3, #16
 8004de8:	2010      	movs	r0, #16
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	b90a      	cbnz	r2, 8004df2 <__lo0bits+0x32>
 8004dee:	3008      	adds	r0, #8
 8004df0:	0a1b      	lsrs	r3, r3, #8
 8004df2:	071a      	lsls	r2, r3, #28
 8004df4:	bf04      	itt	eq
 8004df6:	091b      	lsreq	r3, r3, #4
 8004df8:	3004      	addeq	r0, #4
 8004dfa:	079a      	lsls	r2, r3, #30
 8004dfc:	bf04      	itt	eq
 8004dfe:	089b      	lsreq	r3, r3, #2
 8004e00:	3002      	addeq	r0, #2
 8004e02:	07da      	lsls	r2, r3, #31
 8004e04:	d403      	bmi.n	8004e0e <__lo0bits+0x4e>
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	f100 0001 	add.w	r0, r0, #1
 8004e0c:	d005      	beq.n	8004e1a <__lo0bits+0x5a>
 8004e0e:	600b      	str	r3, [r1, #0]
 8004e10:	4770      	bx	lr
 8004e12:	4610      	mov	r0, r2
 8004e14:	e7e9      	b.n	8004dea <__lo0bits+0x2a>
 8004e16:	2000      	movs	r0, #0
 8004e18:	4770      	bx	lr
 8004e1a:	2020      	movs	r0, #32
 8004e1c:	4770      	bx	lr
	...

08004e20 <__i2b>:
 8004e20:	b510      	push	{r4, lr}
 8004e22:	460c      	mov	r4, r1
 8004e24:	2101      	movs	r1, #1
 8004e26:	f7ff ff03 	bl	8004c30 <_Balloc>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	b928      	cbnz	r0, 8004e3a <__i2b+0x1a>
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <__i2b+0x24>)
 8004e30:	4805      	ldr	r0, [pc, #20]	; (8004e48 <__i2b+0x28>)
 8004e32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e36:	f000 fb5f 	bl	80054f8 <__assert_func>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	6144      	str	r4, [r0, #20]
 8004e3e:	6103      	str	r3, [r0, #16]
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	bf00      	nop
 8004e44:	08007277 	.word	0x08007277
 8004e48:	0800721b 	.word	0x0800721b

08004e4c <__multiply>:
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	4691      	mov	r9, r2
 8004e52:	690a      	ldr	r2, [r1, #16]
 8004e54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	bfb8      	it	lt
 8004e5c:	460b      	movlt	r3, r1
 8004e5e:	460c      	mov	r4, r1
 8004e60:	bfbc      	itt	lt
 8004e62:	464c      	movlt	r4, r9
 8004e64:	4699      	movlt	r9, r3
 8004e66:	6927      	ldr	r7, [r4, #16]
 8004e68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004e6c:	68a3      	ldr	r3, [r4, #8]
 8004e6e:	6861      	ldr	r1, [r4, #4]
 8004e70:	eb07 060a 	add.w	r6, r7, sl
 8004e74:	42b3      	cmp	r3, r6
 8004e76:	b085      	sub	sp, #20
 8004e78:	bfb8      	it	lt
 8004e7a:	3101      	addlt	r1, #1
 8004e7c:	f7ff fed8 	bl	8004c30 <_Balloc>
 8004e80:	b930      	cbnz	r0, 8004e90 <__multiply+0x44>
 8004e82:	4602      	mov	r2, r0
 8004e84:	4b44      	ldr	r3, [pc, #272]	; (8004f98 <__multiply+0x14c>)
 8004e86:	4845      	ldr	r0, [pc, #276]	; (8004f9c <__multiply+0x150>)
 8004e88:	f240 115d 	movw	r1, #349	; 0x15d
 8004e8c:	f000 fb34 	bl	80054f8 <__assert_func>
 8004e90:	f100 0514 	add.w	r5, r0, #20
 8004e94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004e98:	462b      	mov	r3, r5
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4543      	cmp	r3, r8
 8004e9e:	d321      	bcc.n	8004ee4 <__multiply+0x98>
 8004ea0:	f104 0314 	add.w	r3, r4, #20
 8004ea4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ea8:	f109 0314 	add.w	r3, r9, #20
 8004eac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004eb0:	9202      	str	r2, [sp, #8]
 8004eb2:	1b3a      	subs	r2, r7, r4
 8004eb4:	3a15      	subs	r2, #21
 8004eb6:	f022 0203 	bic.w	r2, r2, #3
 8004eba:	3204      	adds	r2, #4
 8004ebc:	f104 0115 	add.w	r1, r4, #21
 8004ec0:	428f      	cmp	r7, r1
 8004ec2:	bf38      	it	cc
 8004ec4:	2204      	movcc	r2, #4
 8004ec6:	9201      	str	r2, [sp, #4]
 8004ec8:	9a02      	ldr	r2, [sp, #8]
 8004eca:	9303      	str	r3, [sp, #12]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d80c      	bhi.n	8004eea <__multiply+0x9e>
 8004ed0:	2e00      	cmp	r6, #0
 8004ed2:	dd03      	ble.n	8004edc <__multiply+0x90>
 8004ed4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d05a      	beq.n	8004f92 <__multiply+0x146>
 8004edc:	6106      	str	r6, [r0, #16]
 8004ede:	b005      	add	sp, #20
 8004ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee4:	f843 2b04 	str.w	r2, [r3], #4
 8004ee8:	e7d8      	b.n	8004e9c <__multiply+0x50>
 8004eea:	f8b3 a000 	ldrh.w	sl, [r3]
 8004eee:	f1ba 0f00 	cmp.w	sl, #0
 8004ef2:	d024      	beq.n	8004f3e <__multiply+0xf2>
 8004ef4:	f104 0e14 	add.w	lr, r4, #20
 8004ef8:	46a9      	mov	r9, r5
 8004efa:	f04f 0c00 	mov.w	ip, #0
 8004efe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004f02:	f8d9 1000 	ldr.w	r1, [r9]
 8004f06:	fa1f fb82 	uxth.w	fp, r2
 8004f0a:	b289      	uxth	r1, r1
 8004f0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004f10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004f14:	f8d9 2000 	ldr.w	r2, [r9]
 8004f18:	4461      	add	r1, ip
 8004f1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004f1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004f22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004f26:	b289      	uxth	r1, r1
 8004f28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004f2c:	4577      	cmp	r7, lr
 8004f2e:	f849 1b04 	str.w	r1, [r9], #4
 8004f32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004f36:	d8e2      	bhi.n	8004efe <__multiply+0xb2>
 8004f38:	9a01      	ldr	r2, [sp, #4]
 8004f3a:	f845 c002 	str.w	ip, [r5, r2]
 8004f3e:	9a03      	ldr	r2, [sp, #12]
 8004f40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004f44:	3304      	adds	r3, #4
 8004f46:	f1b9 0f00 	cmp.w	r9, #0
 8004f4a:	d020      	beq.n	8004f8e <__multiply+0x142>
 8004f4c:	6829      	ldr	r1, [r5, #0]
 8004f4e:	f104 0c14 	add.w	ip, r4, #20
 8004f52:	46ae      	mov	lr, r5
 8004f54:	f04f 0a00 	mov.w	sl, #0
 8004f58:	f8bc b000 	ldrh.w	fp, [ip]
 8004f5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004f60:	fb09 220b 	mla	r2, r9, fp, r2
 8004f64:	4492      	add	sl, r2
 8004f66:	b289      	uxth	r1, r1
 8004f68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004f6c:	f84e 1b04 	str.w	r1, [lr], #4
 8004f70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004f74:	f8be 1000 	ldrh.w	r1, [lr]
 8004f78:	0c12      	lsrs	r2, r2, #16
 8004f7a:	fb09 1102 	mla	r1, r9, r2, r1
 8004f7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004f82:	4567      	cmp	r7, ip
 8004f84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f88:	d8e6      	bhi.n	8004f58 <__multiply+0x10c>
 8004f8a:	9a01      	ldr	r2, [sp, #4]
 8004f8c:	50a9      	str	r1, [r5, r2]
 8004f8e:	3504      	adds	r5, #4
 8004f90:	e79a      	b.n	8004ec8 <__multiply+0x7c>
 8004f92:	3e01      	subs	r6, #1
 8004f94:	e79c      	b.n	8004ed0 <__multiply+0x84>
 8004f96:	bf00      	nop
 8004f98:	08007277 	.word	0x08007277
 8004f9c:	0800721b 	.word	0x0800721b

08004fa0 <__pow5mult>:
 8004fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa4:	4615      	mov	r5, r2
 8004fa6:	f012 0203 	ands.w	r2, r2, #3
 8004faa:	4606      	mov	r6, r0
 8004fac:	460f      	mov	r7, r1
 8004fae:	d007      	beq.n	8004fc0 <__pow5mult+0x20>
 8004fb0:	4c25      	ldr	r4, [pc, #148]	; (8005048 <__pow5mult+0xa8>)
 8004fb2:	3a01      	subs	r2, #1
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004fba:	f7ff fe9b 	bl	8004cf4 <__multadd>
 8004fbe:	4607      	mov	r7, r0
 8004fc0:	10ad      	asrs	r5, r5, #2
 8004fc2:	d03d      	beq.n	8005040 <__pow5mult+0xa0>
 8004fc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004fc6:	b97c      	cbnz	r4, 8004fe8 <__pow5mult+0x48>
 8004fc8:	2010      	movs	r0, #16
 8004fca:	f001 f941 	bl	8006250 <malloc>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	6270      	str	r0, [r6, #36]	; 0x24
 8004fd2:	b928      	cbnz	r0, 8004fe0 <__pow5mult+0x40>
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	; (800504c <__pow5mult+0xac>)
 8004fd6:	481e      	ldr	r0, [pc, #120]	; (8005050 <__pow5mult+0xb0>)
 8004fd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004fdc:	f000 fa8c 	bl	80054f8 <__assert_func>
 8004fe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fe4:	6004      	str	r4, [r0, #0]
 8004fe6:	60c4      	str	r4, [r0, #12]
 8004fe8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004fec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ff0:	b94c      	cbnz	r4, 8005006 <__pow5mult+0x66>
 8004ff2:	f240 2171 	movw	r1, #625	; 0x271
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f7ff ff12 	bl	8004e20 <__i2b>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f8c8 0008 	str.w	r0, [r8, #8]
 8005002:	4604      	mov	r4, r0
 8005004:	6003      	str	r3, [r0, #0]
 8005006:	f04f 0900 	mov.w	r9, #0
 800500a:	07eb      	lsls	r3, r5, #31
 800500c:	d50a      	bpl.n	8005024 <__pow5mult+0x84>
 800500e:	4639      	mov	r1, r7
 8005010:	4622      	mov	r2, r4
 8005012:	4630      	mov	r0, r6
 8005014:	f7ff ff1a 	bl	8004e4c <__multiply>
 8005018:	4639      	mov	r1, r7
 800501a:	4680      	mov	r8, r0
 800501c:	4630      	mov	r0, r6
 800501e:	f7ff fe47 	bl	8004cb0 <_Bfree>
 8005022:	4647      	mov	r7, r8
 8005024:	106d      	asrs	r5, r5, #1
 8005026:	d00b      	beq.n	8005040 <__pow5mult+0xa0>
 8005028:	6820      	ldr	r0, [r4, #0]
 800502a:	b938      	cbnz	r0, 800503c <__pow5mult+0x9c>
 800502c:	4622      	mov	r2, r4
 800502e:	4621      	mov	r1, r4
 8005030:	4630      	mov	r0, r6
 8005032:	f7ff ff0b 	bl	8004e4c <__multiply>
 8005036:	6020      	str	r0, [r4, #0]
 8005038:	f8c0 9000 	str.w	r9, [r0]
 800503c:	4604      	mov	r4, r0
 800503e:	e7e4      	b.n	800500a <__pow5mult+0x6a>
 8005040:	4638      	mov	r0, r7
 8005042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005046:	bf00      	nop
 8005048:	08007378 	.word	0x08007378
 800504c:	08007204 	.word	0x08007204
 8005050:	0800721b 	.word	0x0800721b

08005054 <__lshift>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	460c      	mov	r4, r1
 800505a:	6849      	ldr	r1, [r1, #4]
 800505c:	6923      	ldr	r3, [r4, #16]
 800505e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005062:	68a3      	ldr	r3, [r4, #8]
 8005064:	4607      	mov	r7, r0
 8005066:	4691      	mov	r9, r2
 8005068:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800506c:	f108 0601 	add.w	r6, r8, #1
 8005070:	42b3      	cmp	r3, r6
 8005072:	db0b      	blt.n	800508c <__lshift+0x38>
 8005074:	4638      	mov	r0, r7
 8005076:	f7ff fddb 	bl	8004c30 <_Balloc>
 800507a:	4605      	mov	r5, r0
 800507c:	b948      	cbnz	r0, 8005092 <__lshift+0x3e>
 800507e:	4602      	mov	r2, r0
 8005080:	4b2a      	ldr	r3, [pc, #168]	; (800512c <__lshift+0xd8>)
 8005082:	482b      	ldr	r0, [pc, #172]	; (8005130 <__lshift+0xdc>)
 8005084:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005088:	f000 fa36 	bl	80054f8 <__assert_func>
 800508c:	3101      	adds	r1, #1
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	e7ee      	b.n	8005070 <__lshift+0x1c>
 8005092:	2300      	movs	r3, #0
 8005094:	f100 0114 	add.w	r1, r0, #20
 8005098:	f100 0210 	add.w	r2, r0, #16
 800509c:	4618      	mov	r0, r3
 800509e:	4553      	cmp	r3, sl
 80050a0:	db37      	blt.n	8005112 <__lshift+0xbe>
 80050a2:	6920      	ldr	r0, [r4, #16]
 80050a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050a8:	f104 0314 	add.w	r3, r4, #20
 80050ac:	f019 091f 	ands.w	r9, r9, #31
 80050b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80050b8:	d02f      	beq.n	800511a <__lshift+0xc6>
 80050ba:	f1c9 0e20 	rsb	lr, r9, #32
 80050be:	468a      	mov	sl, r1
 80050c0:	f04f 0c00 	mov.w	ip, #0
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	fa02 f209 	lsl.w	r2, r2, r9
 80050ca:	ea42 020c 	orr.w	r2, r2, ip
 80050ce:	f84a 2b04 	str.w	r2, [sl], #4
 80050d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80050d6:	4298      	cmp	r0, r3
 80050d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80050dc:	d8f2      	bhi.n	80050c4 <__lshift+0x70>
 80050de:	1b03      	subs	r3, r0, r4
 80050e0:	3b15      	subs	r3, #21
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	3304      	adds	r3, #4
 80050e8:	f104 0215 	add.w	r2, r4, #21
 80050ec:	4290      	cmp	r0, r2
 80050ee:	bf38      	it	cc
 80050f0:	2304      	movcc	r3, #4
 80050f2:	f841 c003 	str.w	ip, [r1, r3]
 80050f6:	f1bc 0f00 	cmp.w	ip, #0
 80050fa:	d001      	beq.n	8005100 <__lshift+0xac>
 80050fc:	f108 0602 	add.w	r6, r8, #2
 8005100:	3e01      	subs	r6, #1
 8005102:	4638      	mov	r0, r7
 8005104:	612e      	str	r6, [r5, #16]
 8005106:	4621      	mov	r1, r4
 8005108:	f7ff fdd2 	bl	8004cb0 <_Bfree>
 800510c:	4628      	mov	r0, r5
 800510e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005112:	f842 0f04 	str.w	r0, [r2, #4]!
 8005116:	3301      	adds	r3, #1
 8005118:	e7c1      	b.n	800509e <__lshift+0x4a>
 800511a:	3904      	subs	r1, #4
 800511c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005120:	f841 2f04 	str.w	r2, [r1, #4]!
 8005124:	4298      	cmp	r0, r3
 8005126:	d8f9      	bhi.n	800511c <__lshift+0xc8>
 8005128:	e7ea      	b.n	8005100 <__lshift+0xac>
 800512a:	bf00      	nop
 800512c:	08007277 	.word	0x08007277
 8005130:	0800721b 	.word	0x0800721b

08005134 <__mcmp>:
 8005134:	b530      	push	{r4, r5, lr}
 8005136:	6902      	ldr	r2, [r0, #16]
 8005138:	690c      	ldr	r4, [r1, #16]
 800513a:	1b12      	subs	r2, r2, r4
 800513c:	d10e      	bne.n	800515c <__mcmp+0x28>
 800513e:	f100 0314 	add.w	r3, r0, #20
 8005142:	3114      	adds	r1, #20
 8005144:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005148:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800514c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005150:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005154:	42a5      	cmp	r5, r4
 8005156:	d003      	beq.n	8005160 <__mcmp+0x2c>
 8005158:	d305      	bcc.n	8005166 <__mcmp+0x32>
 800515a:	2201      	movs	r2, #1
 800515c:	4610      	mov	r0, r2
 800515e:	bd30      	pop	{r4, r5, pc}
 8005160:	4283      	cmp	r3, r0
 8005162:	d3f3      	bcc.n	800514c <__mcmp+0x18>
 8005164:	e7fa      	b.n	800515c <__mcmp+0x28>
 8005166:	f04f 32ff 	mov.w	r2, #4294967295
 800516a:	e7f7      	b.n	800515c <__mcmp+0x28>

0800516c <__mdiff>:
 800516c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005170:	460c      	mov	r4, r1
 8005172:	4606      	mov	r6, r0
 8005174:	4611      	mov	r1, r2
 8005176:	4620      	mov	r0, r4
 8005178:	4690      	mov	r8, r2
 800517a:	f7ff ffdb 	bl	8005134 <__mcmp>
 800517e:	1e05      	subs	r5, r0, #0
 8005180:	d110      	bne.n	80051a4 <__mdiff+0x38>
 8005182:	4629      	mov	r1, r5
 8005184:	4630      	mov	r0, r6
 8005186:	f7ff fd53 	bl	8004c30 <_Balloc>
 800518a:	b930      	cbnz	r0, 800519a <__mdiff+0x2e>
 800518c:	4b3a      	ldr	r3, [pc, #232]	; (8005278 <__mdiff+0x10c>)
 800518e:	4602      	mov	r2, r0
 8005190:	f240 2132 	movw	r1, #562	; 0x232
 8005194:	4839      	ldr	r0, [pc, #228]	; (800527c <__mdiff+0x110>)
 8005196:	f000 f9af 	bl	80054f8 <__assert_func>
 800519a:	2301      	movs	r3, #1
 800519c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80051a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a4:	bfa4      	itt	ge
 80051a6:	4643      	movge	r3, r8
 80051a8:	46a0      	movge	r8, r4
 80051aa:	4630      	mov	r0, r6
 80051ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80051b0:	bfa6      	itte	ge
 80051b2:	461c      	movge	r4, r3
 80051b4:	2500      	movge	r5, #0
 80051b6:	2501      	movlt	r5, #1
 80051b8:	f7ff fd3a 	bl	8004c30 <_Balloc>
 80051bc:	b920      	cbnz	r0, 80051c8 <__mdiff+0x5c>
 80051be:	4b2e      	ldr	r3, [pc, #184]	; (8005278 <__mdiff+0x10c>)
 80051c0:	4602      	mov	r2, r0
 80051c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80051c6:	e7e5      	b.n	8005194 <__mdiff+0x28>
 80051c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80051cc:	6926      	ldr	r6, [r4, #16]
 80051ce:	60c5      	str	r5, [r0, #12]
 80051d0:	f104 0914 	add.w	r9, r4, #20
 80051d4:	f108 0514 	add.w	r5, r8, #20
 80051d8:	f100 0e14 	add.w	lr, r0, #20
 80051dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80051e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80051e4:	f108 0210 	add.w	r2, r8, #16
 80051e8:	46f2      	mov	sl, lr
 80051ea:	2100      	movs	r1, #0
 80051ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80051f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80051f4:	fa1f f883 	uxth.w	r8, r3
 80051f8:	fa11 f18b 	uxtah	r1, r1, fp
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	eba1 0808 	sub.w	r8, r1, r8
 8005202:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005206:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800520a:	fa1f f888 	uxth.w	r8, r8
 800520e:	1419      	asrs	r1, r3, #16
 8005210:	454e      	cmp	r6, r9
 8005212:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005216:	f84a 3b04 	str.w	r3, [sl], #4
 800521a:	d8e7      	bhi.n	80051ec <__mdiff+0x80>
 800521c:	1b33      	subs	r3, r6, r4
 800521e:	3b15      	subs	r3, #21
 8005220:	f023 0303 	bic.w	r3, r3, #3
 8005224:	3304      	adds	r3, #4
 8005226:	3415      	adds	r4, #21
 8005228:	42a6      	cmp	r6, r4
 800522a:	bf38      	it	cc
 800522c:	2304      	movcc	r3, #4
 800522e:	441d      	add	r5, r3
 8005230:	4473      	add	r3, lr
 8005232:	469e      	mov	lr, r3
 8005234:	462e      	mov	r6, r5
 8005236:	4566      	cmp	r6, ip
 8005238:	d30e      	bcc.n	8005258 <__mdiff+0xec>
 800523a:	f10c 0203 	add.w	r2, ip, #3
 800523e:	1b52      	subs	r2, r2, r5
 8005240:	f022 0203 	bic.w	r2, r2, #3
 8005244:	3d03      	subs	r5, #3
 8005246:	45ac      	cmp	ip, r5
 8005248:	bf38      	it	cc
 800524a:	2200      	movcc	r2, #0
 800524c:	441a      	add	r2, r3
 800524e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005252:	b17b      	cbz	r3, 8005274 <__mdiff+0x108>
 8005254:	6107      	str	r7, [r0, #16]
 8005256:	e7a3      	b.n	80051a0 <__mdiff+0x34>
 8005258:	f856 8b04 	ldr.w	r8, [r6], #4
 800525c:	fa11 f288 	uxtah	r2, r1, r8
 8005260:	1414      	asrs	r4, r2, #16
 8005262:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005266:	b292      	uxth	r2, r2
 8005268:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800526c:	f84e 2b04 	str.w	r2, [lr], #4
 8005270:	1421      	asrs	r1, r4, #16
 8005272:	e7e0      	b.n	8005236 <__mdiff+0xca>
 8005274:	3f01      	subs	r7, #1
 8005276:	e7ea      	b.n	800524e <__mdiff+0xe2>
 8005278:	08007277 	.word	0x08007277
 800527c:	0800721b 	.word	0x0800721b

08005280 <__d2b>:
 8005280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005284:	4689      	mov	r9, r1
 8005286:	2101      	movs	r1, #1
 8005288:	ec57 6b10 	vmov	r6, r7, d0
 800528c:	4690      	mov	r8, r2
 800528e:	f7ff fccf 	bl	8004c30 <_Balloc>
 8005292:	4604      	mov	r4, r0
 8005294:	b930      	cbnz	r0, 80052a4 <__d2b+0x24>
 8005296:	4602      	mov	r2, r0
 8005298:	4b25      	ldr	r3, [pc, #148]	; (8005330 <__d2b+0xb0>)
 800529a:	4826      	ldr	r0, [pc, #152]	; (8005334 <__d2b+0xb4>)
 800529c:	f240 310a 	movw	r1, #778	; 0x30a
 80052a0:	f000 f92a 	bl	80054f8 <__assert_func>
 80052a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80052a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052ac:	bb35      	cbnz	r5, 80052fc <__d2b+0x7c>
 80052ae:	2e00      	cmp	r6, #0
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	d028      	beq.n	8005306 <__d2b+0x86>
 80052b4:	4668      	mov	r0, sp
 80052b6:	9600      	str	r6, [sp, #0]
 80052b8:	f7ff fd82 	bl	8004dc0 <__lo0bits>
 80052bc:	9900      	ldr	r1, [sp, #0]
 80052be:	b300      	cbz	r0, 8005302 <__d2b+0x82>
 80052c0:	9a01      	ldr	r2, [sp, #4]
 80052c2:	f1c0 0320 	rsb	r3, r0, #32
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	430b      	orrs	r3, r1
 80052cc:	40c2      	lsrs	r2, r0
 80052ce:	6163      	str	r3, [r4, #20]
 80052d0:	9201      	str	r2, [sp, #4]
 80052d2:	9b01      	ldr	r3, [sp, #4]
 80052d4:	61a3      	str	r3, [r4, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bf14      	ite	ne
 80052da:	2202      	movne	r2, #2
 80052dc:	2201      	moveq	r2, #1
 80052de:	6122      	str	r2, [r4, #16]
 80052e0:	b1d5      	cbz	r5, 8005318 <__d2b+0x98>
 80052e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80052e6:	4405      	add	r5, r0
 80052e8:	f8c9 5000 	str.w	r5, [r9]
 80052ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80052f0:	f8c8 0000 	str.w	r0, [r8]
 80052f4:	4620      	mov	r0, r4
 80052f6:	b003      	add	sp, #12
 80052f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005300:	e7d5      	b.n	80052ae <__d2b+0x2e>
 8005302:	6161      	str	r1, [r4, #20]
 8005304:	e7e5      	b.n	80052d2 <__d2b+0x52>
 8005306:	a801      	add	r0, sp, #4
 8005308:	f7ff fd5a 	bl	8004dc0 <__lo0bits>
 800530c:	9b01      	ldr	r3, [sp, #4]
 800530e:	6163      	str	r3, [r4, #20]
 8005310:	2201      	movs	r2, #1
 8005312:	6122      	str	r2, [r4, #16]
 8005314:	3020      	adds	r0, #32
 8005316:	e7e3      	b.n	80052e0 <__d2b+0x60>
 8005318:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800531c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005320:	f8c9 0000 	str.w	r0, [r9]
 8005324:	6918      	ldr	r0, [r3, #16]
 8005326:	f7ff fd2b 	bl	8004d80 <__hi0bits>
 800532a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800532e:	e7df      	b.n	80052f0 <__d2b+0x70>
 8005330:	08007277 	.word	0x08007277
 8005334:	0800721b 	.word	0x0800721b

08005338 <_mprec_log10>:
 8005338:	2817      	cmp	r0, #23
 800533a:	b5d0      	push	{r4, r6, r7, lr}
 800533c:	4604      	mov	r4, r0
 800533e:	dc07      	bgt.n	8005350 <_mprec_log10+0x18>
 8005340:	4809      	ldr	r0, [pc, #36]	; (8005368 <_mprec_log10+0x30>)
 8005342:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005346:	e9d4 0100 	ldrd	r0, r1, [r4]
 800534a:	ec41 0b10 	vmov	d0, r0, r1
 800534e:	bdd0      	pop	{r4, r6, r7, pc}
 8005350:	4906      	ldr	r1, [pc, #24]	; (800536c <_mprec_log10+0x34>)
 8005352:	4f07      	ldr	r7, [pc, #28]	; (8005370 <_mprec_log10+0x38>)
 8005354:	2000      	movs	r0, #0
 8005356:	2600      	movs	r6, #0
 8005358:	4632      	mov	r2, r6
 800535a:	463b      	mov	r3, r7
 800535c:	f7fb f944 	bl	80005e8 <__aeabi_dmul>
 8005360:	3c01      	subs	r4, #1
 8005362:	d1f9      	bne.n	8005358 <_mprec_log10+0x20>
 8005364:	e7f1      	b.n	800534a <_mprec_log10+0x12>
 8005366:	bf00      	nop
 8005368:	080072b0 	.word	0x080072b0
 800536c:	3ff00000 	.word	0x3ff00000
 8005370:	40240000 	.word	0x40240000

08005374 <_calloc_r>:
 8005374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005376:	fba1 2402 	umull	r2, r4, r1, r2
 800537a:	b94c      	cbnz	r4, 8005390 <_calloc_r+0x1c>
 800537c:	4611      	mov	r1, r2
 800537e:	9201      	str	r2, [sp, #4]
 8005380:	f000 f82e 	bl	80053e0 <_malloc_r>
 8005384:	9a01      	ldr	r2, [sp, #4]
 8005386:	4605      	mov	r5, r0
 8005388:	b930      	cbnz	r0, 8005398 <_calloc_r+0x24>
 800538a:	4628      	mov	r0, r5
 800538c:	b003      	add	sp, #12
 800538e:	bd30      	pop	{r4, r5, pc}
 8005390:	220c      	movs	r2, #12
 8005392:	6002      	str	r2, [r0, #0]
 8005394:	2500      	movs	r5, #0
 8005396:	e7f8      	b.n	800538a <_calloc_r+0x16>
 8005398:	4621      	mov	r1, r4
 800539a:	f7ff fb09 	bl	80049b0 <memset>
 800539e:	e7f4      	b.n	800538a <_calloc_r+0x16>

080053a0 <sbrk_aligned>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	4e0e      	ldr	r6, [pc, #56]	; (80053dc <sbrk_aligned+0x3c>)
 80053a4:	460c      	mov	r4, r1
 80053a6:	6831      	ldr	r1, [r6, #0]
 80053a8:	4605      	mov	r5, r0
 80053aa:	b911      	cbnz	r1, 80053b2 <sbrk_aligned+0x12>
 80053ac:	f000 f88c 	bl	80054c8 <_sbrk_r>
 80053b0:	6030      	str	r0, [r6, #0]
 80053b2:	4621      	mov	r1, r4
 80053b4:	4628      	mov	r0, r5
 80053b6:	f000 f887 	bl	80054c8 <_sbrk_r>
 80053ba:	1c43      	adds	r3, r0, #1
 80053bc:	d00a      	beq.n	80053d4 <sbrk_aligned+0x34>
 80053be:	1cc4      	adds	r4, r0, #3
 80053c0:	f024 0403 	bic.w	r4, r4, #3
 80053c4:	42a0      	cmp	r0, r4
 80053c6:	d007      	beq.n	80053d8 <sbrk_aligned+0x38>
 80053c8:	1a21      	subs	r1, r4, r0
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 f87c 	bl	80054c8 <_sbrk_r>
 80053d0:	3001      	adds	r0, #1
 80053d2:	d101      	bne.n	80053d8 <sbrk_aligned+0x38>
 80053d4:	f04f 34ff 	mov.w	r4, #4294967295
 80053d8:	4620      	mov	r0, r4
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	20000150 	.word	0x20000150

080053e0 <_malloc_r>:
 80053e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e4:	1ccd      	adds	r5, r1, #3
 80053e6:	f025 0503 	bic.w	r5, r5, #3
 80053ea:	3508      	adds	r5, #8
 80053ec:	2d0c      	cmp	r5, #12
 80053ee:	bf38      	it	cc
 80053f0:	250c      	movcc	r5, #12
 80053f2:	2d00      	cmp	r5, #0
 80053f4:	4607      	mov	r7, r0
 80053f6:	db01      	blt.n	80053fc <_malloc_r+0x1c>
 80053f8:	42a9      	cmp	r1, r5
 80053fa:	d905      	bls.n	8005408 <_malloc_r+0x28>
 80053fc:	230c      	movs	r3, #12
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	2600      	movs	r6, #0
 8005402:	4630      	mov	r0, r6
 8005404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005408:	4e2e      	ldr	r6, [pc, #184]	; (80054c4 <_malloc_r+0xe4>)
 800540a:	f000 ff37 	bl	800627c <__malloc_lock>
 800540e:	6833      	ldr	r3, [r6, #0]
 8005410:	461c      	mov	r4, r3
 8005412:	bb34      	cbnz	r4, 8005462 <_malloc_r+0x82>
 8005414:	4629      	mov	r1, r5
 8005416:	4638      	mov	r0, r7
 8005418:	f7ff ffc2 	bl	80053a0 <sbrk_aligned>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	4604      	mov	r4, r0
 8005420:	d14d      	bne.n	80054be <_malloc_r+0xde>
 8005422:	6834      	ldr	r4, [r6, #0]
 8005424:	4626      	mov	r6, r4
 8005426:	2e00      	cmp	r6, #0
 8005428:	d140      	bne.n	80054ac <_malloc_r+0xcc>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	4631      	mov	r1, r6
 800542e:	4638      	mov	r0, r7
 8005430:	eb04 0803 	add.w	r8, r4, r3
 8005434:	f000 f848 	bl	80054c8 <_sbrk_r>
 8005438:	4580      	cmp	r8, r0
 800543a:	d13a      	bne.n	80054b2 <_malloc_r+0xd2>
 800543c:	6821      	ldr	r1, [r4, #0]
 800543e:	3503      	adds	r5, #3
 8005440:	1a6d      	subs	r5, r5, r1
 8005442:	f025 0503 	bic.w	r5, r5, #3
 8005446:	3508      	adds	r5, #8
 8005448:	2d0c      	cmp	r5, #12
 800544a:	bf38      	it	cc
 800544c:	250c      	movcc	r5, #12
 800544e:	4629      	mov	r1, r5
 8005450:	4638      	mov	r0, r7
 8005452:	f7ff ffa5 	bl	80053a0 <sbrk_aligned>
 8005456:	3001      	adds	r0, #1
 8005458:	d02b      	beq.n	80054b2 <_malloc_r+0xd2>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	442b      	add	r3, r5
 800545e:	6023      	str	r3, [r4, #0]
 8005460:	e00e      	b.n	8005480 <_malloc_r+0xa0>
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	1b52      	subs	r2, r2, r5
 8005466:	d41e      	bmi.n	80054a6 <_malloc_r+0xc6>
 8005468:	2a0b      	cmp	r2, #11
 800546a:	d916      	bls.n	800549a <_malloc_r+0xba>
 800546c:	1961      	adds	r1, r4, r5
 800546e:	42a3      	cmp	r3, r4
 8005470:	6025      	str	r5, [r4, #0]
 8005472:	bf18      	it	ne
 8005474:	6059      	strne	r1, [r3, #4]
 8005476:	6863      	ldr	r3, [r4, #4]
 8005478:	bf08      	it	eq
 800547a:	6031      	streq	r1, [r6, #0]
 800547c:	5162      	str	r2, [r4, r5]
 800547e:	604b      	str	r3, [r1, #4]
 8005480:	4638      	mov	r0, r7
 8005482:	f104 060b 	add.w	r6, r4, #11
 8005486:	f000 feff 	bl	8006288 <__malloc_unlock>
 800548a:	f026 0607 	bic.w	r6, r6, #7
 800548e:	1d23      	adds	r3, r4, #4
 8005490:	1af2      	subs	r2, r6, r3
 8005492:	d0b6      	beq.n	8005402 <_malloc_r+0x22>
 8005494:	1b9b      	subs	r3, r3, r6
 8005496:	50a3      	str	r3, [r4, r2]
 8005498:	e7b3      	b.n	8005402 <_malloc_r+0x22>
 800549a:	6862      	ldr	r2, [r4, #4]
 800549c:	42a3      	cmp	r3, r4
 800549e:	bf0c      	ite	eq
 80054a0:	6032      	streq	r2, [r6, #0]
 80054a2:	605a      	strne	r2, [r3, #4]
 80054a4:	e7ec      	b.n	8005480 <_malloc_r+0xa0>
 80054a6:	4623      	mov	r3, r4
 80054a8:	6864      	ldr	r4, [r4, #4]
 80054aa:	e7b2      	b.n	8005412 <_malloc_r+0x32>
 80054ac:	4634      	mov	r4, r6
 80054ae:	6876      	ldr	r6, [r6, #4]
 80054b0:	e7b9      	b.n	8005426 <_malloc_r+0x46>
 80054b2:	230c      	movs	r3, #12
 80054b4:	603b      	str	r3, [r7, #0]
 80054b6:	4638      	mov	r0, r7
 80054b8:	f000 fee6 	bl	8006288 <__malloc_unlock>
 80054bc:	e7a1      	b.n	8005402 <_malloc_r+0x22>
 80054be:	6025      	str	r5, [r4, #0]
 80054c0:	e7de      	b.n	8005480 <_malloc_r+0xa0>
 80054c2:	bf00      	nop
 80054c4:	2000014c 	.word	0x2000014c

080054c8 <_sbrk_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d06      	ldr	r5, [pc, #24]	; (80054e4 <_sbrk_r+0x1c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	f7fc fb04 	bl	8001ae0 <_sbrk>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_sbrk_r+0x1a>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_sbrk_r+0x1a>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	20000154 	.word	0x20000154

080054e8 <strcpy>:
 80054e8:	4603      	mov	r3, r0
 80054ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ee:	f803 2b01 	strb.w	r2, [r3], #1
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	d1f9      	bne.n	80054ea <strcpy+0x2>
 80054f6:	4770      	bx	lr

080054f8 <__assert_func>:
 80054f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054fa:	4614      	mov	r4, r2
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <__assert_func+0x2c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4605      	mov	r5, r0
 8005504:	68d8      	ldr	r0, [r3, #12]
 8005506:	b14c      	cbz	r4, 800551c <__assert_func+0x24>
 8005508:	4b07      	ldr	r3, [pc, #28]	; (8005528 <__assert_func+0x30>)
 800550a:	9100      	str	r1, [sp, #0]
 800550c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005510:	4906      	ldr	r1, [pc, #24]	; (800552c <__assert_func+0x34>)
 8005512:	462b      	mov	r3, r5
 8005514:	f000 fe8a 	bl	800622c <fiprintf>
 8005518:	f001 fab6 	bl	8006a88 <abort>
 800551c:	4b04      	ldr	r3, [pc, #16]	; (8005530 <__assert_func+0x38>)
 800551e:	461c      	mov	r4, r3
 8005520:	e7f3      	b.n	800550a <__assert_func+0x12>
 8005522:	bf00      	nop
 8005524:	2000001c 	.word	0x2000001c
 8005528:	08007384 	.word	0x08007384
 800552c:	08007391 	.word	0x08007391
 8005530:	080073bf 	.word	0x080073bf

08005534 <quorem>:
 8005534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005538:	6903      	ldr	r3, [r0, #16]
 800553a:	690c      	ldr	r4, [r1, #16]
 800553c:	42a3      	cmp	r3, r4
 800553e:	4607      	mov	r7, r0
 8005540:	f2c0 8081 	blt.w	8005646 <quorem+0x112>
 8005544:	3c01      	subs	r4, #1
 8005546:	f101 0814 	add.w	r8, r1, #20
 800554a:	f100 0514 	add.w	r5, r0, #20
 800554e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005558:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800555c:	3301      	adds	r3, #1
 800555e:	429a      	cmp	r2, r3
 8005560:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005564:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005568:	fbb2 f6f3 	udiv	r6, r2, r3
 800556c:	d331      	bcc.n	80055d2 <quorem+0x9e>
 800556e:	f04f 0e00 	mov.w	lr, #0
 8005572:	4640      	mov	r0, r8
 8005574:	46ac      	mov	ip, r5
 8005576:	46f2      	mov	sl, lr
 8005578:	f850 2b04 	ldr.w	r2, [r0], #4
 800557c:	b293      	uxth	r3, r2
 800557e:	fb06 e303 	mla	r3, r6, r3, lr
 8005582:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005586:	b29b      	uxth	r3, r3
 8005588:	ebaa 0303 	sub.w	r3, sl, r3
 800558c:	f8dc a000 	ldr.w	sl, [ip]
 8005590:	0c12      	lsrs	r2, r2, #16
 8005592:	fa13 f38a 	uxtah	r3, r3, sl
 8005596:	fb06 e202 	mla	r2, r6, r2, lr
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	9b00      	ldr	r3, [sp, #0]
 800559e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055a2:	b292      	uxth	r2, r2
 80055a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80055b0:	4581      	cmp	r9, r0
 80055b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055b6:	f84c 3b04 	str.w	r3, [ip], #4
 80055ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055be:	d2db      	bcs.n	8005578 <quorem+0x44>
 80055c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80055c4:	b92b      	cbnz	r3, 80055d2 <quorem+0x9e>
 80055c6:	9b01      	ldr	r3, [sp, #4]
 80055c8:	3b04      	subs	r3, #4
 80055ca:	429d      	cmp	r5, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	d32e      	bcc.n	800562e <quorem+0xfa>
 80055d0:	613c      	str	r4, [r7, #16]
 80055d2:	4638      	mov	r0, r7
 80055d4:	f7ff fdae 	bl	8005134 <__mcmp>
 80055d8:	2800      	cmp	r0, #0
 80055da:	db24      	blt.n	8005626 <quorem+0xf2>
 80055dc:	3601      	adds	r6, #1
 80055de:	4628      	mov	r0, r5
 80055e0:	f04f 0c00 	mov.w	ip, #0
 80055e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80055e8:	f8d0 e000 	ldr.w	lr, [r0]
 80055ec:	b293      	uxth	r3, r2
 80055ee:	ebac 0303 	sub.w	r3, ip, r3
 80055f2:	0c12      	lsrs	r2, r2, #16
 80055f4:	fa13 f38e 	uxtah	r3, r3, lr
 80055f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005600:	b29b      	uxth	r3, r3
 8005602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005606:	45c1      	cmp	r9, r8
 8005608:	f840 3b04 	str.w	r3, [r0], #4
 800560c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005610:	d2e8      	bcs.n	80055e4 <quorem+0xb0>
 8005612:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800561a:	b922      	cbnz	r2, 8005626 <quorem+0xf2>
 800561c:	3b04      	subs	r3, #4
 800561e:	429d      	cmp	r5, r3
 8005620:	461a      	mov	r2, r3
 8005622:	d30a      	bcc.n	800563a <quorem+0x106>
 8005624:	613c      	str	r4, [r7, #16]
 8005626:	4630      	mov	r0, r6
 8005628:	b003      	add	sp, #12
 800562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	3b04      	subs	r3, #4
 8005632:	2a00      	cmp	r2, #0
 8005634:	d1cc      	bne.n	80055d0 <quorem+0x9c>
 8005636:	3c01      	subs	r4, #1
 8005638:	e7c7      	b.n	80055ca <quorem+0x96>
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	3b04      	subs	r3, #4
 800563e:	2a00      	cmp	r2, #0
 8005640:	d1f0      	bne.n	8005624 <quorem+0xf0>
 8005642:	3c01      	subs	r4, #1
 8005644:	e7eb      	b.n	800561e <quorem+0xea>
 8005646:	2000      	movs	r0, #0
 8005648:	e7ee      	b.n	8005628 <quorem+0xf4>
 800564a:	0000      	movs	r0, r0
 800564c:	0000      	movs	r0, r0
	...

08005650 <_dtoa_r>:
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	ed2d 8b04 	vpush	{d8-d9}
 8005658:	ec57 6b10 	vmov	r6, r7, d0
 800565c:	b093      	sub	sp, #76	; 0x4c
 800565e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005660:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005664:	9106      	str	r1, [sp, #24]
 8005666:	ee10 aa10 	vmov	sl, s0
 800566a:	4604      	mov	r4, r0
 800566c:	9209      	str	r2, [sp, #36]	; 0x24
 800566e:	930c      	str	r3, [sp, #48]	; 0x30
 8005670:	46bb      	mov	fp, r7
 8005672:	b975      	cbnz	r5, 8005692 <_dtoa_r+0x42>
 8005674:	2010      	movs	r0, #16
 8005676:	f000 fdeb 	bl	8006250 <malloc>
 800567a:	4602      	mov	r2, r0
 800567c:	6260      	str	r0, [r4, #36]	; 0x24
 800567e:	b920      	cbnz	r0, 800568a <_dtoa_r+0x3a>
 8005680:	4ba7      	ldr	r3, [pc, #668]	; (8005920 <_dtoa_r+0x2d0>)
 8005682:	21ea      	movs	r1, #234	; 0xea
 8005684:	48a7      	ldr	r0, [pc, #668]	; (8005924 <_dtoa_r+0x2d4>)
 8005686:	f7ff ff37 	bl	80054f8 <__assert_func>
 800568a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800568e:	6005      	str	r5, [r0, #0]
 8005690:	60c5      	str	r5, [r0, #12]
 8005692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005694:	6819      	ldr	r1, [r3, #0]
 8005696:	b151      	cbz	r1, 80056ae <_dtoa_r+0x5e>
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	604a      	str	r2, [r1, #4]
 800569c:	2301      	movs	r3, #1
 800569e:	4093      	lsls	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
 80056a2:	4620      	mov	r0, r4
 80056a4:	f7ff fb04 	bl	8004cb0 <_Bfree>
 80056a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	1e3b      	subs	r3, r7, #0
 80056b0:	bfaa      	itet	ge
 80056b2:	2300      	movge	r3, #0
 80056b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80056b8:	f8c8 3000 	strge.w	r3, [r8]
 80056bc:	4b9a      	ldr	r3, [pc, #616]	; (8005928 <_dtoa_r+0x2d8>)
 80056be:	bfbc      	itt	lt
 80056c0:	2201      	movlt	r2, #1
 80056c2:	f8c8 2000 	strlt.w	r2, [r8]
 80056c6:	ea33 030b 	bics.w	r3, r3, fp
 80056ca:	d11b      	bne.n	8005704 <_dtoa_r+0xb4>
 80056cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056d8:	4333      	orrs	r3, r6
 80056da:	f000 8592 	beq.w	8006202 <_dtoa_r+0xbb2>
 80056de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e0:	b963      	cbnz	r3, 80056fc <_dtoa_r+0xac>
 80056e2:	4b92      	ldr	r3, [pc, #584]	; (800592c <_dtoa_r+0x2dc>)
 80056e4:	e022      	b.n	800572c <_dtoa_r+0xdc>
 80056e6:	4b92      	ldr	r3, [pc, #584]	; (8005930 <_dtoa_r+0x2e0>)
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	3308      	adds	r3, #8
 80056ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	9801      	ldr	r0, [sp, #4]
 80056f2:	b013      	add	sp, #76	; 0x4c
 80056f4:	ecbd 8b04 	vpop	{d8-d9}
 80056f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fc:	4b8b      	ldr	r3, [pc, #556]	; (800592c <_dtoa_r+0x2dc>)
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	3303      	adds	r3, #3
 8005702:	e7f3      	b.n	80056ec <_dtoa_r+0x9c>
 8005704:	2200      	movs	r2, #0
 8005706:	2300      	movs	r3, #0
 8005708:	4650      	mov	r0, sl
 800570a:	4659      	mov	r1, fp
 800570c:	f7fb f9d4 	bl	8000ab8 <__aeabi_dcmpeq>
 8005710:	ec4b ab19 	vmov	d9, sl, fp
 8005714:	4680      	mov	r8, r0
 8005716:	b158      	cbz	r0, 8005730 <_dtoa_r+0xe0>
 8005718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800571a:	2301      	movs	r3, #1
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 856b 	beq.w	80061fc <_dtoa_r+0xbac>
 8005726:	4883      	ldr	r0, [pc, #524]	; (8005934 <_dtoa_r+0x2e4>)
 8005728:	6018      	str	r0, [r3, #0]
 800572a:	1e43      	subs	r3, r0, #1
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	e7df      	b.n	80056f0 <_dtoa_r+0xa0>
 8005730:	ec4b ab10 	vmov	d0, sl, fp
 8005734:	aa10      	add	r2, sp, #64	; 0x40
 8005736:	a911      	add	r1, sp, #68	; 0x44
 8005738:	4620      	mov	r0, r4
 800573a:	f7ff fda1 	bl	8005280 <__d2b>
 800573e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005742:	ee08 0a10 	vmov	s16, r0
 8005746:	2d00      	cmp	r5, #0
 8005748:	f000 8084 	beq.w	8005854 <_dtoa_r+0x204>
 800574c:	ee19 3a90 	vmov	r3, s19
 8005750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005754:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005758:	4656      	mov	r6, sl
 800575a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800575e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005762:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005766:	4b74      	ldr	r3, [pc, #464]	; (8005938 <_dtoa_r+0x2e8>)
 8005768:	2200      	movs	r2, #0
 800576a:	4630      	mov	r0, r6
 800576c:	4639      	mov	r1, r7
 800576e:	f7fa fd83 	bl	8000278 <__aeabi_dsub>
 8005772:	a365      	add	r3, pc, #404	; (adr r3, 8005908 <_dtoa_r+0x2b8>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa ff36 	bl	80005e8 <__aeabi_dmul>
 800577c:	a364      	add	r3, pc, #400	; (adr r3, 8005910 <_dtoa_r+0x2c0>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fd7b 	bl	800027c <__adddf3>
 8005786:	4606      	mov	r6, r0
 8005788:	4628      	mov	r0, r5
 800578a:	460f      	mov	r7, r1
 800578c:	f7fa fec2 	bl	8000514 <__aeabi_i2d>
 8005790:	a361      	add	r3, pc, #388	; (adr r3, 8005918 <_dtoa_r+0x2c8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa ff27 	bl	80005e8 <__aeabi_dmul>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4630      	mov	r0, r6
 80057a0:	4639      	mov	r1, r7
 80057a2:	f7fa fd6b 	bl	800027c <__adddf3>
 80057a6:	4606      	mov	r6, r0
 80057a8:	460f      	mov	r7, r1
 80057aa:	f7fb f9b7 	bl	8000b1c <__aeabi_d2iz>
 80057ae:	2200      	movs	r2, #0
 80057b0:	9000      	str	r0, [sp, #0]
 80057b2:	2300      	movs	r3, #0
 80057b4:	4630      	mov	r0, r6
 80057b6:	4639      	mov	r1, r7
 80057b8:	f7fb f988 	bl	8000acc <__aeabi_dcmplt>
 80057bc:	b150      	cbz	r0, 80057d4 <_dtoa_r+0x184>
 80057be:	9800      	ldr	r0, [sp, #0]
 80057c0:	f7fa fea8 	bl	8000514 <__aeabi_i2d>
 80057c4:	4632      	mov	r2, r6
 80057c6:	463b      	mov	r3, r7
 80057c8:	f7fb f976 	bl	8000ab8 <__aeabi_dcmpeq>
 80057cc:	b910      	cbnz	r0, 80057d4 <_dtoa_r+0x184>
 80057ce:	9b00      	ldr	r3, [sp, #0]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	9b00      	ldr	r3, [sp, #0]
 80057d6:	2b16      	cmp	r3, #22
 80057d8:	d85a      	bhi.n	8005890 <_dtoa_r+0x240>
 80057da:	9a00      	ldr	r2, [sp, #0]
 80057dc:	4b57      	ldr	r3, [pc, #348]	; (800593c <_dtoa_r+0x2ec>)
 80057de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	ec51 0b19 	vmov	r0, r1, d9
 80057ea:	f7fb f96f 	bl	8000acc <__aeabi_dcmplt>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d050      	beq.n	8005894 <_dtoa_r+0x244>
 80057f2:	9b00      	ldr	r3, [sp, #0]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	2300      	movs	r3, #0
 80057fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80057fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057fe:	1b5d      	subs	r5, r3, r5
 8005800:	1e6b      	subs	r3, r5, #1
 8005802:	9305      	str	r3, [sp, #20]
 8005804:	bf45      	ittet	mi
 8005806:	f1c5 0301 	rsbmi	r3, r5, #1
 800580a:	9304      	strmi	r3, [sp, #16]
 800580c:	2300      	movpl	r3, #0
 800580e:	2300      	movmi	r3, #0
 8005810:	bf4c      	ite	mi
 8005812:	9305      	strmi	r3, [sp, #20]
 8005814:	9304      	strpl	r3, [sp, #16]
 8005816:	9b00      	ldr	r3, [sp, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	db3d      	blt.n	8005898 <_dtoa_r+0x248>
 800581c:	9b05      	ldr	r3, [sp, #20]
 800581e:	9a00      	ldr	r2, [sp, #0]
 8005820:	920a      	str	r2, [sp, #40]	; 0x28
 8005822:	4413      	add	r3, r2
 8005824:	9305      	str	r3, [sp, #20]
 8005826:	2300      	movs	r3, #0
 8005828:	9307      	str	r3, [sp, #28]
 800582a:	9b06      	ldr	r3, [sp, #24]
 800582c:	2b09      	cmp	r3, #9
 800582e:	f200 8089 	bhi.w	8005944 <_dtoa_r+0x2f4>
 8005832:	2b05      	cmp	r3, #5
 8005834:	bfc4      	itt	gt
 8005836:	3b04      	subgt	r3, #4
 8005838:	9306      	strgt	r3, [sp, #24]
 800583a:	9b06      	ldr	r3, [sp, #24]
 800583c:	f1a3 0302 	sub.w	r3, r3, #2
 8005840:	bfcc      	ite	gt
 8005842:	2500      	movgt	r5, #0
 8005844:	2501      	movle	r5, #1
 8005846:	2b03      	cmp	r3, #3
 8005848:	f200 8087 	bhi.w	800595a <_dtoa_r+0x30a>
 800584c:	e8df f003 	tbb	[pc, r3]
 8005850:	59383a2d 	.word	0x59383a2d
 8005854:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005858:	441d      	add	r5, r3
 800585a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800585e:	2b20      	cmp	r3, #32
 8005860:	bfc1      	itttt	gt
 8005862:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005866:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800586a:	fa0b f303 	lslgt.w	r3, fp, r3
 800586e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005872:	bfda      	itte	le
 8005874:	f1c3 0320 	rsble	r3, r3, #32
 8005878:	fa06 f003 	lslle.w	r0, r6, r3
 800587c:	4318      	orrgt	r0, r3
 800587e:	f7fa fe39 	bl	80004f4 <__aeabi_ui2d>
 8005882:	2301      	movs	r3, #1
 8005884:	4606      	mov	r6, r0
 8005886:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800588a:	3d01      	subs	r5, #1
 800588c:	930e      	str	r3, [sp, #56]	; 0x38
 800588e:	e76a      	b.n	8005766 <_dtoa_r+0x116>
 8005890:	2301      	movs	r3, #1
 8005892:	e7b2      	b.n	80057fa <_dtoa_r+0x1aa>
 8005894:	900b      	str	r0, [sp, #44]	; 0x2c
 8005896:	e7b1      	b.n	80057fc <_dtoa_r+0x1ac>
 8005898:	9b04      	ldr	r3, [sp, #16]
 800589a:	9a00      	ldr	r2, [sp, #0]
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	9304      	str	r3, [sp, #16]
 80058a0:	4253      	negs	r3, r2
 80058a2:	9307      	str	r3, [sp, #28]
 80058a4:	2300      	movs	r3, #0
 80058a6:	930a      	str	r3, [sp, #40]	; 0x28
 80058a8:	e7bf      	b.n	800582a <_dtoa_r+0x1da>
 80058aa:	2300      	movs	r3, #0
 80058ac:	9308      	str	r3, [sp, #32]
 80058ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	dc55      	bgt.n	8005960 <_dtoa_r+0x310>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058ba:	461a      	mov	r2, r3
 80058bc:	9209      	str	r2, [sp, #36]	; 0x24
 80058be:	e00c      	b.n	80058da <_dtoa_r+0x28a>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e7f3      	b.n	80058ac <_dtoa_r+0x25c>
 80058c4:	2300      	movs	r3, #0
 80058c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058c8:	9308      	str	r3, [sp, #32]
 80058ca:	9b00      	ldr	r3, [sp, #0]
 80058cc:	4413      	add	r3, r2
 80058ce:	9302      	str	r3, [sp, #8]
 80058d0:	3301      	adds	r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	9303      	str	r3, [sp, #12]
 80058d6:	bfb8      	it	lt
 80058d8:	2301      	movlt	r3, #1
 80058da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058dc:	2200      	movs	r2, #0
 80058de:	6042      	str	r2, [r0, #4]
 80058e0:	2204      	movs	r2, #4
 80058e2:	f102 0614 	add.w	r6, r2, #20
 80058e6:	429e      	cmp	r6, r3
 80058e8:	6841      	ldr	r1, [r0, #4]
 80058ea:	d93d      	bls.n	8005968 <_dtoa_r+0x318>
 80058ec:	4620      	mov	r0, r4
 80058ee:	f7ff f99f 	bl	8004c30 <_Balloc>
 80058f2:	9001      	str	r0, [sp, #4]
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d13b      	bne.n	8005970 <_dtoa_r+0x320>
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <_dtoa_r+0x2f0>)
 80058fa:	4602      	mov	r2, r0
 80058fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005900:	e6c0      	b.n	8005684 <_dtoa_r+0x34>
 8005902:	2301      	movs	r3, #1
 8005904:	e7df      	b.n	80058c6 <_dtoa_r+0x276>
 8005906:	bf00      	nop
 8005908:	636f4361 	.word	0x636f4361
 800590c:	3fd287a7 	.word	0x3fd287a7
 8005910:	8b60c8b3 	.word	0x8b60c8b3
 8005914:	3fc68a28 	.word	0x3fc68a28
 8005918:	509f79fb 	.word	0x509f79fb
 800591c:	3fd34413 	.word	0x3fd34413
 8005920:	08007204 	.word	0x08007204
 8005924:	080073cf 	.word	0x080073cf
 8005928:	7ff00000 	.word	0x7ff00000
 800592c:	080073c9 	.word	0x080073c9
 8005930:	080073c0 	.word	0x080073c0
 8005934:	080073ce 	.word	0x080073ce
 8005938:	3ff80000 	.word	0x3ff80000
 800593c:	080072b0 	.word	0x080072b0
 8005940:	08007277 	.word	0x08007277
 8005944:	2501      	movs	r5, #1
 8005946:	2300      	movs	r3, #0
 8005948:	9306      	str	r3, [sp, #24]
 800594a:	9508      	str	r5, [sp, #32]
 800594c:	f04f 33ff 	mov.w	r3, #4294967295
 8005950:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005954:	2200      	movs	r2, #0
 8005956:	2312      	movs	r3, #18
 8005958:	e7b0      	b.n	80058bc <_dtoa_r+0x26c>
 800595a:	2301      	movs	r3, #1
 800595c:	9308      	str	r3, [sp, #32]
 800595e:	e7f5      	b.n	800594c <_dtoa_r+0x2fc>
 8005960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005962:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005966:	e7b8      	b.n	80058da <_dtoa_r+0x28a>
 8005968:	3101      	adds	r1, #1
 800596a:	6041      	str	r1, [r0, #4]
 800596c:	0052      	lsls	r2, r2, #1
 800596e:	e7b8      	b.n	80058e2 <_dtoa_r+0x292>
 8005970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005972:	9a01      	ldr	r2, [sp, #4]
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	2b0e      	cmp	r3, #14
 800597a:	f200 809d 	bhi.w	8005ab8 <_dtoa_r+0x468>
 800597e:	2d00      	cmp	r5, #0
 8005980:	f000 809a 	beq.w	8005ab8 <_dtoa_r+0x468>
 8005984:	9b00      	ldr	r3, [sp, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	dd32      	ble.n	80059f0 <_dtoa_r+0x3a0>
 800598a:	4ab7      	ldr	r2, [pc, #732]	; (8005c68 <_dtoa_r+0x618>)
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005998:	9b00      	ldr	r3, [sp, #0]
 800599a:	05d8      	lsls	r0, r3, #23
 800599c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80059a0:	d516      	bpl.n	80059d0 <_dtoa_r+0x380>
 80059a2:	4bb2      	ldr	r3, [pc, #712]	; (8005c6c <_dtoa_r+0x61c>)
 80059a4:	ec51 0b19 	vmov	r0, r1, d9
 80059a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059ac:	f7fa ff46 	bl	800083c <__aeabi_ddiv>
 80059b0:	f007 070f 	and.w	r7, r7, #15
 80059b4:	4682      	mov	sl, r0
 80059b6:	468b      	mov	fp, r1
 80059b8:	2503      	movs	r5, #3
 80059ba:	4eac      	ldr	r6, [pc, #688]	; (8005c6c <_dtoa_r+0x61c>)
 80059bc:	b957      	cbnz	r7, 80059d4 <_dtoa_r+0x384>
 80059be:	4642      	mov	r2, r8
 80059c0:	464b      	mov	r3, r9
 80059c2:	4650      	mov	r0, sl
 80059c4:	4659      	mov	r1, fp
 80059c6:	f7fa ff39 	bl	800083c <__aeabi_ddiv>
 80059ca:	4682      	mov	sl, r0
 80059cc:	468b      	mov	fp, r1
 80059ce:	e028      	b.n	8005a22 <_dtoa_r+0x3d2>
 80059d0:	2502      	movs	r5, #2
 80059d2:	e7f2      	b.n	80059ba <_dtoa_r+0x36a>
 80059d4:	07f9      	lsls	r1, r7, #31
 80059d6:	d508      	bpl.n	80059ea <_dtoa_r+0x39a>
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059e0:	f7fa fe02 	bl	80005e8 <__aeabi_dmul>
 80059e4:	3501      	adds	r5, #1
 80059e6:	4680      	mov	r8, r0
 80059e8:	4689      	mov	r9, r1
 80059ea:	107f      	asrs	r7, r7, #1
 80059ec:	3608      	adds	r6, #8
 80059ee:	e7e5      	b.n	80059bc <_dtoa_r+0x36c>
 80059f0:	f000 809b 	beq.w	8005b2a <_dtoa_r+0x4da>
 80059f4:	9b00      	ldr	r3, [sp, #0]
 80059f6:	4f9d      	ldr	r7, [pc, #628]	; (8005c6c <_dtoa_r+0x61c>)
 80059f8:	425e      	negs	r6, r3
 80059fa:	4b9b      	ldr	r3, [pc, #620]	; (8005c68 <_dtoa_r+0x618>)
 80059fc:	f006 020f 	and.w	r2, r6, #15
 8005a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	ec51 0b19 	vmov	r0, r1, d9
 8005a0c:	f7fa fdec 	bl	80005e8 <__aeabi_dmul>
 8005a10:	1136      	asrs	r6, r6, #4
 8005a12:	4682      	mov	sl, r0
 8005a14:	468b      	mov	fp, r1
 8005a16:	2300      	movs	r3, #0
 8005a18:	2502      	movs	r5, #2
 8005a1a:	2e00      	cmp	r6, #0
 8005a1c:	d17a      	bne.n	8005b14 <_dtoa_r+0x4c4>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1d3      	bne.n	80059ca <_dtoa_r+0x37a>
 8005a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8082 	beq.w	8005b2e <_dtoa_r+0x4de>
 8005a2a:	4b91      	ldr	r3, [pc, #580]	; (8005c70 <_dtoa_r+0x620>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4650      	mov	r0, sl
 8005a30:	4659      	mov	r1, fp
 8005a32:	f7fb f84b 	bl	8000acc <__aeabi_dcmplt>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d079      	beq.n	8005b2e <_dtoa_r+0x4de>
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d076      	beq.n	8005b2e <_dtoa_r+0x4de>
 8005a40:	9b02      	ldr	r3, [sp, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dd36      	ble.n	8005ab4 <_dtoa_r+0x464>
 8005a46:	9b00      	ldr	r3, [sp, #0]
 8005a48:	4650      	mov	r0, sl
 8005a4a:	4659      	mov	r1, fp
 8005a4c:	1e5f      	subs	r7, r3, #1
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4b88      	ldr	r3, [pc, #544]	; (8005c74 <_dtoa_r+0x624>)
 8005a52:	f7fa fdc9 	bl	80005e8 <__aeabi_dmul>
 8005a56:	9e02      	ldr	r6, [sp, #8]
 8005a58:	4682      	mov	sl, r0
 8005a5a:	468b      	mov	fp, r1
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f7fa fd58 	bl	8000514 <__aeabi_i2d>
 8005a64:	4652      	mov	r2, sl
 8005a66:	465b      	mov	r3, fp
 8005a68:	f7fa fdbe 	bl	80005e8 <__aeabi_dmul>
 8005a6c:	4b82      	ldr	r3, [pc, #520]	; (8005c78 <_dtoa_r+0x628>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f7fa fc04 	bl	800027c <__adddf3>
 8005a74:	46d0      	mov	r8, sl
 8005a76:	46d9      	mov	r9, fp
 8005a78:	4682      	mov	sl, r0
 8005a7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	d158      	bne.n	8005b34 <_dtoa_r+0x4e4>
 8005a82:	4b7e      	ldr	r3, [pc, #504]	; (8005c7c <_dtoa_r+0x62c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	4640      	mov	r0, r8
 8005a88:	4649      	mov	r1, r9
 8005a8a:	f7fa fbf5 	bl	8000278 <__aeabi_dsub>
 8005a8e:	4652      	mov	r2, sl
 8005a90:	465b      	mov	r3, fp
 8005a92:	4680      	mov	r8, r0
 8005a94:	4689      	mov	r9, r1
 8005a96:	f7fb f837 	bl	8000b08 <__aeabi_dcmpgt>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	f040 8295 	bne.w	8005fca <_dtoa_r+0x97a>
 8005aa0:	4652      	mov	r2, sl
 8005aa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	f7fb f80f 	bl	8000acc <__aeabi_dcmplt>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	f040 8289 	bne.w	8005fc6 <_dtoa_r+0x976>
 8005ab4:	ec5b ab19 	vmov	sl, fp, d9
 8005ab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f2c0 8148 	blt.w	8005d50 <_dtoa_r+0x700>
 8005ac0:	9a00      	ldr	r2, [sp, #0]
 8005ac2:	2a0e      	cmp	r2, #14
 8005ac4:	f300 8144 	bgt.w	8005d50 <_dtoa_r+0x700>
 8005ac8:	4b67      	ldr	r3, [pc, #412]	; (8005c68 <_dtoa_r+0x618>)
 8005aca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ace:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f280 80d5 	bge.w	8005c84 <_dtoa_r+0x634>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f300 80d1 	bgt.w	8005c84 <_dtoa_r+0x634>
 8005ae2:	f040 826f 	bne.w	8005fc4 <_dtoa_r+0x974>
 8005ae6:	4b65      	ldr	r3, [pc, #404]	; (8005c7c <_dtoa_r+0x62c>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4640      	mov	r0, r8
 8005aec:	4649      	mov	r1, r9
 8005aee:	f7fa fd7b 	bl	80005e8 <__aeabi_dmul>
 8005af2:	4652      	mov	r2, sl
 8005af4:	465b      	mov	r3, fp
 8005af6:	f7fa fffd 	bl	8000af4 <__aeabi_dcmpge>
 8005afa:	9e03      	ldr	r6, [sp, #12]
 8005afc:	4637      	mov	r7, r6
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f040 8245 	bne.w	8005f8e <_dtoa_r+0x93e>
 8005b04:	9d01      	ldr	r5, [sp, #4]
 8005b06:	2331      	movs	r3, #49	; 0x31
 8005b08:	f805 3b01 	strb.w	r3, [r5], #1
 8005b0c:	9b00      	ldr	r3, [sp, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	e240      	b.n	8005f96 <_dtoa_r+0x946>
 8005b14:	07f2      	lsls	r2, r6, #31
 8005b16:	d505      	bpl.n	8005b24 <_dtoa_r+0x4d4>
 8005b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b1c:	f7fa fd64 	bl	80005e8 <__aeabi_dmul>
 8005b20:	3501      	adds	r5, #1
 8005b22:	2301      	movs	r3, #1
 8005b24:	1076      	asrs	r6, r6, #1
 8005b26:	3708      	adds	r7, #8
 8005b28:	e777      	b.n	8005a1a <_dtoa_r+0x3ca>
 8005b2a:	2502      	movs	r5, #2
 8005b2c:	e779      	b.n	8005a22 <_dtoa_r+0x3d2>
 8005b2e:	9f00      	ldr	r7, [sp, #0]
 8005b30:	9e03      	ldr	r6, [sp, #12]
 8005b32:	e794      	b.n	8005a5e <_dtoa_r+0x40e>
 8005b34:	9901      	ldr	r1, [sp, #4]
 8005b36:	4b4c      	ldr	r3, [pc, #304]	; (8005c68 <_dtoa_r+0x618>)
 8005b38:	4431      	add	r1, r6
 8005b3a:	910d      	str	r1, [sp, #52]	; 0x34
 8005b3c:	9908      	ldr	r1, [sp, #32]
 8005b3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b46:	2900      	cmp	r1, #0
 8005b48:	d043      	beq.n	8005bd2 <_dtoa_r+0x582>
 8005b4a:	494d      	ldr	r1, [pc, #308]	; (8005c80 <_dtoa_r+0x630>)
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f7fa fe75 	bl	800083c <__aeabi_ddiv>
 8005b52:	4652      	mov	r2, sl
 8005b54:	465b      	mov	r3, fp
 8005b56:	f7fa fb8f 	bl	8000278 <__aeabi_dsub>
 8005b5a:	9d01      	ldr	r5, [sp, #4]
 8005b5c:	4682      	mov	sl, r0
 8005b5e:	468b      	mov	fp, r1
 8005b60:	4649      	mov	r1, r9
 8005b62:	4640      	mov	r0, r8
 8005b64:	f7fa ffda 	bl	8000b1c <__aeabi_d2iz>
 8005b68:	4606      	mov	r6, r0
 8005b6a:	f7fa fcd3 	bl	8000514 <__aeabi_i2d>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4640      	mov	r0, r8
 8005b74:	4649      	mov	r1, r9
 8005b76:	f7fa fb7f 	bl	8000278 <__aeabi_dsub>
 8005b7a:	3630      	adds	r6, #48	; 0x30
 8005b7c:	f805 6b01 	strb.w	r6, [r5], #1
 8005b80:	4652      	mov	r2, sl
 8005b82:	465b      	mov	r3, fp
 8005b84:	4680      	mov	r8, r0
 8005b86:	4689      	mov	r9, r1
 8005b88:	f7fa ffa0 	bl	8000acc <__aeabi_dcmplt>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d163      	bne.n	8005c58 <_dtoa_r+0x608>
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	4936      	ldr	r1, [pc, #216]	; (8005c70 <_dtoa_r+0x620>)
 8005b96:	2000      	movs	r0, #0
 8005b98:	f7fa fb6e 	bl	8000278 <__aeabi_dsub>
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	465b      	mov	r3, fp
 8005ba0:	f7fa ff94 	bl	8000acc <__aeabi_dcmplt>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	f040 80b5 	bne.w	8005d14 <_dtoa_r+0x6c4>
 8005baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bac:	429d      	cmp	r5, r3
 8005bae:	d081      	beq.n	8005ab4 <_dtoa_r+0x464>
 8005bb0:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <_dtoa_r+0x624>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	4650      	mov	r0, sl
 8005bb6:	4659      	mov	r1, fp
 8005bb8:	f7fa fd16 	bl	80005e8 <__aeabi_dmul>
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <_dtoa_r+0x624>)
 8005bbe:	4682      	mov	sl, r0
 8005bc0:	468b      	mov	fp, r1
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f7fa fd0e 	bl	80005e8 <__aeabi_dmul>
 8005bcc:	4680      	mov	r8, r0
 8005bce:	4689      	mov	r9, r1
 8005bd0:	e7c6      	b.n	8005b60 <_dtoa_r+0x510>
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	f7fa fd07 	bl	80005e8 <__aeabi_dmul>
 8005bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bdc:	9d01      	ldr	r5, [sp, #4]
 8005bde:	930f      	str	r3, [sp, #60]	; 0x3c
 8005be0:	4682      	mov	sl, r0
 8005be2:	468b      	mov	fp, r1
 8005be4:	4649      	mov	r1, r9
 8005be6:	4640      	mov	r0, r8
 8005be8:	f7fa ff98 	bl	8000b1c <__aeabi_d2iz>
 8005bec:	4606      	mov	r6, r0
 8005bee:	f7fa fc91 	bl	8000514 <__aeabi_i2d>
 8005bf2:	3630      	adds	r6, #48	; 0x30
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	4649      	mov	r1, r9
 8005bfc:	f7fa fb3c 	bl	8000278 <__aeabi_dsub>
 8005c00:	f805 6b01 	strb.w	r6, [r5], #1
 8005c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c06:	429d      	cmp	r5, r3
 8005c08:	4680      	mov	r8, r0
 8005c0a:	4689      	mov	r9, r1
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	d124      	bne.n	8005c5c <_dtoa_r+0x60c>
 8005c12:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <_dtoa_r+0x630>)
 8005c14:	4650      	mov	r0, sl
 8005c16:	4659      	mov	r1, fp
 8005c18:	f7fa fb30 	bl	800027c <__adddf3>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4640      	mov	r0, r8
 8005c22:	4649      	mov	r1, r9
 8005c24:	f7fa ff70 	bl	8000b08 <__aeabi_dcmpgt>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d173      	bne.n	8005d14 <_dtoa_r+0x6c4>
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	465b      	mov	r3, fp
 8005c30:	4913      	ldr	r1, [pc, #76]	; (8005c80 <_dtoa_r+0x630>)
 8005c32:	2000      	movs	r0, #0
 8005c34:	f7fa fb20 	bl	8000278 <__aeabi_dsub>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	4649      	mov	r1, r9
 8005c40:	f7fa ff44 	bl	8000acc <__aeabi_dcmplt>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	f43f af35 	beq.w	8005ab4 <_dtoa_r+0x464>
 8005c4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c4c:	1e6b      	subs	r3, r5, #1
 8005c4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c54:	2b30      	cmp	r3, #48	; 0x30
 8005c56:	d0f8      	beq.n	8005c4a <_dtoa_r+0x5fa>
 8005c58:	9700      	str	r7, [sp, #0]
 8005c5a:	e049      	b.n	8005cf0 <_dtoa_r+0x6a0>
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <_dtoa_r+0x624>)
 8005c5e:	f7fa fcc3 	bl	80005e8 <__aeabi_dmul>
 8005c62:	4680      	mov	r8, r0
 8005c64:	4689      	mov	r9, r1
 8005c66:	e7bd      	b.n	8005be4 <_dtoa_r+0x594>
 8005c68:	080072b0 	.word	0x080072b0
 8005c6c:	08007288 	.word	0x08007288
 8005c70:	3ff00000 	.word	0x3ff00000
 8005c74:	40240000 	.word	0x40240000
 8005c78:	401c0000 	.word	0x401c0000
 8005c7c:	40140000 	.word	0x40140000
 8005c80:	3fe00000 	.word	0x3fe00000
 8005c84:	9d01      	ldr	r5, [sp, #4]
 8005c86:	4656      	mov	r6, sl
 8005c88:	465f      	mov	r7, fp
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	4630      	mov	r0, r6
 8005c90:	4639      	mov	r1, r7
 8005c92:	f7fa fdd3 	bl	800083c <__aeabi_ddiv>
 8005c96:	f7fa ff41 	bl	8000b1c <__aeabi_d2iz>
 8005c9a:	4682      	mov	sl, r0
 8005c9c:	f7fa fc3a 	bl	8000514 <__aeabi_i2d>
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	f7fa fca0 	bl	80005e8 <__aeabi_dmul>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4630      	mov	r0, r6
 8005cae:	4639      	mov	r1, r7
 8005cb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005cb4:	f7fa fae0 	bl	8000278 <__aeabi_dsub>
 8005cb8:	f805 6b01 	strb.w	r6, [r5], #1
 8005cbc:	9e01      	ldr	r6, [sp, #4]
 8005cbe:	9f03      	ldr	r7, [sp, #12]
 8005cc0:	1bae      	subs	r6, r5, r6
 8005cc2:	42b7      	cmp	r7, r6
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	d135      	bne.n	8005d36 <_dtoa_r+0x6e6>
 8005cca:	f7fa fad7 	bl	800027c <__adddf3>
 8005cce:	4642      	mov	r2, r8
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460f      	mov	r7, r1
 8005cd6:	f7fa ff17 	bl	8000b08 <__aeabi_dcmpgt>
 8005cda:	b9d0      	cbnz	r0, 8005d12 <_dtoa_r+0x6c2>
 8005cdc:	4642      	mov	r2, r8
 8005cde:	464b      	mov	r3, r9
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	f7fa fee8 	bl	8000ab8 <__aeabi_dcmpeq>
 8005ce8:	b110      	cbz	r0, 8005cf0 <_dtoa_r+0x6a0>
 8005cea:	f01a 0f01 	tst.w	sl, #1
 8005cee:	d110      	bne.n	8005d12 <_dtoa_r+0x6c2>
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	ee18 1a10 	vmov	r1, s16
 8005cf6:	f7fe ffdb 	bl	8004cb0 <_Bfree>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9800      	ldr	r0, [sp, #0]
 8005cfe:	702b      	strb	r3, [r5, #0]
 8005d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d02:	3001      	adds	r0, #1
 8005d04:	6018      	str	r0, [r3, #0]
 8005d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f43f acf1 	beq.w	80056f0 <_dtoa_r+0xa0>
 8005d0e:	601d      	str	r5, [r3, #0]
 8005d10:	e4ee      	b.n	80056f0 <_dtoa_r+0xa0>
 8005d12:	9f00      	ldr	r7, [sp, #0]
 8005d14:	462b      	mov	r3, r5
 8005d16:	461d      	mov	r5, r3
 8005d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d1c:	2a39      	cmp	r2, #57	; 0x39
 8005d1e:	d106      	bne.n	8005d2e <_dtoa_r+0x6de>
 8005d20:	9a01      	ldr	r2, [sp, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d1f7      	bne.n	8005d16 <_dtoa_r+0x6c6>
 8005d26:	9901      	ldr	r1, [sp, #4]
 8005d28:	2230      	movs	r2, #48	; 0x30
 8005d2a:	3701      	adds	r7, #1
 8005d2c:	700a      	strb	r2, [r1, #0]
 8005d2e:	781a      	ldrb	r2, [r3, #0]
 8005d30:	3201      	adds	r2, #1
 8005d32:	701a      	strb	r2, [r3, #0]
 8005d34:	e790      	b.n	8005c58 <_dtoa_r+0x608>
 8005d36:	4ba6      	ldr	r3, [pc, #664]	; (8005fd0 <_dtoa_r+0x980>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f7fa fc55 	bl	80005e8 <__aeabi_dmul>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2300      	movs	r3, #0
 8005d42:	4606      	mov	r6, r0
 8005d44:	460f      	mov	r7, r1
 8005d46:	f7fa feb7 	bl	8000ab8 <__aeabi_dcmpeq>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d09d      	beq.n	8005c8a <_dtoa_r+0x63a>
 8005d4e:	e7cf      	b.n	8005cf0 <_dtoa_r+0x6a0>
 8005d50:	9a08      	ldr	r2, [sp, #32]
 8005d52:	2a00      	cmp	r2, #0
 8005d54:	f000 80d7 	beq.w	8005f06 <_dtoa_r+0x8b6>
 8005d58:	9a06      	ldr	r2, [sp, #24]
 8005d5a:	2a01      	cmp	r2, #1
 8005d5c:	f300 80ba 	bgt.w	8005ed4 <_dtoa_r+0x884>
 8005d60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d62:	2a00      	cmp	r2, #0
 8005d64:	f000 80b2 	beq.w	8005ecc <_dtoa_r+0x87c>
 8005d68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d6c:	9e07      	ldr	r6, [sp, #28]
 8005d6e:	9d04      	ldr	r5, [sp, #16]
 8005d70:	9a04      	ldr	r2, [sp, #16]
 8005d72:	441a      	add	r2, r3
 8005d74:	9204      	str	r2, [sp, #16]
 8005d76:	9a05      	ldr	r2, [sp, #20]
 8005d78:	2101      	movs	r1, #1
 8005d7a:	441a      	add	r2, r3
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	9205      	str	r2, [sp, #20]
 8005d80:	f7ff f84e 	bl	8004e20 <__i2b>
 8005d84:	4607      	mov	r7, r0
 8005d86:	2d00      	cmp	r5, #0
 8005d88:	dd0c      	ble.n	8005da4 <_dtoa_r+0x754>
 8005d8a:	9b05      	ldr	r3, [sp, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dd09      	ble.n	8005da4 <_dtoa_r+0x754>
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	9a04      	ldr	r2, [sp, #16]
 8005d94:	bfa8      	it	ge
 8005d96:	462b      	movge	r3, r5
 8005d98:	1ad2      	subs	r2, r2, r3
 8005d9a:	9204      	str	r2, [sp, #16]
 8005d9c:	9a05      	ldr	r2, [sp, #20]
 8005d9e:	1aed      	subs	r5, r5, r3
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	9305      	str	r3, [sp, #20]
 8005da4:	9b07      	ldr	r3, [sp, #28]
 8005da6:	b31b      	cbz	r3, 8005df0 <_dtoa_r+0x7a0>
 8005da8:	9b08      	ldr	r3, [sp, #32]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 80af 	beq.w	8005f0e <_dtoa_r+0x8be>
 8005db0:	2e00      	cmp	r6, #0
 8005db2:	dd13      	ble.n	8005ddc <_dtoa_r+0x78c>
 8005db4:	4639      	mov	r1, r7
 8005db6:	4632      	mov	r2, r6
 8005db8:	4620      	mov	r0, r4
 8005dba:	f7ff f8f1 	bl	8004fa0 <__pow5mult>
 8005dbe:	ee18 2a10 	vmov	r2, s16
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff f840 	bl	8004e4c <__multiply>
 8005dcc:	ee18 1a10 	vmov	r1, s16
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f7fe ff6c 	bl	8004cb0 <_Bfree>
 8005dd8:	ee08 8a10 	vmov	s16, r8
 8005ddc:	9b07      	ldr	r3, [sp, #28]
 8005dde:	1b9a      	subs	r2, r3, r6
 8005de0:	d006      	beq.n	8005df0 <_dtoa_r+0x7a0>
 8005de2:	ee18 1a10 	vmov	r1, s16
 8005de6:	4620      	mov	r0, r4
 8005de8:	f7ff f8da 	bl	8004fa0 <__pow5mult>
 8005dec:	ee08 0a10 	vmov	s16, r0
 8005df0:	2101      	movs	r1, #1
 8005df2:	4620      	mov	r0, r4
 8005df4:	f7ff f814 	bl	8004e20 <__i2b>
 8005df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	f340 8088 	ble.w	8005f12 <_dtoa_r+0x8c2>
 8005e02:	461a      	mov	r2, r3
 8005e04:	4601      	mov	r1, r0
 8005e06:	4620      	mov	r0, r4
 8005e08:	f7ff f8ca 	bl	8004fa0 <__pow5mult>
 8005e0c:	9b06      	ldr	r3, [sp, #24]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	4606      	mov	r6, r0
 8005e12:	f340 8081 	ble.w	8005f18 <_dtoa_r+0x8c8>
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	6933      	ldr	r3, [r6, #16]
 8005e1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e20:	6918      	ldr	r0, [r3, #16]
 8005e22:	f7fe ffad 	bl	8004d80 <__hi0bits>
 8005e26:	f1c0 0020 	rsb	r0, r0, #32
 8005e2a:	9b05      	ldr	r3, [sp, #20]
 8005e2c:	4418      	add	r0, r3
 8005e2e:	f010 001f 	ands.w	r0, r0, #31
 8005e32:	f000 8092 	beq.w	8005f5a <_dtoa_r+0x90a>
 8005e36:	f1c0 0320 	rsb	r3, r0, #32
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	f340 808a 	ble.w	8005f54 <_dtoa_r+0x904>
 8005e40:	f1c0 001c 	rsb	r0, r0, #28
 8005e44:	9b04      	ldr	r3, [sp, #16]
 8005e46:	4403      	add	r3, r0
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	9b05      	ldr	r3, [sp, #20]
 8005e4c:	4403      	add	r3, r0
 8005e4e:	4405      	add	r5, r0
 8005e50:	9305      	str	r3, [sp, #20]
 8005e52:	9b04      	ldr	r3, [sp, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dd07      	ble.n	8005e68 <_dtoa_r+0x818>
 8005e58:	ee18 1a10 	vmov	r1, s16
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f7ff f8f8 	bl	8005054 <__lshift>
 8005e64:	ee08 0a10 	vmov	s16, r0
 8005e68:	9b05      	ldr	r3, [sp, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	dd05      	ble.n	8005e7a <_dtoa_r+0x82a>
 8005e6e:	4631      	mov	r1, r6
 8005e70:	461a      	mov	r2, r3
 8005e72:	4620      	mov	r0, r4
 8005e74:	f7ff f8ee 	bl	8005054 <__lshift>
 8005e78:	4606      	mov	r6, r0
 8005e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d06e      	beq.n	8005f5e <_dtoa_r+0x90e>
 8005e80:	ee18 0a10 	vmov	r0, s16
 8005e84:	4631      	mov	r1, r6
 8005e86:	f7ff f955 	bl	8005134 <__mcmp>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	da67      	bge.n	8005f5e <_dtoa_r+0x90e>
 8005e8e:	9b00      	ldr	r3, [sp, #0]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	ee18 1a10 	vmov	r1, s16
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	220a      	movs	r2, #10
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7fe ff29 	bl	8004cf4 <__multadd>
 8005ea2:	9b08      	ldr	r3, [sp, #32]
 8005ea4:	ee08 0a10 	vmov	s16, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 81b1 	beq.w	8006210 <_dtoa_r+0xbc0>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	220a      	movs	r2, #10
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7fe ff1d 	bl	8004cf4 <__multadd>
 8005eba:	9b02      	ldr	r3, [sp, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	4607      	mov	r7, r0
 8005ec0:	f300 808e 	bgt.w	8005fe0 <_dtoa_r+0x990>
 8005ec4:	9b06      	ldr	r3, [sp, #24]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	dc51      	bgt.n	8005f6e <_dtoa_r+0x91e>
 8005eca:	e089      	b.n	8005fe0 <_dtoa_r+0x990>
 8005ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ece:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ed2:	e74b      	b.n	8005d6c <_dtoa_r+0x71c>
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	1e5e      	subs	r6, r3, #1
 8005ed8:	9b07      	ldr	r3, [sp, #28]
 8005eda:	42b3      	cmp	r3, r6
 8005edc:	bfbf      	itttt	lt
 8005ede:	9b07      	ldrlt	r3, [sp, #28]
 8005ee0:	9607      	strlt	r6, [sp, #28]
 8005ee2:	1af2      	sublt	r2, r6, r3
 8005ee4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ee6:	bfb6      	itet	lt
 8005ee8:	189b      	addlt	r3, r3, r2
 8005eea:	1b9e      	subge	r6, r3, r6
 8005eec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	bfb8      	it	lt
 8005ef2:	2600      	movlt	r6, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bfb7      	itett	lt
 8005ef8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005efc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005f00:	1a9d      	sublt	r5, r3, r2
 8005f02:	2300      	movlt	r3, #0
 8005f04:	e734      	b.n	8005d70 <_dtoa_r+0x720>
 8005f06:	9e07      	ldr	r6, [sp, #28]
 8005f08:	9d04      	ldr	r5, [sp, #16]
 8005f0a:	9f08      	ldr	r7, [sp, #32]
 8005f0c:	e73b      	b.n	8005d86 <_dtoa_r+0x736>
 8005f0e:	9a07      	ldr	r2, [sp, #28]
 8005f10:	e767      	b.n	8005de2 <_dtoa_r+0x792>
 8005f12:	9b06      	ldr	r3, [sp, #24]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	dc18      	bgt.n	8005f4a <_dtoa_r+0x8fa>
 8005f18:	f1ba 0f00 	cmp.w	sl, #0
 8005f1c:	d115      	bne.n	8005f4a <_dtoa_r+0x8fa>
 8005f1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f22:	b993      	cbnz	r3, 8005f4a <_dtoa_r+0x8fa>
 8005f24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f28:	0d1b      	lsrs	r3, r3, #20
 8005f2a:	051b      	lsls	r3, r3, #20
 8005f2c:	b183      	cbz	r3, 8005f50 <_dtoa_r+0x900>
 8005f2e:	9b04      	ldr	r3, [sp, #16]
 8005f30:	3301      	adds	r3, #1
 8005f32:	9304      	str	r3, [sp, #16]
 8005f34:	9b05      	ldr	r3, [sp, #20]
 8005f36:	3301      	adds	r3, #1
 8005f38:	9305      	str	r3, [sp, #20]
 8005f3a:	f04f 0801 	mov.w	r8, #1
 8005f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f47f af6a 	bne.w	8005e1a <_dtoa_r+0x7ca>
 8005f46:	2001      	movs	r0, #1
 8005f48:	e76f      	b.n	8005e2a <_dtoa_r+0x7da>
 8005f4a:	f04f 0800 	mov.w	r8, #0
 8005f4e:	e7f6      	b.n	8005f3e <_dtoa_r+0x8ee>
 8005f50:	4698      	mov	r8, r3
 8005f52:	e7f4      	b.n	8005f3e <_dtoa_r+0x8ee>
 8005f54:	f43f af7d 	beq.w	8005e52 <_dtoa_r+0x802>
 8005f58:	4618      	mov	r0, r3
 8005f5a:	301c      	adds	r0, #28
 8005f5c:	e772      	b.n	8005e44 <_dtoa_r+0x7f4>
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	dc37      	bgt.n	8005fd4 <_dtoa_r+0x984>
 8005f64:	9b06      	ldr	r3, [sp, #24]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	dd34      	ble.n	8005fd4 <_dtoa_r+0x984>
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	9302      	str	r3, [sp, #8]
 8005f6e:	9b02      	ldr	r3, [sp, #8]
 8005f70:	b96b      	cbnz	r3, 8005f8e <_dtoa_r+0x93e>
 8005f72:	4631      	mov	r1, r6
 8005f74:	2205      	movs	r2, #5
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7fe febc 	bl	8004cf4 <__multadd>
 8005f7c:	4601      	mov	r1, r0
 8005f7e:	4606      	mov	r6, r0
 8005f80:	ee18 0a10 	vmov	r0, s16
 8005f84:	f7ff f8d6 	bl	8005134 <__mcmp>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	f73f adbb 	bgt.w	8005b04 <_dtoa_r+0x4b4>
 8005f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f90:	9d01      	ldr	r5, [sp, #4]
 8005f92:	43db      	mvns	r3, r3
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7fe fe87 	bl	8004cb0 <_Bfree>
 8005fa2:	2f00      	cmp	r7, #0
 8005fa4:	f43f aea4 	beq.w	8005cf0 <_dtoa_r+0x6a0>
 8005fa8:	f1b8 0f00 	cmp.w	r8, #0
 8005fac:	d005      	beq.n	8005fba <_dtoa_r+0x96a>
 8005fae:	45b8      	cmp	r8, r7
 8005fb0:	d003      	beq.n	8005fba <_dtoa_r+0x96a>
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f7fe fe7b 	bl	8004cb0 <_Bfree>
 8005fba:	4639      	mov	r1, r7
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f7fe fe77 	bl	8004cb0 <_Bfree>
 8005fc2:	e695      	b.n	8005cf0 <_dtoa_r+0x6a0>
 8005fc4:	2600      	movs	r6, #0
 8005fc6:	4637      	mov	r7, r6
 8005fc8:	e7e1      	b.n	8005f8e <_dtoa_r+0x93e>
 8005fca:	9700      	str	r7, [sp, #0]
 8005fcc:	4637      	mov	r7, r6
 8005fce:	e599      	b.n	8005b04 <_dtoa_r+0x4b4>
 8005fd0:	40240000 	.word	0x40240000
 8005fd4:	9b08      	ldr	r3, [sp, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 80ca 	beq.w	8006170 <_dtoa_r+0xb20>
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	9302      	str	r3, [sp, #8]
 8005fe0:	2d00      	cmp	r5, #0
 8005fe2:	dd05      	ble.n	8005ff0 <_dtoa_r+0x9a0>
 8005fe4:	4639      	mov	r1, r7
 8005fe6:	462a      	mov	r2, r5
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f7ff f833 	bl	8005054 <__lshift>
 8005fee:	4607      	mov	r7, r0
 8005ff0:	f1b8 0f00 	cmp.w	r8, #0
 8005ff4:	d05b      	beq.n	80060ae <_dtoa_r+0xa5e>
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f7fe fe19 	bl	8004c30 <_Balloc>
 8005ffe:	4605      	mov	r5, r0
 8006000:	b928      	cbnz	r0, 800600e <_dtoa_r+0x9be>
 8006002:	4b87      	ldr	r3, [pc, #540]	; (8006220 <_dtoa_r+0xbd0>)
 8006004:	4602      	mov	r2, r0
 8006006:	f240 21ea 	movw	r1, #746	; 0x2ea
 800600a:	f7ff bb3b 	b.w	8005684 <_dtoa_r+0x34>
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	3202      	adds	r2, #2
 8006012:	0092      	lsls	r2, r2, #2
 8006014:	f107 010c 	add.w	r1, r7, #12
 8006018:	300c      	adds	r0, #12
 800601a:	f000 f921 	bl	8006260 <memcpy>
 800601e:	2201      	movs	r2, #1
 8006020:	4629      	mov	r1, r5
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff f816 	bl	8005054 <__lshift>
 8006028:	9b01      	ldr	r3, [sp, #4]
 800602a:	f103 0901 	add.w	r9, r3, #1
 800602e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006032:	4413      	add	r3, r2
 8006034:	9305      	str	r3, [sp, #20]
 8006036:	f00a 0301 	and.w	r3, sl, #1
 800603a:	46b8      	mov	r8, r7
 800603c:	9304      	str	r3, [sp, #16]
 800603e:	4607      	mov	r7, r0
 8006040:	4631      	mov	r1, r6
 8006042:	ee18 0a10 	vmov	r0, s16
 8006046:	f7ff fa75 	bl	8005534 <quorem>
 800604a:	4641      	mov	r1, r8
 800604c:	9002      	str	r0, [sp, #8]
 800604e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006052:	ee18 0a10 	vmov	r0, s16
 8006056:	f7ff f86d 	bl	8005134 <__mcmp>
 800605a:	463a      	mov	r2, r7
 800605c:	9003      	str	r0, [sp, #12]
 800605e:	4631      	mov	r1, r6
 8006060:	4620      	mov	r0, r4
 8006062:	f7ff f883 	bl	800516c <__mdiff>
 8006066:	68c2      	ldr	r2, [r0, #12]
 8006068:	f109 3bff 	add.w	fp, r9, #4294967295
 800606c:	4605      	mov	r5, r0
 800606e:	bb02      	cbnz	r2, 80060b2 <_dtoa_r+0xa62>
 8006070:	4601      	mov	r1, r0
 8006072:	ee18 0a10 	vmov	r0, s16
 8006076:	f7ff f85d 	bl	8005134 <__mcmp>
 800607a:	4602      	mov	r2, r0
 800607c:	4629      	mov	r1, r5
 800607e:	4620      	mov	r0, r4
 8006080:	9207      	str	r2, [sp, #28]
 8006082:	f7fe fe15 	bl	8004cb0 <_Bfree>
 8006086:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800608a:	ea43 0102 	orr.w	r1, r3, r2
 800608e:	9b04      	ldr	r3, [sp, #16]
 8006090:	430b      	orrs	r3, r1
 8006092:	464d      	mov	r5, r9
 8006094:	d10f      	bne.n	80060b6 <_dtoa_r+0xa66>
 8006096:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800609a:	d02a      	beq.n	80060f2 <_dtoa_r+0xaa2>
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	dd02      	ble.n	80060a8 <_dtoa_r+0xa58>
 80060a2:	9b02      	ldr	r3, [sp, #8]
 80060a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80060a8:	f88b a000 	strb.w	sl, [fp]
 80060ac:	e775      	b.n	8005f9a <_dtoa_r+0x94a>
 80060ae:	4638      	mov	r0, r7
 80060b0:	e7ba      	b.n	8006028 <_dtoa_r+0x9d8>
 80060b2:	2201      	movs	r2, #1
 80060b4:	e7e2      	b.n	800607c <_dtoa_r+0xa2c>
 80060b6:	9b03      	ldr	r3, [sp, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	db04      	blt.n	80060c6 <_dtoa_r+0xa76>
 80060bc:	9906      	ldr	r1, [sp, #24]
 80060be:	430b      	orrs	r3, r1
 80060c0:	9904      	ldr	r1, [sp, #16]
 80060c2:	430b      	orrs	r3, r1
 80060c4:	d122      	bne.n	800610c <_dtoa_r+0xabc>
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	ddee      	ble.n	80060a8 <_dtoa_r+0xa58>
 80060ca:	ee18 1a10 	vmov	r1, s16
 80060ce:	2201      	movs	r2, #1
 80060d0:	4620      	mov	r0, r4
 80060d2:	f7fe ffbf 	bl	8005054 <__lshift>
 80060d6:	4631      	mov	r1, r6
 80060d8:	ee08 0a10 	vmov	s16, r0
 80060dc:	f7ff f82a 	bl	8005134 <__mcmp>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	dc03      	bgt.n	80060ec <_dtoa_r+0xa9c>
 80060e4:	d1e0      	bne.n	80060a8 <_dtoa_r+0xa58>
 80060e6:	f01a 0f01 	tst.w	sl, #1
 80060ea:	d0dd      	beq.n	80060a8 <_dtoa_r+0xa58>
 80060ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060f0:	d1d7      	bne.n	80060a2 <_dtoa_r+0xa52>
 80060f2:	2339      	movs	r3, #57	; 0x39
 80060f4:	f88b 3000 	strb.w	r3, [fp]
 80060f8:	462b      	mov	r3, r5
 80060fa:	461d      	mov	r5, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006102:	2a39      	cmp	r2, #57	; 0x39
 8006104:	d071      	beq.n	80061ea <_dtoa_r+0xb9a>
 8006106:	3201      	adds	r2, #1
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	e746      	b.n	8005f9a <_dtoa_r+0x94a>
 800610c:	2a00      	cmp	r2, #0
 800610e:	dd07      	ble.n	8006120 <_dtoa_r+0xad0>
 8006110:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006114:	d0ed      	beq.n	80060f2 <_dtoa_r+0xaa2>
 8006116:	f10a 0301 	add.w	r3, sl, #1
 800611a:	f88b 3000 	strb.w	r3, [fp]
 800611e:	e73c      	b.n	8005f9a <_dtoa_r+0x94a>
 8006120:	9b05      	ldr	r3, [sp, #20]
 8006122:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006126:	4599      	cmp	r9, r3
 8006128:	d047      	beq.n	80061ba <_dtoa_r+0xb6a>
 800612a:	ee18 1a10 	vmov	r1, s16
 800612e:	2300      	movs	r3, #0
 8006130:	220a      	movs	r2, #10
 8006132:	4620      	mov	r0, r4
 8006134:	f7fe fdde 	bl	8004cf4 <__multadd>
 8006138:	45b8      	cmp	r8, r7
 800613a:	ee08 0a10 	vmov	s16, r0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	f04f 020a 	mov.w	r2, #10
 8006146:	4641      	mov	r1, r8
 8006148:	4620      	mov	r0, r4
 800614a:	d106      	bne.n	800615a <_dtoa_r+0xb0a>
 800614c:	f7fe fdd2 	bl	8004cf4 <__multadd>
 8006150:	4680      	mov	r8, r0
 8006152:	4607      	mov	r7, r0
 8006154:	f109 0901 	add.w	r9, r9, #1
 8006158:	e772      	b.n	8006040 <_dtoa_r+0x9f0>
 800615a:	f7fe fdcb 	bl	8004cf4 <__multadd>
 800615e:	4639      	mov	r1, r7
 8006160:	4680      	mov	r8, r0
 8006162:	2300      	movs	r3, #0
 8006164:	220a      	movs	r2, #10
 8006166:	4620      	mov	r0, r4
 8006168:	f7fe fdc4 	bl	8004cf4 <__multadd>
 800616c:	4607      	mov	r7, r0
 800616e:	e7f1      	b.n	8006154 <_dtoa_r+0xb04>
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	9302      	str	r3, [sp, #8]
 8006174:	9d01      	ldr	r5, [sp, #4]
 8006176:	ee18 0a10 	vmov	r0, s16
 800617a:	4631      	mov	r1, r6
 800617c:	f7ff f9da 	bl	8005534 <quorem>
 8006180:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006184:	9b01      	ldr	r3, [sp, #4]
 8006186:	f805 ab01 	strb.w	sl, [r5], #1
 800618a:	1aea      	subs	r2, r5, r3
 800618c:	9b02      	ldr	r3, [sp, #8]
 800618e:	4293      	cmp	r3, r2
 8006190:	dd09      	ble.n	80061a6 <_dtoa_r+0xb56>
 8006192:	ee18 1a10 	vmov	r1, s16
 8006196:	2300      	movs	r3, #0
 8006198:	220a      	movs	r2, #10
 800619a:	4620      	mov	r0, r4
 800619c:	f7fe fdaa 	bl	8004cf4 <__multadd>
 80061a0:	ee08 0a10 	vmov	s16, r0
 80061a4:	e7e7      	b.n	8006176 <_dtoa_r+0xb26>
 80061a6:	9b02      	ldr	r3, [sp, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bfc8      	it	gt
 80061ac:	461d      	movgt	r5, r3
 80061ae:	9b01      	ldr	r3, [sp, #4]
 80061b0:	bfd8      	it	le
 80061b2:	2501      	movle	r5, #1
 80061b4:	441d      	add	r5, r3
 80061b6:	f04f 0800 	mov.w	r8, #0
 80061ba:	ee18 1a10 	vmov	r1, s16
 80061be:	2201      	movs	r2, #1
 80061c0:	4620      	mov	r0, r4
 80061c2:	f7fe ff47 	bl	8005054 <__lshift>
 80061c6:	4631      	mov	r1, r6
 80061c8:	ee08 0a10 	vmov	s16, r0
 80061cc:	f7fe ffb2 	bl	8005134 <__mcmp>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	dc91      	bgt.n	80060f8 <_dtoa_r+0xaa8>
 80061d4:	d102      	bne.n	80061dc <_dtoa_r+0xb8c>
 80061d6:	f01a 0f01 	tst.w	sl, #1
 80061da:	d18d      	bne.n	80060f8 <_dtoa_r+0xaa8>
 80061dc:	462b      	mov	r3, r5
 80061de:	461d      	mov	r5, r3
 80061e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061e4:	2a30      	cmp	r2, #48	; 0x30
 80061e6:	d0fa      	beq.n	80061de <_dtoa_r+0xb8e>
 80061e8:	e6d7      	b.n	8005f9a <_dtoa_r+0x94a>
 80061ea:	9a01      	ldr	r2, [sp, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d184      	bne.n	80060fa <_dtoa_r+0xaaa>
 80061f0:	9b00      	ldr	r3, [sp, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	2331      	movs	r3, #49	; 0x31
 80061f8:	7013      	strb	r3, [r2, #0]
 80061fa:	e6ce      	b.n	8005f9a <_dtoa_r+0x94a>
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <_dtoa_r+0xbd4>)
 80061fe:	f7ff ba95 	b.w	800572c <_dtoa_r+0xdc>
 8006202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006204:	2b00      	cmp	r3, #0
 8006206:	f47f aa6e 	bne.w	80056e6 <_dtoa_r+0x96>
 800620a:	4b07      	ldr	r3, [pc, #28]	; (8006228 <_dtoa_r+0xbd8>)
 800620c:	f7ff ba8e 	b.w	800572c <_dtoa_r+0xdc>
 8006210:	9b02      	ldr	r3, [sp, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	dcae      	bgt.n	8006174 <_dtoa_r+0xb24>
 8006216:	9b06      	ldr	r3, [sp, #24]
 8006218:	2b02      	cmp	r3, #2
 800621a:	f73f aea8 	bgt.w	8005f6e <_dtoa_r+0x91e>
 800621e:	e7a9      	b.n	8006174 <_dtoa_r+0xb24>
 8006220:	08007277 	.word	0x08007277
 8006224:	080073cd 	.word	0x080073cd
 8006228:	080073c0 	.word	0x080073c0

0800622c <fiprintf>:
 800622c:	b40e      	push	{r1, r2, r3}
 800622e:	b503      	push	{r0, r1, lr}
 8006230:	4601      	mov	r1, r0
 8006232:	ab03      	add	r3, sp, #12
 8006234:	4805      	ldr	r0, [pc, #20]	; (800624c <fiprintf+0x20>)
 8006236:	f853 2b04 	ldr.w	r2, [r3], #4
 800623a:	6800      	ldr	r0, [r0, #0]
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	f000 f89f 	bl	8006380 <_vfiprintf_r>
 8006242:	b002      	add	sp, #8
 8006244:	f85d eb04 	ldr.w	lr, [sp], #4
 8006248:	b003      	add	sp, #12
 800624a:	4770      	bx	lr
 800624c:	2000001c 	.word	0x2000001c

08006250 <malloc>:
 8006250:	4b02      	ldr	r3, [pc, #8]	; (800625c <malloc+0xc>)
 8006252:	4601      	mov	r1, r0
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	f7ff b8c3 	b.w	80053e0 <_malloc_r>
 800625a:	bf00      	nop
 800625c:	2000001c 	.word	0x2000001c

08006260 <memcpy>:
 8006260:	440a      	add	r2, r1
 8006262:	4291      	cmp	r1, r2
 8006264:	f100 33ff 	add.w	r3, r0, #4294967295
 8006268:	d100      	bne.n	800626c <memcpy+0xc>
 800626a:	4770      	bx	lr
 800626c:	b510      	push	{r4, lr}
 800626e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006272:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006276:	4291      	cmp	r1, r2
 8006278:	d1f9      	bne.n	800626e <memcpy+0xe>
 800627a:	bd10      	pop	{r4, pc}

0800627c <__malloc_lock>:
 800627c:	4801      	ldr	r0, [pc, #4]	; (8006284 <__malloc_lock+0x8>)
 800627e:	f000 bdc3 	b.w	8006e08 <__retarget_lock_acquire_recursive>
 8006282:	bf00      	nop
 8006284:	20000158 	.word	0x20000158

08006288 <__malloc_unlock>:
 8006288:	4801      	ldr	r0, [pc, #4]	; (8006290 <__malloc_unlock+0x8>)
 800628a:	f000 bdbe 	b.w	8006e0a <__retarget_lock_release_recursive>
 800628e:	bf00      	nop
 8006290:	20000158 	.word	0x20000158

08006294 <_free_r>:
 8006294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006296:	2900      	cmp	r1, #0
 8006298:	d044      	beq.n	8006324 <_free_r+0x90>
 800629a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629e:	9001      	str	r0, [sp, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f1a1 0404 	sub.w	r4, r1, #4
 80062a6:	bfb8      	it	lt
 80062a8:	18e4      	addlt	r4, r4, r3
 80062aa:	f7ff ffe7 	bl	800627c <__malloc_lock>
 80062ae:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <_free_r+0x94>)
 80062b0:	9801      	ldr	r0, [sp, #4]
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	b933      	cbnz	r3, 80062c4 <_free_r+0x30>
 80062b6:	6063      	str	r3, [r4, #4]
 80062b8:	6014      	str	r4, [r2, #0]
 80062ba:	b003      	add	sp, #12
 80062bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062c0:	f7ff bfe2 	b.w	8006288 <__malloc_unlock>
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	d908      	bls.n	80062da <_free_r+0x46>
 80062c8:	6825      	ldr	r5, [r4, #0]
 80062ca:	1961      	adds	r1, r4, r5
 80062cc:	428b      	cmp	r3, r1
 80062ce:	bf01      	itttt	eq
 80062d0:	6819      	ldreq	r1, [r3, #0]
 80062d2:	685b      	ldreq	r3, [r3, #4]
 80062d4:	1949      	addeq	r1, r1, r5
 80062d6:	6021      	streq	r1, [r4, #0]
 80062d8:	e7ed      	b.n	80062b6 <_free_r+0x22>
 80062da:	461a      	mov	r2, r3
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	b10b      	cbz	r3, 80062e4 <_free_r+0x50>
 80062e0:	42a3      	cmp	r3, r4
 80062e2:	d9fa      	bls.n	80062da <_free_r+0x46>
 80062e4:	6811      	ldr	r1, [r2, #0]
 80062e6:	1855      	adds	r5, r2, r1
 80062e8:	42a5      	cmp	r5, r4
 80062ea:	d10b      	bne.n	8006304 <_free_r+0x70>
 80062ec:	6824      	ldr	r4, [r4, #0]
 80062ee:	4421      	add	r1, r4
 80062f0:	1854      	adds	r4, r2, r1
 80062f2:	42a3      	cmp	r3, r4
 80062f4:	6011      	str	r1, [r2, #0]
 80062f6:	d1e0      	bne.n	80062ba <_free_r+0x26>
 80062f8:	681c      	ldr	r4, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	6053      	str	r3, [r2, #4]
 80062fe:	4421      	add	r1, r4
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	e7da      	b.n	80062ba <_free_r+0x26>
 8006304:	d902      	bls.n	800630c <_free_r+0x78>
 8006306:	230c      	movs	r3, #12
 8006308:	6003      	str	r3, [r0, #0]
 800630a:	e7d6      	b.n	80062ba <_free_r+0x26>
 800630c:	6825      	ldr	r5, [r4, #0]
 800630e:	1961      	adds	r1, r4, r5
 8006310:	428b      	cmp	r3, r1
 8006312:	bf04      	itt	eq
 8006314:	6819      	ldreq	r1, [r3, #0]
 8006316:	685b      	ldreq	r3, [r3, #4]
 8006318:	6063      	str	r3, [r4, #4]
 800631a:	bf04      	itt	eq
 800631c:	1949      	addeq	r1, r1, r5
 800631e:	6021      	streq	r1, [r4, #0]
 8006320:	6054      	str	r4, [r2, #4]
 8006322:	e7ca      	b.n	80062ba <_free_r+0x26>
 8006324:	b003      	add	sp, #12
 8006326:	bd30      	pop	{r4, r5, pc}
 8006328:	2000014c 	.word	0x2000014c

0800632c <__sfputc_r>:
 800632c:	6893      	ldr	r3, [r2, #8]
 800632e:	3b01      	subs	r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	b410      	push	{r4}
 8006334:	6093      	str	r3, [r2, #8]
 8006336:	da08      	bge.n	800634a <__sfputc_r+0x1e>
 8006338:	6994      	ldr	r4, [r2, #24]
 800633a:	42a3      	cmp	r3, r4
 800633c:	db01      	blt.n	8006342 <__sfputc_r+0x16>
 800633e:	290a      	cmp	r1, #10
 8006340:	d103      	bne.n	800634a <__sfputc_r+0x1e>
 8006342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006346:	f000 badf 	b.w	8006908 <__swbuf_r>
 800634a:	6813      	ldr	r3, [r2, #0]
 800634c:	1c58      	adds	r0, r3, #1
 800634e:	6010      	str	r0, [r2, #0]
 8006350:	7019      	strb	r1, [r3, #0]
 8006352:	4608      	mov	r0, r1
 8006354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006358:	4770      	bx	lr

0800635a <__sfputs_r>:
 800635a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635c:	4606      	mov	r6, r0
 800635e:	460f      	mov	r7, r1
 8006360:	4614      	mov	r4, r2
 8006362:	18d5      	adds	r5, r2, r3
 8006364:	42ac      	cmp	r4, r5
 8006366:	d101      	bne.n	800636c <__sfputs_r+0x12>
 8006368:	2000      	movs	r0, #0
 800636a:	e007      	b.n	800637c <__sfputs_r+0x22>
 800636c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006370:	463a      	mov	r2, r7
 8006372:	4630      	mov	r0, r6
 8006374:	f7ff ffda 	bl	800632c <__sfputc_r>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d1f3      	bne.n	8006364 <__sfputs_r+0xa>
 800637c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006380 <_vfiprintf_r>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	460d      	mov	r5, r1
 8006386:	b09d      	sub	sp, #116	; 0x74
 8006388:	4614      	mov	r4, r2
 800638a:	4698      	mov	r8, r3
 800638c:	4606      	mov	r6, r0
 800638e:	b118      	cbz	r0, 8006398 <_vfiprintf_r+0x18>
 8006390:	6983      	ldr	r3, [r0, #24]
 8006392:	b90b      	cbnz	r3, 8006398 <_vfiprintf_r+0x18>
 8006394:	f000 fc9a 	bl	8006ccc <__sinit>
 8006398:	4b89      	ldr	r3, [pc, #548]	; (80065c0 <_vfiprintf_r+0x240>)
 800639a:	429d      	cmp	r5, r3
 800639c:	d11b      	bne.n	80063d6 <_vfiprintf_r+0x56>
 800639e:	6875      	ldr	r5, [r6, #4]
 80063a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063a2:	07d9      	lsls	r1, r3, #31
 80063a4:	d405      	bmi.n	80063b2 <_vfiprintf_r+0x32>
 80063a6:	89ab      	ldrh	r3, [r5, #12]
 80063a8:	059a      	lsls	r2, r3, #22
 80063aa:	d402      	bmi.n	80063b2 <_vfiprintf_r+0x32>
 80063ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063ae:	f000 fd2b 	bl	8006e08 <__retarget_lock_acquire_recursive>
 80063b2:	89ab      	ldrh	r3, [r5, #12]
 80063b4:	071b      	lsls	r3, r3, #28
 80063b6:	d501      	bpl.n	80063bc <_vfiprintf_r+0x3c>
 80063b8:	692b      	ldr	r3, [r5, #16]
 80063ba:	b9eb      	cbnz	r3, 80063f8 <_vfiprintf_r+0x78>
 80063bc:	4629      	mov	r1, r5
 80063be:	4630      	mov	r0, r6
 80063c0:	f000 faf4 	bl	80069ac <__swsetup_r>
 80063c4:	b1c0      	cbz	r0, 80063f8 <_vfiprintf_r+0x78>
 80063c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063c8:	07dc      	lsls	r4, r3, #31
 80063ca:	d50e      	bpl.n	80063ea <_vfiprintf_r+0x6a>
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	b01d      	add	sp, #116	; 0x74
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d6:	4b7b      	ldr	r3, [pc, #492]	; (80065c4 <_vfiprintf_r+0x244>)
 80063d8:	429d      	cmp	r5, r3
 80063da:	d101      	bne.n	80063e0 <_vfiprintf_r+0x60>
 80063dc:	68b5      	ldr	r5, [r6, #8]
 80063de:	e7df      	b.n	80063a0 <_vfiprintf_r+0x20>
 80063e0:	4b79      	ldr	r3, [pc, #484]	; (80065c8 <_vfiprintf_r+0x248>)
 80063e2:	429d      	cmp	r5, r3
 80063e4:	bf08      	it	eq
 80063e6:	68f5      	ldreq	r5, [r6, #12]
 80063e8:	e7da      	b.n	80063a0 <_vfiprintf_r+0x20>
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	0598      	lsls	r0, r3, #22
 80063ee:	d4ed      	bmi.n	80063cc <_vfiprintf_r+0x4c>
 80063f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063f2:	f000 fd0a 	bl	8006e0a <__retarget_lock_release_recursive>
 80063f6:	e7e9      	b.n	80063cc <_vfiprintf_r+0x4c>
 80063f8:	2300      	movs	r3, #0
 80063fa:	9309      	str	r3, [sp, #36]	; 0x24
 80063fc:	2320      	movs	r3, #32
 80063fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006402:	f8cd 800c 	str.w	r8, [sp, #12]
 8006406:	2330      	movs	r3, #48	; 0x30
 8006408:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80065cc <_vfiprintf_r+0x24c>
 800640c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006410:	f04f 0901 	mov.w	r9, #1
 8006414:	4623      	mov	r3, r4
 8006416:	469a      	mov	sl, r3
 8006418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800641c:	b10a      	cbz	r2, 8006422 <_vfiprintf_r+0xa2>
 800641e:	2a25      	cmp	r2, #37	; 0x25
 8006420:	d1f9      	bne.n	8006416 <_vfiprintf_r+0x96>
 8006422:	ebba 0b04 	subs.w	fp, sl, r4
 8006426:	d00b      	beq.n	8006440 <_vfiprintf_r+0xc0>
 8006428:	465b      	mov	r3, fp
 800642a:	4622      	mov	r2, r4
 800642c:	4629      	mov	r1, r5
 800642e:	4630      	mov	r0, r6
 8006430:	f7ff ff93 	bl	800635a <__sfputs_r>
 8006434:	3001      	adds	r0, #1
 8006436:	f000 80aa 	beq.w	800658e <_vfiprintf_r+0x20e>
 800643a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800643c:	445a      	add	r2, fp
 800643e:	9209      	str	r2, [sp, #36]	; 0x24
 8006440:	f89a 3000 	ldrb.w	r3, [sl]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80a2 	beq.w	800658e <_vfiprintf_r+0x20e>
 800644a:	2300      	movs	r3, #0
 800644c:	f04f 32ff 	mov.w	r2, #4294967295
 8006450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006454:	f10a 0a01 	add.w	sl, sl, #1
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	9307      	str	r3, [sp, #28]
 800645c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006460:	931a      	str	r3, [sp, #104]	; 0x68
 8006462:	4654      	mov	r4, sl
 8006464:	2205      	movs	r2, #5
 8006466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800646a:	4858      	ldr	r0, [pc, #352]	; (80065cc <_vfiprintf_r+0x24c>)
 800646c:	f7f9 feb0 	bl	80001d0 <memchr>
 8006470:	9a04      	ldr	r2, [sp, #16]
 8006472:	b9d8      	cbnz	r0, 80064ac <_vfiprintf_r+0x12c>
 8006474:	06d1      	lsls	r1, r2, #27
 8006476:	bf44      	itt	mi
 8006478:	2320      	movmi	r3, #32
 800647a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800647e:	0713      	lsls	r3, r2, #28
 8006480:	bf44      	itt	mi
 8006482:	232b      	movmi	r3, #43	; 0x2b
 8006484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006488:	f89a 3000 	ldrb.w	r3, [sl]
 800648c:	2b2a      	cmp	r3, #42	; 0x2a
 800648e:	d015      	beq.n	80064bc <_vfiprintf_r+0x13c>
 8006490:	9a07      	ldr	r2, [sp, #28]
 8006492:	4654      	mov	r4, sl
 8006494:	2000      	movs	r0, #0
 8006496:	f04f 0c0a 	mov.w	ip, #10
 800649a:	4621      	mov	r1, r4
 800649c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064a0:	3b30      	subs	r3, #48	; 0x30
 80064a2:	2b09      	cmp	r3, #9
 80064a4:	d94e      	bls.n	8006544 <_vfiprintf_r+0x1c4>
 80064a6:	b1b0      	cbz	r0, 80064d6 <_vfiprintf_r+0x156>
 80064a8:	9207      	str	r2, [sp, #28]
 80064aa:	e014      	b.n	80064d6 <_vfiprintf_r+0x156>
 80064ac:	eba0 0308 	sub.w	r3, r0, r8
 80064b0:	fa09 f303 	lsl.w	r3, r9, r3
 80064b4:	4313      	orrs	r3, r2
 80064b6:	9304      	str	r3, [sp, #16]
 80064b8:	46a2      	mov	sl, r4
 80064ba:	e7d2      	b.n	8006462 <_vfiprintf_r+0xe2>
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	1d19      	adds	r1, r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	9103      	str	r1, [sp, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfbb      	ittet	lt
 80064c8:	425b      	neglt	r3, r3
 80064ca:	f042 0202 	orrlt.w	r2, r2, #2
 80064ce:	9307      	strge	r3, [sp, #28]
 80064d0:	9307      	strlt	r3, [sp, #28]
 80064d2:	bfb8      	it	lt
 80064d4:	9204      	strlt	r2, [sp, #16]
 80064d6:	7823      	ldrb	r3, [r4, #0]
 80064d8:	2b2e      	cmp	r3, #46	; 0x2e
 80064da:	d10c      	bne.n	80064f6 <_vfiprintf_r+0x176>
 80064dc:	7863      	ldrb	r3, [r4, #1]
 80064de:	2b2a      	cmp	r3, #42	; 0x2a
 80064e0:	d135      	bne.n	800654e <_vfiprintf_r+0x1ce>
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	1d1a      	adds	r2, r3, #4
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	9203      	str	r2, [sp, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	bfb8      	it	lt
 80064ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80064f2:	3402      	adds	r4, #2
 80064f4:	9305      	str	r3, [sp, #20]
 80064f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80065dc <_vfiprintf_r+0x25c>
 80064fa:	7821      	ldrb	r1, [r4, #0]
 80064fc:	2203      	movs	r2, #3
 80064fe:	4650      	mov	r0, sl
 8006500:	f7f9 fe66 	bl	80001d0 <memchr>
 8006504:	b140      	cbz	r0, 8006518 <_vfiprintf_r+0x198>
 8006506:	2340      	movs	r3, #64	; 0x40
 8006508:	eba0 000a 	sub.w	r0, r0, sl
 800650c:	fa03 f000 	lsl.w	r0, r3, r0
 8006510:	9b04      	ldr	r3, [sp, #16]
 8006512:	4303      	orrs	r3, r0
 8006514:	3401      	adds	r4, #1
 8006516:	9304      	str	r3, [sp, #16]
 8006518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800651c:	482c      	ldr	r0, [pc, #176]	; (80065d0 <_vfiprintf_r+0x250>)
 800651e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006522:	2206      	movs	r2, #6
 8006524:	f7f9 fe54 	bl	80001d0 <memchr>
 8006528:	2800      	cmp	r0, #0
 800652a:	d03f      	beq.n	80065ac <_vfiprintf_r+0x22c>
 800652c:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <_vfiprintf_r+0x254>)
 800652e:	bb1b      	cbnz	r3, 8006578 <_vfiprintf_r+0x1f8>
 8006530:	9b03      	ldr	r3, [sp, #12]
 8006532:	3307      	adds	r3, #7
 8006534:	f023 0307 	bic.w	r3, r3, #7
 8006538:	3308      	adds	r3, #8
 800653a:	9303      	str	r3, [sp, #12]
 800653c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653e:	443b      	add	r3, r7
 8006540:	9309      	str	r3, [sp, #36]	; 0x24
 8006542:	e767      	b.n	8006414 <_vfiprintf_r+0x94>
 8006544:	fb0c 3202 	mla	r2, ip, r2, r3
 8006548:	460c      	mov	r4, r1
 800654a:	2001      	movs	r0, #1
 800654c:	e7a5      	b.n	800649a <_vfiprintf_r+0x11a>
 800654e:	2300      	movs	r3, #0
 8006550:	3401      	adds	r4, #1
 8006552:	9305      	str	r3, [sp, #20]
 8006554:	4619      	mov	r1, r3
 8006556:	f04f 0c0a 	mov.w	ip, #10
 800655a:	4620      	mov	r0, r4
 800655c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006560:	3a30      	subs	r2, #48	; 0x30
 8006562:	2a09      	cmp	r2, #9
 8006564:	d903      	bls.n	800656e <_vfiprintf_r+0x1ee>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0c5      	beq.n	80064f6 <_vfiprintf_r+0x176>
 800656a:	9105      	str	r1, [sp, #20]
 800656c:	e7c3      	b.n	80064f6 <_vfiprintf_r+0x176>
 800656e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006572:	4604      	mov	r4, r0
 8006574:	2301      	movs	r3, #1
 8006576:	e7f0      	b.n	800655a <_vfiprintf_r+0x1da>
 8006578:	ab03      	add	r3, sp, #12
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	462a      	mov	r2, r5
 800657e:	4b16      	ldr	r3, [pc, #88]	; (80065d8 <_vfiprintf_r+0x258>)
 8006580:	a904      	add	r1, sp, #16
 8006582:	4630      	mov	r0, r6
 8006584:	f3af 8000 	nop.w
 8006588:	4607      	mov	r7, r0
 800658a:	1c78      	adds	r0, r7, #1
 800658c:	d1d6      	bne.n	800653c <_vfiprintf_r+0x1bc>
 800658e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006590:	07d9      	lsls	r1, r3, #31
 8006592:	d405      	bmi.n	80065a0 <_vfiprintf_r+0x220>
 8006594:	89ab      	ldrh	r3, [r5, #12]
 8006596:	059a      	lsls	r2, r3, #22
 8006598:	d402      	bmi.n	80065a0 <_vfiprintf_r+0x220>
 800659a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800659c:	f000 fc35 	bl	8006e0a <__retarget_lock_release_recursive>
 80065a0:	89ab      	ldrh	r3, [r5, #12]
 80065a2:	065b      	lsls	r3, r3, #25
 80065a4:	f53f af12 	bmi.w	80063cc <_vfiprintf_r+0x4c>
 80065a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065aa:	e711      	b.n	80063d0 <_vfiprintf_r+0x50>
 80065ac:	ab03      	add	r3, sp, #12
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	462a      	mov	r2, r5
 80065b2:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <_vfiprintf_r+0x258>)
 80065b4:	a904      	add	r1, sp, #16
 80065b6:	4630      	mov	r0, r6
 80065b8:	f000 f880 	bl	80066bc <_printf_i>
 80065bc:	e7e4      	b.n	8006588 <_vfiprintf_r+0x208>
 80065be:	bf00      	nop
 80065c0:	08007480 	.word	0x08007480
 80065c4:	080074a0 	.word	0x080074a0
 80065c8:	08007460 	.word	0x08007460
 80065cc:	0800742a 	.word	0x0800742a
 80065d0:	08007434 	.word	0x08007434
 80065d4:	00000000 	.word	0x00000000
 80065d8:	0800635b 	.word	0x0800635b
 80065dc:	08007430 	.word	0x08007430

080065e0 <_printf_common>:
 80065e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e4:	4616      	mov	r6, r2
 80065e6:	4699      	mov	r9, r3
 80065e8:	688a      	ldr	r2, [r1, #8]
 80065ea:	690b      	ldr	r3, [r1, #16]
 80065ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065f0:	4293      	cmp	r3, r2
 80065f2:	bfb8      	it	lt
 80065f4:	4613      	movlt	r3, r2
 80065f6:	6033      	str	r3, [r6, #0]
 80065f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065fc:	4607      	mov	r7, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	b10a      	cbz	r2, 8006606 <_printf_common+0x26>
 8006602:	3301      	adds	r3, #1
 8006604:	6033      	str	r3, [r6, #0]
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	0699      	lsls	r1, r3, #26
 800660a:	bf42      	ittt	mi
 800660c:	6833      	ldrmi	r3, [r6, #0]
 800660e:	3302      	addmi	r3, #2
 8006610:	6033      	strmi	r3, [r6, #0]
 8006612:	6825      	ldr	r5, [r4, #0]
 8006614:	f015 0506 	ands.w	r5, r5, #6
 8006618:	d106      	bne.n	8006628 <_printf_common+0x48>
 800661a:	f104 0a19 	add.w	sl, r4, #25
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	6832      	ldr	r2, [r6, #0]
 8006622:	1a9b      	subs	r3, r3, r2
 8006624:	42ab      	cmp	r3, r5
 8006626:	dc26      	bgt.n	8006676 <_printf_common+0x96>
 8006628:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800662c:	1e13      	subs	r3, r2, #0
 800662e:	6822      	ldr	r2, [r4, #0]
 8006630:	bf18      	it	ne
 8006632:	2301      	movne	r3, #1
 8006634:	0692      	lsls	r2, r2, #26
 8006636:	d42b      	bmi.n	8006690 <_printf_common+0xb0>
 8006638:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800663c:	4649      	mov	r1, r9
 800663e:	4638      	mov	r0, r7
 8006640:	47c0      	blx	r8
 8006642:	3001      	adds	r0, #1
 8006644:	d01e      	beq.n	8006684 <_printf_common+0xa4>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	68e5      	ldr	r5, [r4, #12]
 800664a:	6832      	ldr	r2, [r6, #0]
 800664c:	f003 0306 	and.w	r3, r3, #6
 8006650:	2b04      	cmp	r3, #4
 8006652:	bf08      	it	eq
 8006654:	1aad      	subeq	r5, r5, r2
 8006656:	68a3      	ldr	r3, [r4, #8]
 8006658:	6922      	ldr	r2, [r4, #16]
 800665a:	bf0c      	ite	eq
 800665c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006660:	2500      	movne	r5, #0
 8006662:	4293      	cmp	r3, r2
 8006664:	bfc4      	itt	gt
 8006666:	1a9b      	subgt	r3, r3, r2
 8006668:	18ed      	addgt	r5, r5, r3
 800666a:	2600      	movs	r6, #0
 800666c:	341a      	adds	r4, #26
 800666e:	42b5      	cmp	r5, r6
 8006670:	d11a      	bne.n	80066a8 <_printf_common+0xc8>
 8006672:	2000      	movs	r0, #0
 8006674:	e008      	b.n	8006688 <_printf_common+0xa8>
 8006676:	2301      	movs	r3, #1
 8006678:	4652      	mov	r2, sl
 800667a:	4649      	mov	r1, r9
 800667c:	4638      	mov	r0, r7
 800667e:	47c0      	blx	r8
 8006680:	3001      	adds	r0, #1
 8006682:	d103      	bne.n	800668c <_printf_common+0xac>
 8006684:	f04f 30ff 	mov.w	r0, #4294967295
 8006688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668c:	3501      	adds	r5, #1
 800668e:	e7c6      	b.n	800661e <_printf_common+0x3e>
 8006690:	18e1      	adds	r1, r4, r3
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	2030      	movs	r0, #48	; 0x30
 8006696:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800669a:	4422      	add	r2, r4
 800669c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066a4:	3302      	adds	r3, #2
 80066a6:	e7c7      	b.n	8006638 <_printf_common+0x58>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4622      	mov	r2, r4
 80066ac:	4649      	mov	r1, r9
 80066ae:	4638      	mov	r0, r7
 80066b0:	47c0      	blx	r8
 80066b2:	3001      	adds	r0, #1
 80066b4:	d0e6      	beq.n	8006684 <_printf_common+0xa4>
 80066b6:	3601      	adds	r6, #1
 80066b8:	e7d9      	b.n	800666e <_printf_common+0x8e>
	...

080066bc <_printf_i>:
 80066bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066c0:	7e0f      	ldrb	r7, [r1, #24]
 80066c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066c4:	2f78      	cmp	r7, #120	; 0x78
 80066c6:	4691      	mov	r9, r2
 80066c8:	4680      	mov	r8, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	469a      	mov	sl, r3
 80066ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066d2:	d807      	bhi.n	80066e4 <_printf_i+0x28>
 80066d4:	2f62      	cmp	r7, #98	; 0x62
 80066d6:	d80a      	bhi.n	80066ee <_printf_i+0x32>
 80066d8:	2f00      	cmp	r7, #0
 80066da:	f000 80d8 	beq.w	800688e <_printf_i+0x1d2>
 80066de:	2f58      	cmp	r7, #88	; 0x58
 80066e0:	f000 80a3 	beq.w	800682a <_printf_i+0x16e>
 80066e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066ec:	e03a      	b.n	8006764 <_printf_i+0xa8>
 80066ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066f2:	2b15      	cmp	r3, #21
 80066f4:	d8f6      	bhi.n	80066e4 <_printf_i+0x28>
 80066f6:	a101      	add	r1, pc, #4	; (adr r1, 80066fc <_printf_i+0x40>)
 80066f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066fc:	08006755 	.word	0x08006755
 8006700:	08006769 	.word	0x08006769
 8006704:	080066e5 	.word	0x080066e5
 8006708:	080066e5 	.word	0x080066e5
 800670c:	080066e5 	.word	0x080066e5
 8006710:	080066e5 	.word	0x080066e5
 8006714:	08006769 	.word	0x08006769
 8006718:	080066e5 	.word	0x080066e5
 800671c:	080066e5 	.word	0x080066e5
 8006720:	080066e5 	.word	0x080066e5
 8006724:	080066e5 	.word	0x080066e5
 8006728:	08006875 	.word	0x08006875
 800672c:	08006799 	.word	0x08006799
 8006730:	08006857 	.word	0x08006857
 8006734:	080066e5 	.word	0x080066e5
 8006738:	080066e5 	.word	0x080066e5
 800673c:	08006897 	.word	0x08006897
 8006740:	080066e5 	.word	0x080066e5
 8006744:	08006799 	.word	0x08006799
 8006748:	080066e5 	.word	0x080066e5
 800674c:	080066e5 	.word	0x080066e5
 8006750:	0800685f 	.word	0x0800685f
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	1d1a      	adds	r2, r3, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	602a      	str	r2, [r5, #0]
 800675c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006764:	2301      	movs	r3, #1
 8006766:	e0a3      	b.n	80068b0 <_printf_i+0x1f4>
 8006768:	6820      	ldr	r0, [r4, #0]
 800676a:	6829      	ldr	r1, [r5, #0]
 800676c:	0606      	lsls	r6, r0, #24
 800676e:	f101 0304 	add.w	r3, r1, #4
 8006772:	d50a      	bpl.n	800678a <_printf_i+0xce>
 8006774:	680e      	ldr	r6, [r1, #0]
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	2e00      	cmp	r6, #0
 800677a:	da03      	bge.n	8006784 <_printf_i+0xc8>
 800677c:	232d      	movs	r3, #45	; 0x2d
 800677e:	4276      	negs	r6, r6
 8006780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006784:	485e      	ldr	r0, [pc, #376]	; (8006900 <_printf_i+0x244>)
 8006786:	230a      	movs	r3, #10
 8006788:	e019      	b.n	80067be <_printf_i+0x102>
 800678a:	680e      	ldr	r6, [r1, #0]
 800678c:	602b      	str	r3, [r5, #0]
 800678e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006792:	bf18      	it	ne
 8006794:	b236      	sxthne	r6, r6
 8006796:	e7ef      	b.n	8006778 <_printf_i+0xbc>
 8006798:	682b      	ldr	r3, [r5, #0]
 800679a:	6820      	ldr	r0, [r4, #0]
 800679c:	1d19      	adds	r1, r3, #4
 800679e:	6029      	str	r1, [r5, #0]
 80067a0:	0601      	lsls	r1, r0, #24
 80067a2:	d501      	bpl.n	80067a8 <_printf_i+0xec>
 80067a4:	681e      	ldr	r6, [r3, #0]
 80067a6:	e002      	b.n	80067ae <_printf_i+0xf2>
 80067a8:	0646      	lsls	r6, r0, #25
 80067aa:	d5fb      	bpl.n	80067a4 <_printf_i+0xe8>
 80067ac:	881e      	ldrh	r6, [r3, #0]
 80067ae:	4854      	ldr	r0, [pc, #336]	; (8006900 <_printf_i+0x244>)
 80067b0:	2f6f      	cmp	r7, #111	; 0x6f
 80067b2:	bf0c      	ite	eq
 80067b4:	2308      	moveq	r3, #8
 80067b6:	230a      	movne	r3, #10
 80067b8:	2100      	movs	r1, #0
 80067ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067be:	6865      	ldr	r5, [r4, #4]
 80067c0:	60a5      	str	r5, [r4, #8]
 80067c2:	2d00      	cmp	r5, #0
 80067c4:	bfa2      	ittt	ge
 80067c6:	6821      	ldrge	r1, [r4, #0]
 80067c8:	f021 0104 	bicge.w	r1, r1, #4
 80067cc:	6021      	strge	r1, [r4, #0]
 80067ce:	b90e      	cbnz	r6, 80067d4 <_printf_i+0x118>
 80067d0:	2d00      	cmp	r5, #0
 80067d2:	d04d      	beq.n	8006870 <_printf_i+0x1b4>
 80067d4:	4615      	mov	r5, r2
 80067d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80067da:	fb03 6711 	mls	r7, r3, r1, r6
 80067de:	5dc7      	ldrb	r7, [r0, r7]
 80067e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067e4:	4637      	mov	r7, r6
 80067e6:	42bb      	cmp	r3, r7
 80067e8:	460e      	mov	r6, r1
 80067ea:	d9f4      	bls.n	80067d6 <_printf_i+0x11a>
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d10b      	bne.n	8006808 <_printf_i+0x14c>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	07de      	lsls	r6, r3, #31
 80067f4:	d508      	bpl.n	8006808 <_printf_i+0x14c>
 80067f6:	6923      	ldr	r3, [r4, #16]
 80067f8:	6861      	ldr	r1, [r4, #4]
 80067fa:	4299      	cmp	r1, r3
 80067fc:	bfde      	ittt	le
 80067fe:	2330      	movle	r3, #48	; 0x30
 8006800:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006804:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006808:	1b52      	subs	r2, r2, r5
 800680a:	6122      	str	r2, [r4, #16]
 800680c:	f8cd a000 	str.w	sl, [sp]
 8006810:	464b      	mov	r3, r9
 8006812:	aa03      	add	r2, sp, #12
 8006814:	4621      	mov	r1, r4
 8006816:	4640      	mov	r0, r8
 8006818:	f7ff fee2 	bl	80065e0 <_printf_common>
 800681c:	3001      	adds	r0, #1
 800681e:	d14c      	bne.n	80068ba <_printf_i+0x1fe>
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	b004      	add	sp, #16
 8006826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682a:	4835      	ldr	r0, [pc, #212]	; (8006900 <_printf_i+0x244>)
 800682c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006830:	6829      	ldr	r1, [r5, #0]
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	f851 6b04 	ldr.w	r6, [r1], #4
 8006838:	6029      	str	r1, [r5, #0]
 800683a:	061d      	lsls	r5, r3, #24
 800683c:	d514      	bpl.n	8006868 <_printf_i+0x1ac>
 800683e:	07df      	lsls	r7, r3, #31
 8006840:	bf44      	itt	mi
 8006842:	f043 0320 	orrmi.w	r3, r3, #32
 8006846:	6023      	strmi	r3, [r4, #0]
 8006848:	b91e      	cbnz	r6, 8006852 <_printf_i+0x196>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	f023 0320 	bic.w	r3, r3, #32
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	2310      	movs	r3, #16
 8006854:	e7b0      	b.n	80067b8 <_printf_i+0xfc>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	f043 0320 	orr.w	r3, r3, #32
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	2378      	movs	r3, #120	; 0x78
 8006860:	4828      	ldr	r0, [pc, #160]	; (8006904 <_printf_i+0x248>)
 8006862:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006866:	e7e3      	b.n	8006830 <_printf_i+0x174>
 8006868:	0659      	lsls	r1, r3, #25
 800686a:	bf48      	it	mi
 800686c:	b2b6      	uxthmi	r6, r6
 800686e:	e7e6      	b.n	800683e <_printf_i+0x182>
 8006870:	4615      	mov	r5, r2
 8006872:	e7bb      	b.n	80067ec <_printf_i+0x130>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	6826      	ldr	r6, [r4, #0]
 8006878:	6961      	ldr	r1, [r4, #20]
 800687a:	1d18      	adds	r0, r3, #4
 800687c:	6028      	str	r0, [r5, #0]
 800687e:	0635      	lsls	r5, r6, #24
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	d501      	bpl.n	8006888 <_printf_i+0x1cc>
 8006884:	6019      	str	r1, [r3, #0]
 8006886:	e002      	b.n	800688e <_printf_i+0x1d2>
 8006888:	0670      	lsls	r0, r6, #25
 800688a:	d5fb      	bpl.n	8006884 <_printf_i+0x1c8>
 800688c:	8019      	strh	r1, [r3, #0]
 800688e:	2300      	movs	r3, #0
 8006890:	6123      	str	r3, [r4, #16]
 8006892:	4615      	mov	r5, r2
 8006894:	e7ba      	b.n	800680c <_printf_i+0x150>
 8006896:	682b      	ldr	r3, [r5, #0]
 8006898:	1d1a      	adds	r2, r3, #4
 800689a:	602a      	str	r2, [r5, #0]
 800689c:	681d      	ldr	r5, [r3, #0]
 800689e:	6862      	ldr	r2, [r4, #4]
 80068a0:	2100      	movs	r1, #0
 80068a2:	4628      	mov	r0, r5
 80068a4:	f7f9 fc94 	bl	80001d0 <memchr>
 80068a8:	b108      	cbz	r0, 80068ae <_printf_i+0x1f2>
 80068aa:	1b40      	subs	r0, r0, r5
 80068ac:	6060      	str	r0, [r4, #4]
 80068ae:	6863      	ldr	r3, [r4, #4]
 80068b0:	6123      	str	r3, [r4, #16]
 80068b2:	2300      	movs	r3, #0
 80068b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b8:	e7a8      	b.n	800680c <_printf_i+0x150>
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	462a      	mov	r2, r5
 80068be:	4649      	mov	r1, r9
 80068c0:	4640      	mov	r0, r8
 80068c2:	47d0      	blx	sl
 80068c4:	3001      	adds	r0, #1
 80068c6:	d0ab      	beq.n	8006820 <_printf_i+0x164>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	079b      	lsls	r3, r3, #30
 80068cc:	d413      	bmi.n	80068f6 <_printf_i+0x23a>
 80068ce:	68e0      	ldr	r0, [r4, #12]
 80068d0:	9b03      	ldr	r3, [sp, #12]
 80068d2:	4298      	cmp	r0, r3
 80068d4:	bfb8      	it	lt
 80068d6:	4618      	movlt	r0, r3
 80068d8:	e7a4      	b.n	8006824 <_printf_i+0x168>
 80068da:	2301      	movs	r3, #1
 80068dc:	4632      	mov	r2, r6
 80068de:	4649      	mov	r1, r9
 80068e0:	4640      	mov	r0, r8
 80068e2:	47d0      	blx	sl
 80068e4:	3001      	adds	r0, #1
 80068e6:	d09b      	beq.n	8006820 <_printf_i+0x164>
 80068e8:	3501      	adds	r5, #1
 80068ea:	68e3      	ldr	r3, [r4, #12]
 80068ec:	9903      	ldr	r1, [sp, #12]
 80068ee:	1a5b      	subs	r3, r3, r1
 80068f0:	42ab      	cmp	r3, r5
 80068f2:	dcf2      	bgt.n	80068da <_printf_i+0x21e>
 80068f4:	e7eb      	b.n	80068ce <_printf_i+0x212>
 80068f6:	2500      	movs	r5, #0
 80068f8:	f104 0619 	add.w	r6, r4, #25
 80068fc:	e7f5      	b.n	80068ea <_printf_i+0x22e>
 80068fe:	bf00      	nop
 8006900:	0800743b 	.word	0x0800743b
 8006904:	0800744c 	.word	0x0800744c

08006908 <__swbuf_r>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	460e      	mov	r6, r1
 800690c:	4614      	mov	r4, r2
 800690e:	4605      	mov	r5, r0
 8006910:	b118      	cbz	r0, 800691a <__swbuf_r+0x12>
 8006912:	6983      	ldr	r3, [r0, #24]
 8006914:	b90b      	cbnz	r3, 800691a <__swbuf_r+0x12>
 8006916:	f000 f9d9 	bl	8006ccc <__sinit>
 800691a:	4b21      	ldr	r3, [pc, #132]	; (80069a0 <__swbuf_r+0x98>)
 800691c:	429c      	cmp	r4, r3
 800691e:	d12b      	bne.n	8006978 <__swbuf_r+0x70>
 8006920:	686c      	ldr	r4, [r5, #4]
 8006922:	69a3      	ldr	r3, [r4, #24]
 8006924:	60a3      	str	r3, [r4, #8]
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	071a      	lsls	r2, r3, #28
 800692a:	d52f      	bpl.n	800698c <__swbuf_r+0x84>
 800692c:	6923      	ldr	r3, [r4, #16]
 800692e:	b36b      	cbz	r3, 800698c <__swbuf_r+0x84>
 8006930:	6923      	ldr	r3, [r4, #16]
 8006932:	6820      	ldr	r0, [r4, #0]
 8006934:	1ac0      	subs	r0, r0, r3
 8006936:	6963      	ldr	r3, [r4, #20]
 8006938:	b2f6      	uxtb	r6, r6
 800693a:	4283      	cmp	r3, r0
 800693c:	4637      	mov	r7, r6
 800693e:	dc04      	bgt.n	800694a <__swbuf_r+0x42>
 8006940:	4621      	mov	r1, r4
 8006942:	4628      	mov	r0, r5
 8006944:	f000 f92e 	bl	8006ba4 <_fflush_r>
 8006948:	bb30      	cbnz	r0, 8006998 <__swbuf_r+0x90>
 800694a:	68a3      	ldr	r3, [r4, #8]
 800694c:	3b01      	subs	r3, #1
 800694e:	60a3      	str	r3, [r4, #8]
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	6022      	str	r2, [r4, #0]
 8006956:	701e      	strb	r6, [r3, #0]
 8006958:	6963      	ldr	r3, [r4, #20]
 800695a:	3001      	adds	r0, #1
 800695c:	4283      	cmp	r3, r0
 800695e:	d004      	beq.n	800696a <__swbuf_r+0x62>
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	07db      	lsls	r3, r3, #31
 8006964:	d506      	bpl.n	8006974 <__swbuf_r+0x6c>
 8006966:	2e0a      	cmp	r6, #10
 8006968:	d104      	bne.n	8006974 <__swbuf_r+0x6c>
 800696a:	4621      	mov	r1, r4
 800696c:	4628      	mov	r0, r5
 800696e:	f000 f919 	bl	8006ba4 <_fflush_r>
 8006972:	b988      	cbnz	r0, 8006998 <__swbuf_r+0x90>
 8006974:	4638      	mov	r0, r7
 8006976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <__swbuf_r+0x9c>)
 800697a:	429c      	cmp	r4, r3
 800697c:	d101      	bne.n	8006982 <__swbuf_r+0x7a>
 800697e:	68ac      	ldr	r4, [r5, #8]
 8006980:	e7cf      	b.n	8006922 <__swbuf_r+0x1a>
 8006982:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <__swbuf_r+0xa0>)
 8006984:	429c      	cmp	r4, r3
 8006986:	bf08      	it	eq
 8006988:	68ec      	ldreq	r4, [r5, #12]
 800698a:	e7ca      	b.n	8006922 <__swbuf_r+0x1a>
 800698c:	4621      	mov	r1, r4
 800698e:	4628      	mov	r0, r5
 8006990:	f000 f80c 	bl	80069ac <__swsetup_r>
 8006994:	2800      	cmp	r0, #0
 8006996:	d0cb      	beq.n	8006930 <__swbuf_r+0x28>
 8006998:	f04f 37ff 	mov.w	r7, #4294967295
 800699c:	e7ea      	b.n	8006974 <__swbuf_r+0x6c>
 800699e:	bf00      	nop
 80069a0:	08007480 	.word	0x08007480
 80069a4:	080074a0 	.word	0x080074a0
 80069a8:	08007460 	.word	0x08007460

080069ac <__swsetup_r>:
 80069ac:	4b32      	ldr	r3, [pc, #200]	; (8006a78 <__swsetup_r+0xcc>)
 80069ae:	b570      	push	{r4, r5, r6, lr}
 80069b0:	681d      	ldr	r5, [r3, #0]
 80069b2:	4606      	mov	r6, r0
 80069b4:	460c      	mov	r4, r1
 80069b6:	b125      	cbz	r5, 80069c2 <__swsetup_r+0x16>
 80069b8:	69ab      	ldr	r3, [r5, #24]
 80069ba:	b913      	cbnz	r3, 80069c2 <__swsetup_r+0x16>
 80069bc:	4628      	mov	r0, r5
 80069be:	f000 f985 	bl	8006ccc <__sinit>
 80069c2:	4b2e      	ldr	r3, [pc, #184]	; (8006a7c <__swsetup_r+0xd0>)
 80069c4:	429c      	cmp	r4, r3
 80069c6:	d10f      	bne.n	80069e8 <__swsetup_r+0x3c>
 80069c8:	686c      	ldr	r4, [r5, #4]
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069d0:	0719      	lsls	r1, r3, #28
 80069d2:	d42c      	bmi.n	8006a2e <__swsetup_r+0x82>
 80069d4:	06dd      	lsls	r5, r3, #27
 80069d6:	d411      	bmi.n	80069fc <__swsetup_r+0x50>
 80069d8:	2309      	movs	r3, #9
 80069da:	6033      	str	r3, [r6, #0]
 80069dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069e0:	81a3      	strh	r3, [r4, #12]
 80069e2:	f04f 30ff 	mov.w	r0, #4294967295
 80069e6:	e03e      	b.n	8006a66 <__swsetup_r+0xba>
 80069e8:	4b25      	ldr	r3, [pc, #148]	; (8006a80 <__swsetup_r+0xd4>)
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d101      	bne.n	80069f2 <__swsetup_r+0x46>
 80069ee:	68ac      	ldr	r4, [r5, #8]
 80069f0:	e7eb      	b.n	80069ca <__swsetup_r+0x1e>
 80069f2:	4b24      	ldr	r3, [pc, #144]	; (8006a84 <__swsetup_r+0xd8>)
 80069f4:	429c      	cmp	r4, r3
 80069f6:	bf08      	it	eq
 80069f8:	68ec      	ldreq	r4, [r5, #12]
 80069fa:	e7e6      	b.n	80069ca <__swsetup_r+0x1e>
 80069fc:	0758      	lsls	r0, r3, #29
 80069fe:	d512      	bpl.n	8006a26 <__swsetup_r+0x7a>
 8006a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a02:	b141      	cbz	r1, 8006a16 <__swsetup_r+0x6a>
 8006a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a08:	4299      	cmp	r1, r3
 8006a0a:	d002      	beq.n	8006a12 <__swsetup_r+0x66>
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f7ff fc41 	bl	8006294 <_free_r>
 8006a12:	2300      	movs	r3, #0
 8006a14:	6363      	str	r3, [r4, #52]	; 0x34
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a1c:	81a3      	strh	r3, [r4, #12]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	6063      	str	r3, [r4, #4]
 8006a22:	6923      	ldr	r3, [r4, #16]
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	f043 0308 	orr.w	r3, r3, #8
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	b94b      	cbnz	r3, 8006a46 <__swsetup_r+0x9a>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a3c:	d003      	beq.n	8006a46 <__swsetup_r+0x9a>
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4630      	mov	r0, r6
 8006a42:	f000 fa09 	bl	8006e58 <__smakebuf_r>
 8006a46:	89a0      	ldrh	r0, [r4, #12]
 8006a48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a4c:	f010 0301 	ands.w	r3, r0, #1
 8006a50:	d00a      	beq.n	8006a68 <__swsetup_r+0xbc>
 8006a52:	2300      	movs	r3, #0
 8006a54:	60a3      	str	r3, [r4, #8]
 8006a56:	6963      	ldr	r3, [r4, #20]
 8006a58:	425b      	negs	r3, r3
 8006a5a:	61a3      	str	r3, [r4, #24]
 8006a5c:	6923      	ldr	r3, [r4, #16]
 8006a5e:	b943      	cbnz	r3, 8006a72 <__swsetup_r+0xc6>
 8006a60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a64:	d1ba      	bne.n	80069dc <__swsetup_r+0x30>
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	0781      	lsls	r1, r0, #30
 8006a6a:	bf58      	it	pl
 8006a6c:	6963      	ldrpl	r3, [r4, #20]
 8006a6e:	60a3      	str	r3, [r4, #8]
 8006a70:	e7f4      	b.n	8006a5c <__swsetup_r+0xb0>
 8006a72:	2000      	movs	r0, #0
 8006a74:	e7f7      	b.n	8006a66 <__swsetup_r+0xba>
 8006a76:	bf00      	nop
 8006a78:	2000001c 	.word	0x2000001c
 8006a7c:	08007480 	.word	0x08007480
 8006a80:	080074a0 	.word	0x080074a0
 8006a84:	08007460 	.word	0x08007460

08006a88 <abort>:
 8006a88:	b508      	push	{r3, lr}
 8006a8a:	2006      	movs	r0, #6
 8006a8c:	f000 fa4c 	bl	8006f28 <raise>
 8006a90:	2001      	movs	r0, #1
 8006a92:	f7fa ffad 	bl	80019f0 <_exit>
	...

08006a98 <__sflush_r>:
 8006a98:	898a      	ldrh	r2, [r1, #12]
 8006a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	0710      	lsls	r0, r2, #28
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	d458      	bmi.n	8006b58 <__sflush_r+0xc0>
 8006aa6:	684b      	ldr	r3, [r1, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	dc05      	bgt.n	8006ab8 <__sflush_r+0x20>
 8006aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dc02      	bgt.n	8006ab8 <__sflush_r+0x20>
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aba:	2e00      	cmp	r6, #0
 8006abc:	d0f9      	beq.n	8006ab2 <__sflush_r+0x1a>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ac4:	682f      	ldr	r7, [r5, #0]
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	d032      	beq.n	8006b30 <__sflush_r+0x98>
 8006aca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	075a      	lsls	r2, r3, #29
 8006ad0:	d505      	bpl.n	8006ade <__sflush_r+0x46>
 8006ad2:	6863      	ldr	r3, [r4, #4]
 8006ad4:	1ac0      	subs	r0, r0, r3
 8006ad6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ad8:	b10b      	cbz	r3, 8006ade <__sflush_r+0x46>
 8006ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006adc:	1ac0      	subs	r0, r0, r3
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ae4:	6a21      	ldr	r1, [r4, #32]
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	47b0      	blx	r6
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	d106      	bne.n	8006afe <__sflush_r+0x66>
 8006af0:	6829      	ldr	r1, [r5, #0]
 8006af2:	291d      	cmp	r1, #29
 8006af4:	d82c      	bhi.n	8006b50 <__sflush_r+0xb8>
 8006af6:	4a2a      	ldr	r2, [pc, #168]	; (8006ba0 <__sflush_r+0x108>)
 8006af8:	40ca      	lsrs	r2, r1
 8006afa:	07d6      	lsls	r6, r2, #31
 8006afc:	d528      	bpl.n	8006b50 <__sflush_r+0xb8>
 8006afe:	2200      	movs	r2, #0
 8006b00:	6062      	str	r2, [r4, #4]
 8006b02:	04d9      	lsls	r1, r3, #19
 8006b04:	6922      	ldr	r2, [r4, #16]
 8006b06:	6022      	str	r2, [r4, #0]
 8006b08:	d504      	bpl.n	8006b14 <__sflush_r+0x7c>
 8006b0a:	1c42      	adds	r2, r0, #1
 8006b0c:	d101      	bne.n	8006b12 <__sflush_r+0x7a>
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	b903      	cbnz	r3, 8006b14 <__sflush_r+0x7c>
 8006b12:	6560      	str	r0, [r4, #84]	; 0x54
 8006b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b16:	602f      	str	r7, [r5, #0]
 8006b18:	2900      	cmp	r1, #0
 8006b1a:	d0ca      	beq.n	8006ab2 <__sflush_r+0x1a>
 8006b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b20:	4299      	cmp	r1, r3
 8006b22:	d002      	beq.n	8006b2a <__sflush_r+0x92>
 8006b24:	4628      	mov	r0, r5
 8006b26:	f7ff fbb5 	bl	8006294 <_free_r>
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b2e:	e7c1      	b.n	8006ab4 <__sflush_r+0x1c>
 8006b30:	6a21      	ldr	r1, [r4, #32]
 8006b32:	2301      	movs	r3, #1
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b0      	blx	r6
 8006b38:	1c41      	adds	r1, r0, #1
 8006b3a:	d1c7      	bne.n	8006acc <__sflush_r+0x34>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0c4      	beq.n	8006acc <__sflush_r+0x34>
 8006b42:	2b1d      	cmp	r3, #29
 8006b44:	d001      	beq.n	8006b4a <__sflush_r+0xb2>
 8006b46:	2b16      	cmp	r3, #22
 8006b48:	d101      	bne.n	8006b4e <__sflush_r+0xb6>
 8006b4a:	602f      	str	r7, [r5, #0]
 8006b4c:	e7b1      	b.n	8006ab2 <__sflush_r+0x1a>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b54:	81a3      	strh	r3, [r4, #12]
 8006b56:	e7ad      	b.n	8006ab4 <__sflush_r+0x1c>
 8006b58:	690f      	ldr	r7, [r1, #16]
 8006b5a:	2f00      	cmp	r7, #0
 8006b5c:	d0a9      	beq.n	8006ab2 <__sflush_r+0x1a>
 8006b5e:	0793      	lsls	r3, r2, #30
 8006b60:	680e      	ldr	r6, [r1, #0]
 8006b62:	bf08      	it	eq
 8006b64:	694b      	ldreq	r3, [r1, #20]
 8006b66:	600f      	str	r7, [r1, #0]
 8006b68:	bf18      	it	ne
 8006b6a:	2300      	movne	r3, #0
 8006b6c:	eba6 0807 	sub.w	r8, r6, r7
 8006b70:	608b      	str	r3, [r1, #8]
 8006b72:	f1b8 0f00 	cmp.w	r8, #0
 8006b76:	dd9c      	ble.n	8006ab2 <__sflush_r+0x1a>
 8006b78:	6a21      	ldr	r1, [r4, #32]
 8006b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b7c:	4643      	mov	r3, r8
 8006b7e:	463a      	mov	r2, r7
 8006b80:	4628      	mov	r0, r5
 8006b82:	47b0      	blx	r6
 8006b84:	2800      	cmp	r0, #0
 8006b86:	dc06      	bgt.n	8006b96 <__sflush_r+0xfe>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b8e:	81a3      	strh	r3, [r4, #12]
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	e78e      	b.n	8006ab4 <__sflush_r+0x1c>
 8006b96:	4407      	add	r7, r0
 8006b98:	eba8 0800 	sub.w	r8, r8, r0
 8006b9c:	e7e9      	b.n	8006b72 <__sflush_r+0xda>
 8006b9e:	bf00      	nop
 8006ba0:	20400001 	.word	0x20400001

08006ba4 <_fflush_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	690b      	ldr	r3, [r1, #16]
 8006ba8:	4605      	mov	r5, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	b913      	cbnz	r3, 8006bb4 <_fflush_r+0x10>
 8006bae:	2500      	movs	r5, #0
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	b118      	cbz	r0, 8006bbe <_fflush_r+0x1a>
 8006bb6:	6983      	ldr	r3, [r0, #24]
 8006bb8:	b90b      	cbnz	r3, 8006bbe <_fflush_r+0x1a>
 8006bba:	f000 f887 	bl	8006ccc <__sinit>
 8006bbe:	4b14      	ldr	r3, [pc, #80]	; (8006c10 <_fflush_r+0x6c>)
 8006bc0:	429c      	cmp	r4, r3
 8006bc2:	d11b      	bne.n	8006bfc <_fflush_r+0x58>
 8006bc4:	686c      	ldr	r4, [r5, #4]
 8006bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0ef      	beq.n	8006bae <_fflush_r+0xa>
 8006bce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bd0:	07d0      	lsls	r0, r2, #31
 8006bd2:	d404      	bmi.n	8006bde <_fflush_r+0x3a>
 8006bd4:	0599      	lsls	r1, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_fflush_r+0x3a>
 8006bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bda:	f000 f915 	bl	8006e08 <__retarget_lock_acquire_recursive>
 8006bde:	4628      	mov	r0, r5
 8006be0:	4621      	mov	r1, r4
 8006be2:	f7ff ff59 	bl	8006a98 <__sflush_r>
 8006be6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006be8:	07da      	lsls	r2, r3, #31
 8006bea:	4605      	mov	r5, r0
 8006bec:	d4e0      	bmi.n	8006bb0 <_fflush_r+0xc>
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	059b      	lsls	r3, r3, #22
 8006bf2:	d4dd      	bmi.n	8006bb0 <_fflush_r+0xc>
 8006bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bf6:	f000 f908 	bl	8006e0a <__retarget_lock_release_recursive>
 8006bfa:	e7d9      	b.n	8006bb0 <_fflush_r+0xc>
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <_fflush_r+0x70>)
 8006bfe:	429c      	cmp	r4, r3
 8006c00:	d101      	bne.n	8006c06 <_fflush_r+0x62>
 8006c02:	68ac      	ldr	r4, [r5, #8]
 8006c04:	e7df      	b.n	8006bc6 <_fflush_r+0x22>
 8006c06:	4b04      	ldr	r3, [pc, #16]	; (8006c18 <_fflush_r+0x74>)
 8006c08:	429c      	cmp	r4, r3
 8006c0a:	bf08      	it	eq
 8006c0c:	68ec      	ldreq	r4, [r5, #12]
 8006c0e:	e7da      	b.n	8006bc6 <_fflush_r+0x22>
 8006c10:	08007480 	.word	0x08007480
 8006c14:	080074a0 	.word	0x080074a0
 8006c18:	08007460 	.word	0x08007460

08006c1c <std>:
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	4604      	mov	r4, r0
 8006c22:	e9c0 3300 	strd	r3, r3, [r0]
 8006c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c2a:	6083      	str	r3, [r0, #8]
 8006c2c:	8181      	strh	r1, [r0, #12]
 8006c2e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c30:	81c2      	strh	r2, [r0, #14]
 8006c32:	6183      	str	r3, [r0, #24]
 8006c34:	4619      	mov	r1, r3
 8006c36:	2208      	movs	r2, #8
 8006c38:	305c      	adds	r0, #92	; 0x5c
 8006c3a:	f7fd feb9 	bl	80049b0 <memset>
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <std+0x38>)
 8006c40:	6263      	str	r3, [r4, #36]	; 0x24
 8006c42:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <std+0x3c>)
 8006c44:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c46:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <std+0x40>)
 8006c48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <std+0x44>)
 8006c4c:	6224      	str	r4, [r4, #32]
 8006c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c50:	bd10      	pop	{r4, pc}
 8006c52:	bf00      	nop
 8006c54:	08006f61 	.word	0x08006f61
 8006c58:	08006f83 	.word	0x08006f83
 8006c5c:	08006fbb 	.word	0x08006fbb
 8006c60:	08006fdf 	.word	0x08006fdf

08006c64 <_cleanup_r>:
 8006c64:	4901      	ldr	r1, [pc, #4]	; (8006c6c <_cleanup_r+0x8>)
 8006c66:	f000 b8af 	b.w	8006dc8 <_fwalk_reent>
 8006c6a:	bf00      	nop
 8006c6c:	08006ba5 	.word	0x08006ba5

08006c70 <__sfmoreglue>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	2268      	movs	r2, #104	; 0x68
 8006c74:	1e4d      	subs	r5, r1, #1
 8006c76:	4355      	muls	r5, r2
 8006c78:	460e      	mov	r6, r1
 8006c7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c7e:	f7fe fbaf 	bl	80053e0 <_malloc_r>
 8006c82:	4604      	mov	r4, r0
 8006c84:	b140      	cbz	r0, 8006c98 <__sfmoreglue+0x28>
 8006c86:	2100      	movs	r1, #0
 8006c88:	e9c0 1600 	strd	r1, r6, [r0]
 8006c8c:	300c      	adds	r0, #12
 8006c8e:	60a0      	str	r0, [r4, #8]
 8006c90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c94:	f7fd fe8c 	bl	80049b0 <memset>
 8006c98:	4620      	mov	r0, r4
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}

08006c9c <__sfp_lock_acquire>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	; (8006ca4 <__sfp_lock_acquire+0x8>)
 8006c9e:	f000 b8b3 	b.w	8006e08 <__retarget_lock_acquire_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	20000159 	.word	0x20000159

08006ca8 <__sfp_lock_release>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	; (8006cb0 <__sfp_lock_release+0x8>)
 8006caa:	f000 b8ae 	b.w	8006e0a <__retarget_lock_release_recursive>
 8006cae:	bf00      	nop
 8006cb0:	20000159 	.word	0x20000159

08006cb4 <__sinit_lock_acquire>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	; (8006cbc <__sinit_lock_acquire+0x8>)
 8006cb6:	f000 b8a7 	b.w	8006e08 <__retarget_lock_acquire_recursive>
 8006cba:	bf00      	nop
 8006cbc:	2000015a 	.word	0x2000015a

08006cc0 <__sinit_lock_release>:
 8006cc0:	4801      	ldr	r0, [pc, #4]	; (8006cc8 <__sinit_lock_release+0x8>)
 8006cc2:	f000 b8a2 	b.w	8006e0a <__retarget_lock_release_recursive>
 8006cc6:	bf00      	nop
 8006cc8:	2000015a 	.word	0x2000015a

08006ccc <__sinit>:
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	4604      	mov	r4, r0
 8006cd0:	f7ff fff0 	bl	8006cb4 <__sinit_lock_acquire>
 8006cd4:	69a3      	ldr	r3, [r4, #24]
 8006cd6:	b11b      	cbz	r3, 8006ce0 <__sinit+0x14>
 8006cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cdc:	f7ff bff0 	b.w	8006cc0 <__sinit_lock_release>
 8006ce0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ce4:	6523      	str	r3, [r4, #80]	; 0x50
 8006ce6:	4b13      	ldr	r3, [pc, #76]	; (8006d34 <__sinit+0x68>)
 8006ce8:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <__sinit+0x6c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cee:	42a3      	cmp	r3, r4
 8006cf0:	bf04      	itt	eq
 8006cf2:	2301      	moveq	r3, #1
 8006cf4:	61a3      	streq	r3, [r4, #24]
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 f820 	bl	8006d3c <__sfp>
 8006cfc:	6060      	str	r0, [r4, #4]
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 f81c 	bl	8006d3c <__sfp>
 8006d04:	60a0      	str	r0, [r4, #8]
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 f818 	bl	8006d3c <__sfp>
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	60e0      	str	r0, [r4, #12]
 8006d10:	2104      	movs	r1, #4
 8006d12:	6860      	ldr	r0, [r4, #4]
 8006d14:	f7ff ff82 	bl	8006c1c <std>
 8006d18:	68a0      	ldr	r0, [r4, #8]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	2109      	movs	r1, #9
 8006d1e:	f7ff ff7d 	bl	8006c1c <std>
 8006d22:	68e0      	ldr	r0, [r4, #12]
 8006d24:	2202      	movs	r2, #2
 8006d26:	2112      	movs	r1, #18
 8006d28:	f7ff ff78 	bl	8006c1c <std>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	61a3      	str	r3, [r4, #24]
 8006d30:	e7d2      	b.n	8006cd8 <__sinit+0xc>
 8006d32:	bf00      	nop
 8006d34:	08007200 	.word	0x08007200
 8006d38:	08006c65 	.word	0x08006c65

08006d3c <__sfp>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	4607      	mov	r7, r0
 8006d40:	f7ff ffac 	bl	8006c9c <__sfp_lock_acquire>
 8006d44:	4b1e      	ldr	r3, [pc, #120]	; (8006dc0 <__sfp+0x84>)
 8006d46:	681e      	ldr	r6, [r3, #0]
 8006d48:	69b3      	ldr	r3, [r6, #24]
 8006d4a:	b913      	cbnz	r3, 8006d52 <__sfp+0x16>
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	f7ff ffbd 	bl	8006ccc <__sinit>
 8006d52:	3648      	adds	r6, #72	; 0x48
 8006d54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	d503      	bpl.n	8006d64 <__sfp+0x28>
 8006d5c:	6833      	ldr	r3, [r6, #0]
 8006d5e:	b30b      	cbz	r3, 8006da4 <__sfp+0x68>
 8006d60:	6836      	ldr	r6, [r6, #0]
 8006d62:	e7f7      	b.n	8006d54 <__sfp+0x18>
 8006d64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d68:	b9d5      	cbnz	r5, 8006da0 <__sfp+0x64>
 8006d6a:	4b16      	ldr	r3, [pc, #88]	; (8006dc4 <__sfp+0x88>)
 8006d6c:	60e3      	str	r3, [r4, #12]
 8006d6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d72:	6665      	str	r5, [r4, #100]	; 0x64
 8006d74:	f000 f847 	bl	8006e06 <__retarget_lock_init_recursive>
 8006d78:	f7ff ff96 	bl	8006ca8 <__sfp_lock_release>
 8006d7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d84:	6025      	str	r5, [r4, #0]
 8006d86:	61a5      	str	r5, [r4, #24]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d90:	f7fd fe0e 	bl	80049b0 <memset>
 8006d94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da0:	3468      	adds	r4, #104	; 0x68
 8006da2:	e7d9      	b.n	8006d58 <__sfp+0x1c>
 8006da4:	2104      	movs	r1, #4
 8006da6:	4638      	mov	r0, r7
 8006da8:	f7ff ff62 	bl	8006c70 <__sfmoreglue>
 8006dac:	4604      	mov	r4, r0
 8006dae:	6030      	str	r0, [r6, #0]
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d1d5      	bne.n	8006d60 <__sfp+0x24>
 8006db4:	f7ff ff78 	bl	8006ca8 <__sfp_lock_release>
 8006db8:	230c      	movs	r3, #12
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	e7ee      	b.n	8006d9c <__sfp+0x60>
 8006dbe:	bf00      	nop
 8006dc0:	08007200 	.word	0x08007200
 8006dc4:	ffff0001 	.word	0xffff0001

08006dc8 <_fwalk_reent>:
 8006dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dcc:	4606      	mov	r6, r0
 8006dce:	4688      	mov	r8, r1
 8006dd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dd4:	2700      	movs	r7, #0
 8006dd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dda:	f1b9 0901 	subs.w	r9, r9, #1
 8006dde:	d505      	bpl.n	8006dec <_fwalk_reent+0x24>
 8006de0:	6824      	ldr	r4, [r4, #0]
 8006de2:	2c00      	cmp	r4, #0
 8006de4:	d1f7      	bne.n	8006dd6 <_fwalk_reent+0xe>
 8006de6:	4638      	mov	r0, r7
 8006de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dec:	89ab      	ldrh	r3, [r5, #12]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d907      	bls.n	8006e02 <_fwalk_reent+0x3a>
 8006df2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006df6:	3301      	adds	r3, #1
 8006df8:	d003      	beq.n	8006e02 <_fwalk_reent+0x3a>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	47c0      	blx	r8
 8006e00:	4307      	orrs	r7, r0
 8006e02:	3568      	adds	r5, #104	; 0x68
 8006e04:	e7e9      	b.n	8006dda <_fwalk_reent+0x12>

08006e06 <__retarget_lock_init_recursive>:
 8006e06:	4770      	bx	lr

08006e08 <__retarget_lock_acquire_recursive>:
 8006e08:	4770      	bx	lr

08006e0a <__retarget_lock_release_recursive>:
 8006e0a:	4770      	bx	lr

08006e0c <__swhatbuf_r>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	460e      	mov	r6, r1
 8006e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e14:	2900      	cmp	r1, #0
 8006e16:	b096      	sub	sp, #88	; 0x58
 8006e18:	4614      	mov	r4, r2
 8006e1a:	461d      	mov	r5, r3
 8006e1c:	da08      	bge.n	8006e30 <__swhatbuf_r+0x24>
 8006e1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	602a      	str	r2, [r5, #0]
 8006e26:	061a      	lsls	r2, r3, #24
 8006e28:	d410      	bmi.n	8006e4c <__swhatbuf_r+0x40>
 8006e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e2e:	e00e      	b.n	8006e4e <__swhatbuf_r+0x42>
 8006e30:	466a      	mov	r2, sp
 8006e32:	f000 f8fb 	bl	800702c <_fstat_r>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	dbf1      	blt.n	8006e1e <__swhatbuf_r+0x12>
 8006e3a:	9a01      	ldr	r2, [sp, #4]
 8006e3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e44:	425a      	negs	r2, r3
 8006e46:	415a      	adcs	r2, r3
 8006e48:	602a      	str	r2, [r5, #0]
 8006e4a:	e7ee      	b.n	8006e2a <__swhatbuf_r+0x1e>
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	2000      	movs	r0, #0
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	b016      	add	sp, #88	; 0x58
 8006e54:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e58 <__smakebuf_r>:
 8006e58:	898b      	ldrh	r3, [r1, #12]
 8006e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e5c:	079d      	lsls	r5, r3, #30
 8006e5e:	4606      	mov	r6, r0
 8006e60:	460c      	mov	r4, r1
 8006e62:	d507      	bpl.n	8006e74 <__smakebuf_r+0x1c>
 8006e64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	6123      	str	r3, [r4, #16]
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	6163      	str	r3, [r4, #20]
 8006e70:	b002      	add	sp, #8
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	ab01      	add	r3, sp, #4
 8006e76:	466a      	mov	r2, sp
 8006e78:	f7ff ffc8 	bl	8006e0c <__swhatbuf_r>
 8006e7c:	9900      	ldr	r1, [sp, #0]
 8006e7e:	4605      	mov	r5, r0
 8006e80:	4630      	mov	r0, r6
 8006e82:	f7fe faad 	bl	80053e0 <_malloc_r>
 8006e86:	b948      	cbnz	r0, 8006e9c <__smakebuf_r+0x44>
 8006e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e8c:	059a      	lsls	r2, r3, #22
 8006e8e:	d4ef      	bmi.n	8006e70 <__smakebuf_r+0x18>
 8006e90:	f023 0303 	bic.w	r3, r3, #3
 8006e94:	f043 0302 	orr.w	r3, r3, #2
 8006e98:	81a3      	strh	r3, [r4, #12]
 8006e9a:	e7e3      	b.n	8006e64 <__smakebuf_r+0xc>
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <__smakebuf_r+0x7c>)
 8006e9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	6020      	str	r0, [r4, #0]
 8006ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	9b00      	ldr	r3, [sp, #0]
 8006eac:	6163      	str	r3, [r4, #20]
 8006eae:	9b01      	ldr	r3, [sp, #4]
 8006eb0:	6120      	str	r0, [r4, #16]
 8006eb2:	b15b      	cbz	r3, 8006ecc <__smakebuf_r+0x74>
 8006eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f000 f8c9 	bl	8007050 <_isatty_r>
 8006ebe:	b128      	cbz	r0, 8006ecc <__smakebuf_r+0x74>
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	f043 0301 	orr.w	r3, r3, #1
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	89a0      	ldrh	r0, [r4, #12]
 8006ece:	4305      	orrs	r5, r0
 8006ed0:	81a5      	strh	r5, [r4, #12]
 8006ed2:	e7cd      	b.n	8006e70 <__smakebuf_r+0x18>
 8006ed4:	08006c65 	.word	0x08006c65

08006ed8 <_raise_r>:
 8006ed8:	291f      	cmp	r1, #31
 8006eda:	b538      	push	{r3, r4, r5, lr}
 8006edc:	4604      	mov	r4, r0
 8006ede:	460d      	mov	r5, r1
 8006ee0:	d904      	bls.n	8006eec <_raise_r+0x14>
 8006ee2:	2316      	movs	r3, #22
 8006ee4:	6003      	str	r3, [r0, #0]
 8006ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006eee:	b112      	cbz	r2, 8006ef6 <_raise_r+0x1e>
 8006ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ef4:	b94b      	cbnz	r3, 8006f0a <_raise_r+0x32>
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f000 f830 	bl	8006f5c <_getpid_r>
 8006efc:	462a      	mov	r2, r5
 8006efe:	4601      	mov	r1, r0
 8006f00:	4620      	mov	r0, r4
 8006f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f06:	f000 b817 	b.w	8006f38 <_kill_r>
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d00a      	beq.n	8006f24 <_raise_r+0x4c>
 8006f0e:	1c59      	adds	r1, r3, #1
 8006f10:	d103      	bne.n	8006f1a <_raise_r+0x42>
 8006f12:	2316      	movs	r3, #22
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	2001      	movs	r0, #1
 8006f18:	e7e7      	b.n	8006eea <_raise_r+0x12>
 8006f1a:	2400      	movs	r4, #0
 8006f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f20:	4628      	mov	r0, r5
 8006f22:	4798      	blx	r3
 8006f24:	2000      	movs	r0, #0
 8006f26:	e7e0      	b.n	8006eea <_raise_r+0x12>

08006f28 <raise>:
 8006f28:	4b02      	ldr	r3, [pc, #8]	; (8006f34 <raise+0xc>)
 8006f2a:	4601      	mov	r1, r0
 8006f2c:	6818      	ldr	r0, [r3, #0]
 8006f2e:	f7ff bfd3 	b.w	8006ed8 <_raise_r>
 8006f32:	bf00      	nop
 8006f34:	2000001c 	.word	0x2000001c

08006f38 <_kill_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d07      	ldr	r5, [pc, #28]	; (8006f58 <_kill_r+0x20>)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	4611      	mov	r1, r2
 8006f44:	602b      	str	r3, [r5, #0]
 8006f46:	f7fa fd43 	bl	80019d0 <_kill>
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	d102      	bne.n	8006f54 <_kill_r+0x1c>
 8006f4e:	682b      	ldr	r3, [r5, #0]
 8006f50:	b103      	cbz	r3, 8006f54 <_kill_r+0x1c>
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	bd38      	pop	{r3, r4, r5, pc}
 8006f56:	bf00      	nop
 8006f58:	20000154 	.word	0x20000154

08006f5c <_getpid_r>:
 8006f5c:	f7fa bd30 	b.w	80019c0 <_getpid>

08006f60 <__sread>:
 8006f60:	b510      	push	{r4, lr}
 8006f62:	460c      	mov	r4, r1
 8006f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f68:	f000 f894 	bl	8007094 <_read_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	bfab      	itete	ge
 8006f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f72:	89a3      	ldrhlt	r3, [r4, #12]
 8006f74:	181b      	addge	r3, r3, r0
 8006f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f7a:	bfac      	ite	ge
 8006f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f7e:	81a3      	strhlt	r3, [r4, #12]
 8006f80:	bd10      	pop	{r4, pc}

08006f82 <__swrite>:
 8006f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	461f      	mov	r7, r3
 8006f88:	898b      	ldrh	r3, [r1, #12]
 8006f8a:	05db      	lsls	r3, r3, #23
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	4616      	mov	r6, r2
 8006f92:	d505      	bpl.n	8006fa0 <__swrite+0x1e>
 8006f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f98:	2302      	movs	r3, #2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f000 f868 	bl	8007070 <_lseek_r>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006faa:	81a3      	strh	r3, [r4, #12]
 8006fac:	4632      	mov	r2, r6
 8006fae:	463b      	mov	r3, r7
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb6:	f000 b817 	b.w	8006fe8 <_write_r>

08006fba <__sseek>:
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc2:	f000 f855 	bl	8007070 <_lseek_r>
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	bf15      	itete	ne
 8006fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fd6:	81a3      	strheq	r3, [r4, #12]
 8006fd8:	bf18      	it	ne
 8006fda:	81a3      	strhne	r3, [r4, #12]
 8006fdc:	bd10      	pop	{r4, pc}

08006fde <__sclose>:
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	f000 b813 	b.w	800700c <_close_r>
	...

08006fe8 <_write_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d07      	ldr	r5, [pc, #28]	; (8007008 <_write_r+0x20>)
 8006fec:	4604      	mov	r4, r0
 8006fee:	4608      	mov	r0, r1
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	602a      	str	r2, [r5, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f7fa fd21 	bl	8001a3e <_write>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_write_r+0x1e>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_write_r+0x1e>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20000154 	.word	0x20000154

0800700c <_close_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4d06      	ldr	r5, [pc, #24]	; (8007028 <_close_r+0x1c>)
 8007010:	2300      	movs	r3, #0
 8007012:	4604      	mov	r4, r0
 8007014:	4608      	mov	r0, r1
 8007016:	602b      	str	r3, [r5, #0]
 8007018:	f7fa fd2d 	bl	8001a76 <_close>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_close_r+0x1a>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_close_r+0x1a>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	20000154 	.word	0x20000154

0800702c <_fstat_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	; (800704c <_fstat_r+0x20>)
 8007030:	2300      	movs	r3, #0
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	4611      	mov	r1, r2
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	f7fa fd28 	bl	8001a8e <_fstat>
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	d102      	bne.n	8007048 <_fstat_r+0x1c>
 8007042:	682b      	ldr	r3, [r5, #0]
 8007044:	b103      	cbz	r3, 8007048 <_fstat_r+0x1c>
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	bd38      	pop	{r3, r4, r5, pc}
 800704a:	bf00      	nop
 800704c:	20000154 	.word	0x20000154

08007050 <_isatty_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d06      	ldr	r5, [pc, #24]	; (800706c <_isatty_r+0x1c>)
 8007054:	2300      	movs	r3, #0
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	f7fa fd27 	bl	8001aae <_isatty>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_isatty_r+0x1a>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_isatty_r+0x1a>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	20000154 	.word	0x20000154

08007070 <_lseek_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d07      	ldr	r5, [pc, #28]	; (8007090 <_lseek_r+0x20>)
 8007074:	4604      	mov	r4, r0
 8007076:	4608      	mov	r0, r1
 8007078:	4611      	mov	r1, r2
 800707a:	2200      	movs	r2, #0
 800707c:	602a      	str	r2, [r5, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f7fa fd20 	bl	8001ac4 <_lseek>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_lseek_r+0x1e>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_lseek_r+0x1e>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20000154 	.word	0x20000154

08007094 <_read_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d07      	ldr	r5, [pc, #28]	; (80070b4 <_read_r+0x20>)
 8007098:	4604      	mov	r4, r0
 800709a:	4608      	mov	r0, r1
 800709c:	4611      	mov	r1, r2
 800709e:	2200      	movs	r2, #0
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f7fa fcae 	bl	8001a04 <_read>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_read_r+0x1e>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_read_r+0x1e>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	20000154 	.word	0x20000154

080070b8 <_init>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr

080070c4 <_fini>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr
